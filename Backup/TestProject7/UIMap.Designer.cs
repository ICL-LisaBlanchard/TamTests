// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Ver1
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AcceptEnabled - Use 'AcceptEnabledExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AcceptEnabled()
        {
            #region Variable Declarations
            WinButton uIAcceptButton = this.UIQuoteResultsWindow.UIAcceptWindow.UIAcceptButton;
            #endregion

            // Verify that 'A&ccept' button's property 'Enabled' equals 'True'
            Assert.AreEqual(this.AcceptEnabledExpectedValues.UIAcceptButtonEnabled, uIAcceptButton.Enabled);
        }
        
        /// <summary>
        /// AcceptQuote
        /// </summary>
        public void AcceptQuote()
        {
            #region Variable Declarations
            WinButton uIAcceptButton = this.UIQuoteResultsWindow.UIAcceptWindow.UIAcceptButton;
            #endregion

            // Wait for 3 seconds for user delay between actions; Click 'A&ccept' button
            Playback.Wait(3000);
            Mouse.Click(uIAcceptButton, new Point(70, 7));
        }
        
        /// <summary>
        /// AddPolicy - Use 'AddPolicyParams' to pass parameters into this method.
        /// </summary>
        public void AddPolicy()
        {
            #region Variable Declarations
            WinButton uIClientsFilesButton = this.UITheAgencyManagerWindow1.UIClientsFilesWindow.UIClientsFilesButton;
            WinComboBox uIItemComboBox = this.UICustomertxt1tdsfsWindow.UICUSTOMERSWindow.UIItemWindow.UIItemComboBox;
            WinButton uIAddButton = this.UICustomertxt1tdsfsWindow.UIAddWindow.UIAddButton;
            WinRadioButton uIPersonalLinesRadioButton = this.UIAssignClientNumberWindow.UIPersonalLinesWindow.UIPersonalLinesRadioButton;
            WinEdit uIItemEdit = this.UIAssignClientNumberWindow.UIItemWindow.UIItemEdit;
            WinButton uIOKButton = this.UIAssignClientNumberWindow.UIOKWindow.UIOKButton;
            WinButton uIYesButton = this.UIVerifyWindow.UIYesWindow.UIYesButton;
            WinEdit uIItemEdit1 = this.UICustomertxt1tdsfsWindow.UINewCustomerDetailWindow.UIItemWindow.UIItemEdit;
            WinEdit uIItemEdit2 = this.UICustomertxt1tdsfsWindow.UINewCustomerDetailWindow.UIItemWindow1.UIItemEdit;
            WinButton uIOKButton1 = this.UICustomertxt1tdsfsWindow.UINewCustomerDetailWindow.UIOKWindow.UIOKButton;
            WinButton uIItemButton = this.UICustomertxt1tdsfsWindow.UIItemWindow.UIItemButton;
            WinButton uIOKButton2 = this.UISelectaPolicyNumberWindow.UIOKWindow.UIOKButton;
            WinWindow uIItemWindow = this.UICustomertxt1tdsfsWindow.UINewPolicyDetailWindow.UIItemWindow.UIItemClient.UIItemWindow;
            #endregion

            // Click 'Clients && Files' button
            Mouse.Click(uIClientsFilesButton, new Point(38, 30));

            // Select 'Customers' in 'Unknown Name' combo box
            uIItemComboBox.SelectedItem = this.AddPolicyParams.UIItemComboBoxSelectedItem;

            // Click 'Add' button
            Mouse.Click(uIAddButton, new Point(175, 7));

            // Type 'autotest' in '&Personal Lines' radio button
            Keyboard.SendKeys(uIPersonalLinesRadioButton, this.AddPolicyParams.UIPersonalLinesRadioButtonSendKeys, ModifierKeys.None);

            // Type 'autotest' in 'Unknown Name' text box
            uIItemEdit.Text = this.AddPolicyParams.UIItemEditText;

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(41, 15));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(44, 11));

            // Type '1' in 'Unknown Name' text box
            uIItemEdit1.Text = this.AddPolicyParams.UIItemEditText1;

            // Type '1' in 'Unknown Name' text box
            uIItemEdit2.Text = this.AddPolicyParams.UIItemEditText2;

            // Click 'OK' button
            Mouse.Click(uIOKButton1, new Point(24, 17));

            // Click 'Unknown Name' button
            Mouse.Click(uIItemButton, new Point(10, 15));

            // Click 'Add' button
            Mouse.Click(uIAddButton, new Point(94, 10));

            // Click 'OK' button
            Mouse.Click(uIOKButton2, new Point(37, 13));

            // Click 'Unknown Name' window
            Mouse.Click(uIItemWindow, new Point(21, 18));
        }
        
        /// <summary>
        /// AddressLookupHome - Use 'AddressLookupHomeExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AddressLookupHome()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow6.UIItemEdit;
            WinEdit uIItemEdit1 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow7.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' equals '533 Yardley Green Road'
            Assert.AreEqual(this.AddressLookupHomeExpectedValues.UIItemEditText, uIItemEdit.Text);

            // Verify that 'Unknown Name' text box's property 'Text' equals 'BIRMINGHAM'
            Assert.AreEqual(this.AddressLookupHomeExpectedValues.UIItemEditText1, uIItemEdit1.Text);
        }
        
        /// <summary>
        /// AmendDateBeforeMessage - Use 'AmendDateBeforeMessageExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AmendDateBeforeMessage()
        {
            #region Variable Declarations
            WinText uIDateBeforeInceptionDText = this.UIInsurEtamWindow1.UIAcceptthisquoteNotOvWindow.UIDateBeforeInceptionDText;
            #endregion

            // Verify that 'Date Before Inception Date - Please enter Adjustme...' label's property 'DisplayText' equals 'Date Before Inception Date - Please enter Adjustment Date.'
            Assert.AreEqual(this.AmendDateBeforeMessageExpectedValues.UIDateBeforeInceptionDTextDisplayText, uIDateBeforeInceptionDText.DisplayText);
        }
        
        /// <summary>
        /// AmendRiskRetriveResponse
        /// </summary>
        public void AmendRiskRetriveResponse()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIInsurEtamWindow1.UIOKWindow1.UIOKButton;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(54, 14));
        }
        
        /// <summary>
        /// AmendSelectQuote - Use 'AmendSelectQuoteParams' to pass parameters into this method.
        /// </summary>
        public void AmendSelectQuote()
        {
            #region Variable Declarations
            WinClient uIAmendRiskResultsClient = this.UIAmendRiskResultsWindow.UIItemWindow.UIAmendRiskResultsClient;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'Amend Risk Results' client
            Mouse.Click(uIAmendRiskResultsClient, new Point(362, 136));

            // Type '{Home}' in 'Amend Risk Results' client
            Keyboard.SendKeys(uIAmendRiskResultsClient, this.AmendSelectQuoteParams.UIAmendRiskResultsClientSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// App_started - Use 'App_startedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void App_started()
        {
            #region Variable Declarations
            WinWindow uITheAgencyManagerWindow1 = this.UITheAgencyManagerWindow1;
            #endregion

            // Verify that 'The Agency Manager' window's property 'Name' equals 'Applied TAM 12'
            Assert.AreEqual(this.App_startedExpectedValues.UITheAgencyManagerWindow1Name, uITheAgencyManagerWindow1.Name);
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UICustomertxt1tdsfsWindow.UINewPolicyDetailWindow.UIItemWindow11.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' is not equal to '0.00'
            Assert.AreNotEqual(this.AssertMethod1ExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// AssertMethod2 - Use 'AssertMethod2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod2()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UICustomertxt1tdsfsWindow.UINewPolicyDetailWindow.UIItemWindow11.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' equals '0.00'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// AssertMethod3 - Use 'AssertMethod3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod3()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow1.UIItemEdit;
            WinEdit uIItemEdit1 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' equals 'RF53OXL'
            Assert.AreEqual(this.AssertMethod3ExpectedValues.UIItemEditText, uIItemEdit.Text);

            // Verify that 'Unknown Name' text box's property 'Text' equals '1000'
            Assert.AreEqual(this.AssertMethod3ExpectedValues.UIItemEditText1, uIItemEdit1.Text);
        }
        
        /// <summary>
        /// AssertMethod4 - Use 'AssertMethod4ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod4()
        {
            #region Variable Declarations
            WinWindow uISignonErrorWindow = this.UISignonErrorWindow;
            #endregion

            // Verify that 'Signon Error' window's property 'Exists' equals 'True'
            Assert.AreEqual(this.AssertMethod4ExpectedValues.UISignonErrorWindowExists, uISignonErrorWindow.Exists);
        }
        
        /// <summary>
        /// AssertMethod5 - Use 'AssertMethod5ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod5()
        {
            #region Variable Declarations
            WinGroup uIItemGroup = this.UINewCustomerDAFS001Window.UINewCustomerDetailWindow.UIItemWindow.UIItemGroup;
            WinEdit uIItemEdit = this.UINewCustomerDAFS001Window.UINewCustomerDetailWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' group's property 'ClassName' equals 'ThunderRT6Frame'
            Assert.AreEqual(this.AssertMethod5ExpectedValues.UIItemGroupClassName, uIItemGroup.ClassName);

            // Verify that 'Unknown Name' text box's property 'LineCount' equals '1'
            Assert.AreEqual(this.AssertMethod5ExpectedValues.UIItemEditLineCount, uIItemEdit.LineCount);
        }
        
        /// <summary>
        /// AssertSelectPolicyForm - Use 'AssertSelectPolicyFormExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertSelectPolicyForm()
        {
            #region Variable Declarations
            WinWindow uIQuoteResultsWindow = this.UIQuoteResultsWindow;
            #endregion

            // Verify that 'Quote Results' window's property 'Name' equals 'Quote Results'
            Assert.AreEqual(this.AssertSelectPolicyFormExpectedValues.UIQuoteResultsWindowName, uIQuoteResultsWindow.Name);
        }
        
        /// <summary>
        /// Calculate
        /// </summary>
        public void Calculate()
        {
            #region Variable Declarations
            WinButton uICalculateQuoteButton = this.UIInsurEtamWindow.UIMotorQuotesWindow.UICalculateQuoteWindow.UICalculateQuoteButton;
            #endregion

            // Click 'Calculate &Quote' button
            Mouse.Click(uICalculateQuoteButton, new Point(68, 8));
        }
        
        /// <summary>
        /// CancelFilter
        /// </summary>
        public void CancelFilter()
        {
            #region Variable Declarations
            WinButton uICancelButton = this.UIQuoteSelectListWindow.UICancelWindow.UICancelButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Click '&Cancel' button
            Mouse.Click(uICancelButton, new Point(42, 8));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;
        }
        
        /// <summary>
        /// CancelPrint
        /// </summary>
        public void CancelPrint()
        {
            #region Variable Declarations
            WinButton uICancelButton = this.UISavethefileasWindow.UICancelWindow.UICancelButton;
            #endregion

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(65, 12));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;
        }
        
        /// <summary>
        /// ChangeDatePolicy - Use 'ChangeDatePolicyParams' to pass parameters into this method.
        /// </summary>
        public void ChangeDatePolicy()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIPolicyautotestWindow.UIBillingScreenMOTOWindow.UIItemWindow3.UIItemEdit;
            WinButton uIOKButton = this.UIPolicyautotestWindow.UIBillingScreenMOTOWindow.UIOKWindow.UIOKButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Type '05/11/2011' in 'Unknown Name' text box
            uIItemEdit.Text = this.ChangeDatePolicyParams.UIItemEditText;

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(36, 17));
        }
        
        /// <summary>
        /// ChangePremium - Use 'ChangePremiumParams' to pass parameters into this method.
        /// </summary>
        public void ChangePremium()
        {
            #region Variable Declarations
            WinButton uIPremiumButton = this.UIQuoteResultsWindow.UIPremiumWindow.UIPremiumButton;
            WinEdit uIItemEdit = this.UIOverridePremiumWindow.UIItemWindow.UIItemEdit;
            WinEdit uIItemEdit1 = this.UIOverridePremiumWindow.UIItemWindow1.UIItemEdit;
            WinButton uIOKButton = this.UIOverridePremiumWindow.UIOKWindow.UIOKButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'Premium' button
            Mouse.Click(uIPremiumButton, new Point(23, 7));

            // Type '10000' in 'Unknown Name' text box
            uIItemEdit.Text = this.ChangePremiumParams.UIItemEditText;

            // Type '321412341' in 'Unknown Name' text box
            uIItemEdit1.Text = this.ChangePremiumParams.UIItemEditText1;

            // Click '&OK' button
            Mouse.Click(uIOKButton, new Point(25, 6));
        }
        
        /// <summary>
        /// CheckAutoPrint - Use 'CheckAutoPrintExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckAutoPrint()
        {
            #region Variable Declarations
            HtmlCell uIFORDFIESTABLACK16V13Cell = this.UIViewQuoteDetailsWindow.UIItemClient.UIFileJAPPSIEOfficeDatDocument.UIItemTable.UIFORDFIESTABLACK16V13Cell;
            #endregion

            // Verify that 'FORD FIESTA BLACK 16V (1388cc) 2003-2003' cell's property 'InnerText' contains 'FORD FIESTA BLACK 16V'
            StringAssert.Contains(uIFORDFIESTABLACK16V13Cell.InnerText, this.CheckAutoPrintExpectedValues.UIFORDFIESTABLACK16V13CellInnerText);
        }
        
        /// <summary>
        /// CheckBillingScreen - Use 'CheckBillingScreenExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckBillingScreen()
        {
            #region Variable Declarations
            WinWindow uIBillingScreenMOTOTESWindow = this.UIPolicyautotestWindow.UIWorkspaceClient.UIBillingScreenMOTOTESWindow;
            #endregion

            // Verify that 'Billing Screen: MOTO-TESTPOLICYNUMBER' window's property 'Name' equals 'Billing Screen: MOTO-TESTPOLICYNUMBER'
            Assert.AreEqual(this.CheckBillingScreenExpectedValues.UIBillingScreenMOTOTESWindowName, uIBillingScreenMOTOTESWindow.Name);
        }
        
        /// <summary>
        /// CheckDemandsDoc - Use 'CheckDemandsDocExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckDemandsDoc()
        {
            #region Variable Declarations
            WinClient uIDemandsNeedsMotorComClient = this.UIDemandsNeedsMotorComWindow.UIDemandsNeedsMotorComClient;
            #endregion

            // Verify that 'Demands&Needs(Motor) [Compatibility Mode] - Micros...' client's property 'Name' contains 'DemandsNeeds(Motor)'
            StringAssert.Contains(uIDemandsNeedsMotorComClient.Name, this.CheckDemandsDocExpectedValues.UIDemandsNeedsMotorComClientName);
        }
        
        /// <summary>
        /// CheckMotoPolicyNumber
        /// </summary>
        public void CheckMotoPolicyNumber()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIPolicyautotestWindow.UIBillingScreenMOTOWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' is not equal to 'null'
            Assert.IsNotNull(uIItemEdit.Text);
        }
        
        /// <summary>
        /// CheckQuoteMessage - Use 'CheckQuoteMessageExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckQuoteMessage()
        {
            #region Variable Declarations
            WinText uIAcceptthisquoteNotOvText = this.UIInsurEtamWindow1.UIAcceptthisquoteNotOvWindow.UIAcceptthisquoteNotOvText;
            #endregion

            // Verify that 'Accept this quote (Not Overridden) -  £3007.16, RA...' label's property 'DisplayText' equals 'Accept this quote (Not Overridden) -  £3007.16, RA002050?  This is a TEST Account, NO EDI message will be sent'
            Assert.AreEqual(this.CheckQuoteMessageExpectedValues.UIAcceptthisquoteNotOvTextDisplayText, uIAcceptthisquoteNotOvText.DisplayText);
        }
        
        /// <summary>
        /// CloseClients
        /// </summary>
        public void CloseClients()
        {
            #region Variable Declarations
            WinButton uICancelButton = this.UICustomertxt1tdsfsWindow.UINewPolicyDetailWindow.UICancelWindow.UICancelButton;
            WinButton uICancelButton1 = this.UICustomertxt1tdsfsWindow.UINewCustomerDetailWindow.UICancelWindow.UICancelButton;
            WinButton uICancelButton2 = this.UICustomertxt1tdsfsWindow.UICUSTOMERSWindow.UICancelWindow.UICancelButton;
            #endregion

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(42, 12));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton1, new Point(51, 15));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton2, new Point(49, 12));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;
        }
        
        /// <summary>
        /// CloseLogin
        /// </summary>
        public void CloseLogin()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UISignonErrorWindow.UIOKWindow.UIOKButton;
            WinButton uICancelButton = this.UITheAgencyManagerSignWindow.UIOKWindow.UICancelButton;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(36, 11));

            // Click '&Cancel' button
            Mouse.Click(uICancelButton, new Point(50, 13));
        }
        
        /// <summary>
        /// ClosePolicy
        /// </summary>
        public void ClosePolicy()
        {
            #region Variable Declarations
            WinButton uICancelButton = this.UIPolicyautotestWindow.UIBillingScreenMOTOWindow.UICancelWindow.UICancelButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(46, 7));
        }
        
        /// <summary>
        /// CloseRegressApp
        /// </summary>
        public void CloseRegressApp()
        {
            #region Variable Declarations
            WinButton uIExitButton = this.UIRegressIETamPolicyWindow.UIExitWindow.UIExitButton;
            #endregion

            // Click 'Exit' button
            Mouse.Click(uIExitButton, new Point(35, 20));
        }
        
        /// <summary>
        /// CloseTAM
        /// </summary>
        public void CloseTAM()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UITheAgencyManagerWindow1.UITheAgencyManagerTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(29, 6));
        }
        
        /// <summary>
        /// CloseTransactions
        /// </summary>
        public void CloseTransactions()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UITransactionListWindow.UICloseWindow.UICloseButton;
            WinButton uICancelButton = this.UIPolicyautotestWindow.UIBillingScreenMOTOWindow.UICancelWindow1.UICancelButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(48, 12));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(42, 14));
        }
        
        /// <summary>
        /// ConfirmDocuments
        /// </summary>
        public void ConfirmDocuments()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIConfirmDocumentsWindow.UIOKWindow.UIOKButton;
            #endregion

            // Click 'Ok' button
            Mouse.Click(uIOKButton, new Point(33, 16));
        }
        
        /// <summary>
        /// CoverDateBackCheck - Use 'CoverDateBackCheckExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CoverDateBackCheck()
        {
            #region Variable Declarations
            WinText uICoverCantBeBackDatedText = this.UIInsurEtamWindow1.UIAcceptthisquoteNotOvWindow.UICoverCantBeBackDatedText;
            #endregion

            // Verify that 'Cover Cant Be Back Dated - Please enter Adjustment...' label's property 'DisplayText' equals 'Cover Cant Be Back Dated - Please enter Adjustment Date.'
            Assert.AreEqual(this.CoverDateBackCheckExpectedValues.UICoverCantBeBackDatedTextDisplayText, uICoverCantBeBackDatedText.DisplayText);
        }
        
        /// <summary>
        /// DemandsAndNeeds
        /// </summary>
        public void DemandsAndNeeds()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIViewQuoteDetailsWindow.UIOKWindow.UIOKButton;
            WinButton uIDemandsNeedsButton = this.UIQuoteResultsWindow.UIDemandsNeedsWindow.UIDemandsNeedsButton;
            #endregion

            // Click '&Ok' button
            Mouse.Click(uIOKButton, new Point(31, 11));

            // Click 'Demands && Needs' button
            Mouse.Click(uIDemandsNeedsButton, new Point(47, 12));
        }
        
        /// <summary>
        /// etam_yes
        /// </summary>
        public void etam_yes()
        {
            #region Variable Declarations
            WinButton uIYesButton = this.UIInsurEtamWindow1.UIYesWindow.UIYesButton;
            #endregion

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(42, 12));
        }
        
        /// <summary>
        /// Exit1 - Use 'Exit1Params' to pass parameters into this method.
        /// </summary>
        public void Exit1()
        {
            #region Variable Declarations
            WinButton uIExitButton = this.UIQuoteResultsWindow.UIExitWindow.UIExitButton;
            WinButton uIYesButton = this.UIInsurEtamWindow1.UIYesWindow.UIYesButton;
            WinCheckBox uIAddActivityCheckBox = this.UIImporttoTAMWindow.UIImportOptionsClient.UIAddActivityCheckBox;
            WinButton uIOKButton = this.UIImporttoTAMWindow.UIImporttoTAMClient.UIOKButton;
            WinButton uIOKButton1 = this.UITamxml7Window.UITamxml7Client.UIOKButton;
            WinButton uICancelButton = this.UIPolicyautotestWindow.UIPolicyListWindow.UICancelWindow.UICancelButton;
            WinButton uIItemButton = this.UIPolicyautotestWindow.UIItemWindow.UIItemButton;
            WinButton uIDetailButton = this.UIPolicyautotestWindow.UIPolicyListWindow1.UIDetailWindow.UIDetailButton;
            #endregion

            // Wait for 5 seconds for user delay between actions; Click 'E&xit' button
            Playback.Wait(5000);
            Mouse.Click(uIExitButton, new Point(46, 12));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(39, 9));

            // Clear 'Add Activity' check box
            uIAddActivityCheckBox.Checked = this.Exit1Params.UIAddActivityCheckBoxChecked;

            // Click 'Ok' button
            Mouse.Click(uIOKButton, new Point(34, 11));

            // Click 'OK' button
            Mouse.Click(uIOKButton1, new Point(52, 14));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(23, 19));

            // Click 'Unknown Name' button
            Mouse.Click(uIItemButton, new Point(19, 14));

            // Click 'Detail' button
            Mouse.Click(uIDetailButton, new Point(44, 15));
        }
        
        /// <summary>
        /// ExitEnabled - Use 'ExitEnabledExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ExitEnabled()
        {
            #region Variable Declarations
            WinButton uIExitButton = this.UIQuoteResultsWindow.UIExitWindow.UIExitButton;
            #endregion

            // Verify that 'E&xit' button's property 'Enabled' equals 'True'
            Assert.AreEqual(this.ExitEnabledExpectedValues.UIExitButtonEnabled, uIExitButton.Enabled);
        }
        
        /// <summary>
        /// FinishQuote
        /// </summary>
        public void FinishQuote()
        {
            #region Variable Declarations
            WinButton uIYesButton = this.UIInsurEtamWindow1.UIYesWindow.UIYesButton;
            WinButton uIOKButton = this.UIPaymentMethodsWindow.UIOKWindow.UIOKButton;
            WinButton uIOKButton1 = this.UIConfirmDocumentsWindow.UIOKWindow.UIOKButton;
            WinButton uIConfirmButton = this.UIPolicyDateTimeWindow.UIConfirmWindow.UIConfirmButton;
            #endregion

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(35, 8));

            // Click '&Ok' button
            Mouse.Click(uIOKButton, new Point(40, 10));

            // Click 'Ok' button
            Mouse.Click(uIOKButton1, new Point(54, 10));

            // Click '&Confirm' button
            Mouse.Click(uIConfirmButton, new Point(37, 24));
        }
        
        /// <summary>
        /// FinishQuote1 - Use 'FinishQuote1Params' to pass parameters into this method.
        /// </summary>
        public void FinishQuote1()
        {
            #region Variable Declarations
            WinCheckBox uIDeferPrintingCheckBox = this.UIPointOfSaleWindow.UIDeferPrintingWindow.UIDeferPrintingCheckBox;
            WinButton uIOKButton = this.UIPointOfSaleWindow.UIOKWindow.UIOKButton;
            WinCheckBox uIAddActivityCheckBox = this.UIImporttoTAMWindow.UIImportOptionsClient.UIAddActivityCheckBox;
            WinButton uIOKButton1 = this.UIImporttoTAMWindow.UIImporttoTAMClient.UIOKButton;
            WinButton uIOKButton2 = this.UITransactiontoinsertWindow.UIItemWindow.UITransactiontoinsertClient.UIOKButton;
            WinButton uIOKButton3 = this.UITamxml7Window.UITamxml7Client.UIOKButton;
            #endregion

            // Select '&Defer Printing?' check box
            uIDeferPrintingCheckBox.Checked = this.FinishQuote1Params.UIDeferPrintingCheckBoxChecked;

            // Click 'Ok' button
            Mouse.Click(uIOKButton, new Point(51, 7));

            // Clear 'Add Activity' check box
            uIAddActivityCheckBox.Checked = this.FinishQuote1Params.UIAddActivityCheckBoxChecked;

            // Wait for 2 seconds for user delay between actions; Click 'Ok' button
            Playback.Wait(2000);
            Mouse.Click(uIOKButton1, new Point(41, 15));

            // Click '&Ok' button
            Mouse.Click(uIOKButton2, new Point(42, 14));

            // Click 'OK' button
            Mouse.Click(uIOKButton3, new Point(47, 19));
        }
        
        /// <summary>
        /// HomeAcceptQuote
        /// </summary>
        public void HomeAcceptQuote()
        {
            #region Variable Declarations
            WinButton uIAcceptButton = this.UIQuotesResultsWindow.UIAcceptWindow.UIAcceptButton;
            WinButton uIYesButton = this.UIInsurEtamWindow1.UIYesWindow.UIYesButton;
            #endregion

            // Click 'Accept' button
            Mouse.Click(uIAcceptButton, new Point(33, 15));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(39, 13));
        }
        
        /// <summary>
        /// HomeAcceptQuote_1 - Use 'HomeAcceptQuote_1Params' to pass parameters into this method.
        /// </summary>
        public void HomeAcceptQuote_1()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIBrokerAddonsWindow.UIOKWindow.UIOKButton;
            WinButton uIOKButton1 = this.UIPaymentMethodsWindow.UIOKWindow.UIOKButton;
            WinButton uIOKButton2 = this.UIConfirmDocumentsWindow.UIOKWindow.UIOKButton;
            WinEdit uIItemEdit = this.UIPolicyDetailConfirmaWindow.UIItemWindow.UIItemEdit;
            WinButton uILookupButton = this.UIPolicyDetailConfirmaWindow.UILookupWindow.UILookupButton;
            WinButton uIOKButton3 = this.UISearchResultForB338TWindow.UIOKWindow.UIOKButton;
            WinButton uIConfirmButton = this.UIPolicyDetailConfirmaWindow.UIConfirmWindow.UIConfirmButton;
            WinButton uIOKButton4 = this.UIInsurEtamWindow1.UIOKWindow.UIOKButton;
            WinCheckBox uIDeferPrintingCheckBox = this.UIPointOfSaleWindow.UIDeferPrintingWindow.UIDeferPrintingCheckBox;
            WinButton uIOKButton5 = this.UIPointOfSaleWindow.UIOKWindow.UIOKButton;
            WinCheckBox uIAddActivityCheckBox = this.UIImporttoTAMWindow.UIImportOptionsClient.UIAddActivityCheckBox;
            WinButton uIOKButton6 = this.UIImporttoTAMWindow.UIImporttoTAMClient.UIOKButton;
            WinButton uIOKButton7 = this.UITransactiontoinsertWindow.UIItemWindow.UITransactiontoinsertClient.UIOKButton;
            WinButton uIOKButton8 = this.UITamxml7Window.UITamxml7Client.UIOKButton;
            #endregion

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Click '&Ok' button
            Mouse.Click(uIOKButton, new Point(35, 13));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;

            // Click '&Ok' button
            Mouse.Click(uIOKButton1, new Point(35, 17));

            // Click 'Ok' button
            Mouse.Click(uIOKButton2, new Point(29, 10));

            // Type 'B338TH' in 'Unknown Name' text box
            uIItemEdit.Text = this.HomeAcceptQuote_1Params.UIItemEditText;

            // Click '&Lookup...' button
            Mouse.Click(uILookupButton, new Point(25, 13));

            // Click '&Ok' button
            Mouse.Click(uIOKButton3, new Point(20, 19));

            // Click '&Confirm' button
            Mouse.Click(uIConfirmButton, new Point(26, 9));

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Click 'OK' button
            Mouse.Click(uIOKButton4, new Point(46, 12));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;

            // Select '&Defer Printing?' check box
            uIDeferPrintingCheckBox.Checked = this.HomeAcceptQuote_1Params.UIDeferPrintingCheckBoxChecked;

            // Click 'Ok' button
            Mouse.Click(uIOKButton5, new Point(60, 10));

            // Clear 'Add Activity' check box
            uIAddActivityCheckBox.Checked = this.HomeAcceptQuote_1Params.UIAddActivityCheckBoxChecked;

            // Click 'Ok' button
            Mouse.Click(uIOKButton6, new Point(40, 8));

            // Click '&Ok' button
            Mouse.Click(uIOKButton7, new Point(54, 8));

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Click '&Ok' button
            Mouse.Click(uIOKButton7, new Point(40, 18));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;

            // Click 'OK' button
            Mouse.Click(uIOKButton8, new Point(43, 20));
        }
        
        /// <summary>
        /// HomeAddressLookup - Use 'HomeAddressLookupExpectedValues' to pass parameters into this method.
        /// </summary>
        public void HomeAddressLookup()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow6.UIItemEdit;
            WinEdit uIItemEdit1 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow7.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' equals '533 Yardley Green Road'
            Assert.AreEqual(this.HomeAddressLookupExpectedValues.UIItemEditText, uIItemEdit.Text);

            // Verify that 'Unknown Name' text box's property 'Text' equals 'BIRMINGHAM'
            Assert.AreEqual(this.HomeAddressLookupExpectedValues.UIItemEditText1, uIItemEdit1.Text);
        }
        
        /// <summary>
        /// HomeAmendRenew - Use 'HomeAmendRenewParams' to pass parameters into this method.
        /// </summary>
        public void HomeAmendRenew()
        {
            #region Variable Declarations
            WinButton uIRenewPolicyButton = this.UIHouseholdRenewalsAmeWindow1.UIRenewPolicyWindow.UIRenewPolicyButton;
            WinButton uIYesButton = this.UIConfirmWindow.UIYesWindow.UIYesButton;
            WinButton uIOKButton = this.UIConfirmDocumentsWindow.UIOKWindow.UIOKButton;
            WinCheckBox uIDeferPrintingCheckBox = this.UIPrintDocumentsWindow.UIDeferPrintingWindow.UIDeferPrintingCheckBox;
            WinButton uIOKButton1 = this.UIPrintDocumentsWindow.UIOKWindow.UIOKButton;
            WinButton uIOKButton2 = this.UIInsurEtamWindow1.UIOKWindow.UIOKButton;
            WinCheckBox uIAddActivityCheckBox = this.UIImporttoTAMWindow.UIImportOptionsClient.UIAddActivityCheckBox;
            WinButton uIOKButton3 = this.UIImporttoTAMWindow.UIPanel1Client.UIOKButton;
            WinButton uIOKButton4 = this.UITransactiontoinsertWindow.UIItemWindow.UITransactiontoinsertClient.UIOKButton;
            WinList uIItemList = this.UIPleaseselectWHOtofolWindow.UIItemWindow1.UIItemList;
            WinButton uIOKButton5 = this.UIPleaseselectWHOtofolWindow.UIItemWindow.UIPleaseselectWHOtofolClient.UIOKButton;
            WinButton uIOKButton6 = this.UITamxml7Window.UITamxml7Client.UIOKButton;
            #endregion

            // Click '&Renew Policy' button
            Mouse.Click(uIRenewPolicyButton, new Point(36, 18));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(50, 20));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(65, 18));

            // Click 'Ok' button
            Mouse.Click(uIOKButton, new Point(26, 16));

            // Select '&Defer Printing?' check box
            uIDeferPrintingCheckBox.Checked = this.HomeAmendRenewParams.UIDeferPrintingCheckBoxChecked;

            // Click 'Ok' button
            Mouse.Click(uIOKButton1, new Point(74, 19));

            // Click 'OK' button
            Mouse.Click(uIOKButton2, new Point(64, 14));

            // The recording for the application under test '\\Pc-pez\J-Drive\TamXML\TamXML7.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Clear 'Add Activity' check box
            uIAddActivityCheckBox.Checked = this.HomeAmendRenewParams.UIAddActivityCheckBoxChecked;

            // Click 'Ok' button
            Mouse.Click(uIOKButton3, new Point(60, 17));

            // Click '&Ok' button
            Mouse.Click(uIOKButton4, new Point(21, 8));

            // Select 'AG Administrator General' in 'Unknown Name' list box
            uIItemList.SelectedItemsAsString = this.HomeAmendRenewParams.UIItemListSelectedItemsAsString;

            // Click '&Ok' button
            Mouse.Click(uIOKButton5, new Point(60, 14));

            // Click 'OK' button
            Mouse.Click(uIOKButton6, new Point(30, 15));
        }
        
        /// <summary>
        /// HomeAmendRenewFinish
        /// </summary>
        public void HomeAmendRenewFinish()
        {
            #region Variable Declarations
            WinButton uIRenewPolicyButton = this.UIHouseholdRenewalsAmeWindow1.UIRenewPolicyWindow.UIRenewPolicyButton;
            WinButton uIYesButton = this.UIConfirmWindow.UIYesWindow.UIYesButton;
            WinButton uICancelButton = this.UISavethefileasWindow.UICancelWindow.UICancelButton;
            #endregion

            // Click '&Renew Policy' button
            Mouse.Click(uIRenewPolicyButton, new Point(52, 9));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(55, 11));

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(51, 11));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;
        }
        
        /// <summary>
        /// HomeAmendRenewFinish_1 - Use 'HomeAmendRenewFinish_1Params' to pass parameters into this method.
        /// </summary>
        public void HomeAmendRenewFinish_1()
        {
            #region Variable Declarations
            WinCheckBox uIDeferPrintingCheckBox = this.UIPrintDocumentsWindow.UIDeferPrintingWindow.UIDeferPrintingCheckBox;
            WinButton uIOKButton = this.UIPrintDocumentsWindow.UIOKWindow.UIOKButton;
            WinButton uIOKButton1 = this.UIInsurEtamWindow1.UIOKWindow.UIOKButton;
            WinCheckBox uIAddActivityCheckBox = this.UIImporttoTAMWindow.UIImportOptionsClient.UIAddActivityCheckBox;
            WinButton uIOKButton2 = this.UIImporttoTAMWindow.UIPanel1Client.UIOKButton;
            WinButton uIOKButton3 = this.UITransactiontoinsertWindow.UIItemWindow.UITransactiontoinsertClient.UIOKButton;
            WinList uIItemList = this.UIPleaseselectWHOtofolWindow.UIItemWindow1.UIItemList;
            WinButton uIOKButton4 = this.UIPleaseselectWHOtofolWindow.UIItemWindow.UIPleaseselectWHOtofolClient.UIOKButton;
            WinButton uIOKButton5 = this.UITamxml7Window.UITamxml7Client.UIOKButton;
            #endregion

            // Select '&Defer Printing?' check box
            uIDeferPrintingCheckBox.Checked = this.HomeAmendRenewFinish_1Params.UIDeferPrintingCheckBoxChecked;

            // Click 'Ok' button
            Mouse.Click(uIOKButton, new Point(74, 12));

            // Click 'OK' button
            Mouse.Click(uIOKButton1, new Point(47, 12));

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Click 'OK' button
            Mouse.Click(uIOKButton1, new Point(54, 13));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;

            // Clear 'Add Activity' check box
            uIAddActivityCheckBox.Checked = this.HomeAmendRenewFinish_1Params.UIAddActivityCheckBoxChecked;

            // Click 'Ok' button
            Mouse.Click(uIOKButton2, new Point(48, 9));

            // Click '&Ok' button
            Mouse.Click(uIOKButton3, new Point(19, 12));

            // Select 'AG Administrator General' in 'Unknown Name' list box
            uIItemList.SelectedItemsAsString = this.HomeAmendRenewFinish_1Params.UIItemListSelectedItemsAsString;

            // Click '&Ok' button
            Mouse.Click(uIOKButton4, new Point(13, 16));

            // Click 'OK' button
            Mouse.Click(uIOKButton5, new Point(46, 16));
        }
        
        /// <summary>
        /// HomeAmendRisk - Use 'HomeAmendRiskParams' to pass parameters into this method.
        /// </summary>
        public void HomeAmendRisk()
        {
            #region Variable Declarations
            WinButton uIAmendRiskButton = this.UIAUTO2251001Window.UIAmendRiskWindow.UIAmendRiskButton;
            WinEdit uIItemEdit = this.UIHouseholdRenewalsAmeWindow.UIItemWindow.UIItemEdit;
            WinButton uINextButton = this.UIHouseholdRenewalsAmeWindow.UINextWindow.UINextButton;
            WinButton uINextButton1 = this.UIHouseholdRenewalsAmeWindow.UINextWindow1.UINextButton;
            WinButton uINextButton2 = this.UIHouseholdRenewalsAmeWindow.UINextWindow2.UINextButton;
            WinButton uINextButton3 = this.UIHouseholdRenewalsAmeWindow.UINextWindow3.UINextButton;
            WinButton uINextButton4 = this.UIHouseholdRenewalsAmeWindow.UINextWindow4.UINextButton;
            WinButton uINextButton5 = this.UIHouseholdRenewalsAmeWindow.UINextWindow5.UINextButton;
            WinButton uINextButton6 = this.UIHouseholdRenewalsAmeWindow.UINextWindow6.UINextButton;
            WinButton uIQuoteButton = this.UIHouseholdRenewalsAmeWindow.UIQuoteWindow.UIQuoteButton;
            WinButton uIProceedButton = this.UICreditCheckAtRenewalWindow.UIProceedWindow.UIProceedButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // The recording for the application under test '\\Pc-pez\J-Drive\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click '&Amend Risk...' button
            Mouse.Click(uIAmendRiskButton, new Point(67, 17));

            // Type 'TestNew' in 'Unknown Name' text box
            uIItemEdit.Text = this.HomeAmendRiskParams.UIItemEditText;

            // Click '&Next >' button
            Mouse.Click(uINextButton, new Point(36, 13));

            // Click '&Next >' button
            Mouse.Click(uINextButton1, new Point(44, 13));

            // Click '&Next >' button
            Mouse.Click(uINextButton2, new Point(44, 13));

            // Click '&Next >' button
            Mouse.Click(uINextButton3, new Point(44, 13));

            // Click '&Next >' button
            Mouse.Click(uINextButton4, new Point(44, 13));

            // Click '&Next >' button
            Mouse.Click(uINextButton5, new Point(44, 13));

            // Click '&Next >' button
            Mouse.Click(uINextButton6, new Point(44, 13));

            // Click '&Quote' button
            Mouse.Click(uIQuoteButton, new Point(44, 13));

            // Click 'Proceed' button
            Mouse.Click(uIProceedButton, new Point(59, 15));
        }
        
        /// <summary>
        /// HomeAmendSelecPolicy - Use 'HomeAmendSelecPolicyParams' to pass parameters into this method.
        /// </summary>
        public void HomeAmendSelecPolicy()
        {
            #region Variable Declarations
            WinClient uIHouseholdRenewalsAmeClient = this.UIHouseholdRenewalsAmeWindow1.UIItemWindow.UIHouseholdRenewalsAmeClient;
            #endregion

            // Click 'Household Renewals Amend Risk results' client
            Mouse.Click(uIHouseholdRenewalsAmeClient, new Point(337, 202));

            // Type '{Home}' in 'Household Renewals Amend Risk results' client
            Keyboard.SendKeys(uIHouseholdRenewalsAmeClient, this.HomeAmendSelecPolicyParams.UIHouseholdRenewalsAmeClientSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// HomeCancelCopy
        /// </summary>
        public void HomeCancelCopy()
        {
            #region Variable Declarations
            WinButton uICancelButton = this.UIInsurEtamWindow.UIMotorQuotesWindow.UICancelWindow.UICancelButton;
            WinButton uIYesButton = this.UIInsurEtamWindow1.UIYesWindow.UIYesButton;
            WinButton uIOKButton = this.UITamxml7Window.UITamxml7Client.UIOKButton;
            #endregion

            // Click '&Cancel' button
            Mouse.Click(uICancelButton, new Point(42, 12));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(56, 7));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(31, 15));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(49, 15));
        }
        
        /// <summary>
        /// HomeCancelPolicy - Use 'HomeCancelPolicyParams' to pass parameters into this method.
        /// </summary>
        public void HomeCancelPolicy()
        {
            #region Variable Declarations
            WinButton uIMTAButton = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIMTAWindow1.UIMTAButton;
            WinComboBox uIItemComboBox = this.UIMidTermAdjustmentsWindow.UIItemWindow.UIItemComboBox;
            WinButton uIOKButton = this.UIMidTermAdjustmentsWindow.UIOKWindow.UIOKButton;
            #endregion

            // Click '&MTA' button
            Mouse.Click(uIMTAButton, new Point(35, 8));

            // Select 'Cancel Cover' in 'Unknown Name' combo box
            uIItemComboBox.SelectedItem = this.HomeCancelPolicyParams.UIItemComboBoxSelectedItem;

            // Click '&OK' button
            Mouse.Click(uIOKButton, new Point(31, 11));
        }
        
        /// <summary>
        /// HomeCancelPolicyAccept - Use 'HomeCancelPolicyAcceptParams' to pass parameters into this method.
        /// </summary>
        public void HomeCancelPolicyAccept()
        {
            #region Variable Declarations
            WinClient uIQuotesResultsClient = this.UIQuotesResultsWindow.UIItemWindow1.UIQuotesResultsClient;
            WinButton uIAcceptButton = this.UIQuotesResultsWindow.UIAcceptWindow.UIAcceptButton;
            WinButton uIOKButton = this.UIConfirmMTAWindow.UIOKWindow.UIOKButton;
            WinButton uIOKButton1 = this.UIConfirmDocumentsWindow.UIOKWindow.UIOKButton;
            WinButton uIOKButton2 = this.UIInsurEtamWindow1.UIOKWindow.UIOKButton;
            WinCheckBox uIDeferPrintingCheckBox = this.UIPointOfSaleWindow.UIDeferPrintingWindow.UIDeferPrintingCheckBox;
            WinButton uIOKButton3 = this.UIPointOfSaleWindow.UIOKWindow.UIOKButton;
            WinCheckBox uIAddActivityCheckBox = this.UIImporttoTAMWindow.UIImportOptionsClient.UIAddActivityCheckBox;
            WinButton uIOKButton4 = this.UIImporttoTAMWindow.UIPanel1Client.UIOKButton;
            WinButton uIOKButton5 = this.UITamxml7Window.UITamxml7Client.UIOKButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'Quotes Results' client
            Mouse.Click(uIQuotesResultsClient, new Point(491, 235));

            // Type '{Home}' in 'Quotes Results' client
            Keyboard.SendKeys(uIQuotesResultsClient, this.HomeCancelPolicyAcceptParams.UIQuotesResultsClientSendKeys, ModifierKeys.None);

            // Click 'Accept' button
            Mouse.Click(uIAcceptButton, new Point(85, 15));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(65, 9));

            // Click 'Ok' button
            Mouse.Click(uIOKButton1, new Point(39, 10));

            // Click 'OK' button
            Mouse.Click(uIOKButton2, new Point(47, 13));

            // Select '&Defer Printing?' check box
            uIDeferPrintingCheckBox.Checked = this.HomeCancelPolicyAcceptParams.UIDeferPrintingCheckBoxChecked;

            // Click 'Ok' button
            Mouse.Click(uIOKButton3, new Point(68, 12));

            // The recording for the application under test '\\Pc-pez\J-Drive\TamXML\TamXML7.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Clear 'Add Activity' check box
            uIAddActivityCheckBox.Checked = this.HomeCancelPolicyAcceptParams.UIAddActivityCheckBoxChecked;

            // Click 'Ok' button
            Mouse.Click(uIOKButton4, new Point(42, 12));

            // Click 'OK' button
            Mouse.Click(uIOKButton5, new Point(23, 5));
        }
        
        /// <summary>
        /// HomeCancelPolicyExit
        /// </summary>
        public void HomeCancelPolicyExit()
        {
            #region Variable Declarations
            WinButton uIExitButton = this.UIQuotesResultsWindow.UIExitWindow.UIExitButton;
            WinButton uIOKButton = this.UIInsurEtamWindow1.UIOKWindow1.UIOKButton;
            WinButton uICancelButton = this.UIOpenWindow.UICancelWindow.UICancelButton;
            #endregion

            // Click 'E&xit' button
            Mouse.Click(uIExitButton, new Point(58, 11));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(40, 10));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(54, 12));
        }
        
        /// <summary>
        /// HomeCancelPolicyQuote
        /// </summary>
        public void HomeCancelPolicyQuote()
        {
            #region Variable Declarations
            WinButton uIQuoteButton = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIQuoteWindow.UIQuoteButton;
            #endregion

            // Click '&Quote' button
            Mouse.Click(uIQuoteButton, new Point(41, 7));
        }
        
        /// <summary>
        /// HomeCancelPolicyQuote_1
        /// </summary>
        public void HomeCancelPolicyQuote_1()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIMTAEffectiveDatesWindow.UIOKWindow.UIOKButton;
            WinButton uINOButton = this.UIClaimsWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(52, 9));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(43, 18));
        }
        
        /// <summary>
        /// HomeChangePremium - Use 'HomeChangePremiumParams' to pass parameters into this method.
        /// </summary>
        public void HomeChangePremium()
        {
            #region Variable Declarations
            WinButton uIPremiumButton = this.UIQuotesResultsWindow.UIPremiumWindow.UIPremiumButton;
            WinEdit uIItemEdit = this.UIOverridePremiumWindow.UIItemWindow.UIItemEdit;
            WinEdit uIItemEdit1 = this.UIOverridePremiumWindow.UIItemWindow1.UIItemEdit;
            WinButton uIOKButton = this.UIOverridePremiumWindow.UIOKWindow.UIOKButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'Premium...' button
            Mouse.Click(uIPremiumButton, new Point(38, 11));

            // Type '10000' in 'Unknown Name' text box
            uIItemEdit.Text = this.HomeChangePremiumParams.UIItemEditText;

            // Type '6515616' in 'Unknown Name' text box
            uIItemEdit1.Text = this.HomeChangePremiumParams.UIItemEditText1;

            // Click '&OK' button
            Mouse.Click(uIOKButton, new Point(52, 15));
        }
        
        /// <summary>
        /// HomeCheckDemands - Use 'HomeCheckDemandsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void HomeCheckDemands()
        {
            #region Variable Declarations
            WinClient uIDemandsNeedsHouseholClient = this.UIDemandsNeedsHouseholWindow.UIDemandsNeedsHouseholClient;
            #endregion

            // Verify that 'Demands&Needs(HouseholdBuildings&Contents) [Compat...' client's property 'Name' contains 'DemandsNeeds(HouseholdBuildings&Contents)'
            StringAssert.Contains(uIDemandsNeedsHouseholClient.Name, this.HomeCheckDemandsExpectedValues.UIDemandsNeedsHouseholClientName);
        }
        
        /// <summary>
        /// HomeCheckNewPremium - Use 'HomeCheckNewPremiumExpectedValues' to pass parameters into this method.
        /// </summary>
        public void HomeCheckNewPremium()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIPolicygdfhdfdfghgdfWindow.UIBillingScreenHOMETESWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' is not equal to '0.00'
            Assert.AreNotEqual(this.HomeCheckNewPremiumExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// HomeCheckPolicyPremium - Use 'HomeCheckPolicyPremiumExpectedValues' to pass parameters into this method.
        /// </summary>
        public void HomeCheckPolicyPremium()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIPolicyautotestWindow.UIBillingScreenMOTOWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' is not equal to '0.00'
            Assert.AreNotEqual(this.HomeCheckPolicyPremiumExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// HomeCheckPremium - Use 'HomeCheckPremiumExpectedValues' to pass parameters into this method.
        /// </summary>
        public void HomeCheckPremium()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIPolicyautotestWindow.UIBillingScreenMOTOWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' is not equal to '0.00'
            Assert.AreNotEqual(this.HomeCheckPremiumExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// HomeCheckPrint - Use 'HomeCheckPrintExpectedValues' to pass parameters into this method.
        /// </summary>
        public void HomeCheckPrint()
        {
            #region Variable Declarations
            HtmlCell uIItem1989Cell = this.UIViewQuoteDetailsWindow.UIItemClient.UIFileJAPPSIEOfficeDatDocument.UIItemTable1.UIItem1989Cell;
            HtmlCell uIMrTestTestCell = this.UIViewQuoteDetailsWindow.UIItemClient.UIFileJAPPSIEOfficeDatDocument.UIItemTable1.UIMrTestTestCell;
            #endregion

            // Verify that '1989' cell's property 'InnerText' equals '1989'
            Assert.AreEqual(this.HomeCheckPrintExpectedValues.UIItem1989CellInnerText, uIItem1989Cell.InnerText);

            // Verify that 'Mr Test Test' cell's property 'InnerText' equals 'Mr Test Test'
            Assert.AreEqual(this.HomeCheckPrintExpectedValues.UIMrTestTestCellInnerText, uIMrTestTestCell.InnerText);
        }
        
        /// <summary>
        /// HomeCheckStatus - Use 'HomeCheckStatusExpectedValues' to pass parameters into this method.
        /// </summary>
        public void HomeCheckStatus()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIPolicyautotestWindow.UIBillingScreenMOTOWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' equals 'NEW'
            Assert.AreEqual(this.HomeCheckStatusExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// HomeCheckZeroPremium - Use 'HomeCheckZeroPremiumExpectedValues' to pass parameters into this method.
        /// </summary>
        public void HomeCheckZeroPremium()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIPolicyautotestWindow.UIBillingScreenMOTOWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' equals '0.00'
            Assert.AreEqual(this.HomeCheckZeroPremiumExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// HomeClickPremium
        /// </summary>
        public void HomeClickPremium()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIPolicyautotestWindow.UIBillingScreenMOTOWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Click 'Unknown Name' text box
            Mouse.Click(uIItemEdit, new Point(24, 5));
        }
        
        /// <summary>
        /// HomeCloseOpenPolicy
        /// </summary>
        public void HomeCloseOpenPolicy()
        {
            #region Variable Declarations
            WinButton uICancelButton = this.UIPolicyautotestWindow.UIPolicyListWindow.UICancelWindow.UICancelButton;
            WinButton uIItemButton = this.UIPolicyautotestWindow.UIItemWindow.UIItemButton;
            WinButton uIDetailButton = this.UIPolicyautotestWindow.UIPolicyListWindow1.UIDetailWindow.UIDetailButton;
            #endregion

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(33, 16));

            // Click 'Unknown Name' button
            Mouse.Click(uIItemButton, new Point(18, 20));

            // Click 'Detail' button
            Mouse.Click(uIDetailButton, new Point(44, 16));
        }
        
        /// <summary>
        /// HomeCloseOpenPolicyList
        /// </summary>
        public void HomeCloseOpenPolicyList()
        {
            #region Variable Declarations
            WinButton uICancelButton = this.UIPolicyautotestWindow.UIPolicyListWindow.UICancelWindow.UICancelButton;
            WinButton uIItemButton = this.UIPolicyautotestWindow.UIItemWindow.UIItemButton;
            #endregion

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(47, 19));

            // Click 'Unknown Name' button
            Mouse.Click(uIItemButton, new Point(21, 14));
        }
        
        /// <summary>
        /// HomeClosePilicy
        /// </summary>
        public void HomeClosePilicy()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIInsurEtamWindow.UIMotorQuotesWindow.UICancelWindow.UICloseButton;
            WinButton uIOKButton = this.UITamxml7Window.UITamxml7Client.UIOKButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // The recording for the application under test '\\Pc-pez\J-Drive\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click '&Close' button
            Mouse.Click(uICloseButton, new Point(33, 13));

            // The recording for the application under test '\\Pc-pez\J-Drive\TamXML\TamXML7.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(36, 14));
        }
        
        /// <summary>
        /// HomeCopyCheckData - Use 'HomeCopyCheckDataExpectedValues' to pass parameters into this method.
        /// </summary>
        public void HomeCopyCheckData()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow2.UIItemEdit;
            WinComboBox uIItemComboBox = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow21.UIItemComboBox;
            WinEdit uIItemEdit1 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow5.UIItemEdit;
            WinEdit uIItemEdit2 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow6.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' equals 'Test'
            Assert.AreEqual(this.HomeCopyCheckDataExpectedValues.UIItemEditText, uIItemEdit.Text);

            // Verify that 'Unknown Name' combo box's property 'SelectedItem' equals 'Account Director'
            Assert.AreEqual(this.HomeCopyCheckDataExpectedValues.UIItemComboBoxSelectedItem, uIItemComboBox.SelectedItem);

            // Verify that 'Unknown Name' text box's property 'Text' equals 'B33 8TH'
            Assert.AreEqual(this.HomeCopyCheckDataExpectedValues.UIItemEditText1, uIItemEdit1.Text);

            // Verify that 'Unknown Name' text box's property 'Text' equals '533 Yardley Green Road'
            Assert.AreEqual(this.HomeCopyCheckDataExpectedValues.UIItemEditText2, uIItemEdit2.Text);
        }
        
        /// <summary>
        /// HomeCopyRisk - Use 'HomeCopyRiskParams' to pass parameters into this method.
        /// </summary>
        public void HomeCopyRisk()
        {
            #region Variable Declarations
            WinButton uIOptionsButton = this.UIPolicyautotestWindow.UIPolicyListWindow.UIOptionsWindow.UIOptionsButton;
            WinMenuItem uICopyRiskMenuItem = this.UIPolicyautotestWindow.UIApplicationMenuBar.UIOptionsMenuItem.UILinksMenuItem.UIItem3rdPartyIntegratMenuItem.UICopyRiskMenuItem;
            WinButton uIOKButton = this.UIWhichpolicywouldyoulWindow.UIItemWindow.UIWhichpolicywouldyoulClient.UIOKButton;
            WinRadioButton uIHouseholdRadioButton = this.UIProductSelectionWindow.UIHouseholdWindow.UIHouseholdRadioButton;
            WinButton uIOKButton1 = this.UIProductSelectionWindow.UIOKWindow.UIOKButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'Options' button
            Mouse.Click(uIOptionsButton, new Point(26, 9));

            // Click 'Options' -> 'Links' -> '3rd Party Integration' -> 'Copy Risk' menu item
            Mouse.Click(uICopyRiskMenuItem, new Point(93, 8));

            // The recording for the application under test '\\Pc-pez\J-Drive\TamXML\TamXML7.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click '&Ok' button
            Mouse.Click(uIOKButton, new Point(54, 10));

            // The recording for the application under test '\\Pc-pez\J-Drive\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Select 'Household' radio button
            uIHouseholdRadioButton.Selected = this.HomeCopyRiskParams.UIHouseholdRadioButtonSelected;

            // Click '&OK' button
            Mouse.Click(uIOKButton1, new Point(42, 21));
        }
        
        /// <summary>
        /// HomeCreatePolicy - Use 'HomeCreatePolicyParams' to pass parameters into this method.
        /// </summary>
        public void HomeCreatePolicy()
        {
            #region Variable Declarations
            WinButton uINextButton = this.UIInsurEtamWindow.UIMotorQuotesWindow.UINextWindow.UINextButton;
            WinEdit uIItemEdit = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow8.UIItemEdit;
            WinButton uINextButton1 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UINextWindow1.UINextButton;
            WinButton uINextButton2 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UINextWindow2.UINextButton;
            WinButton uINextButton3 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UINextWindow3.UINextButton;
            WinEdit uIItemEdit1 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow.UIItemEdit;
            WinEdit uIItemEdit2 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow22.UIItemEdit;
            WinEdit uIItemEdit3 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow32.UIItemEdit;
            WinButton uINextButton4 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UINextWindow4.UINextButton;
            WinEdit uIItemEdit4 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow41.UIItemEdit;
            WinButton uINextButton5 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UINextWindow5.UINextButton;
            WinButton uINextButton6 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UINextWindow6.UINextButton;
            WinButton uIQuoteButton = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIQuoteWindow.UIQuoteButton;
            WinButton uINOButton = this.UICreditCheckWindow.UINOWindow.UINOButton;
            #endregion

            // Click '&Next >' button
            Mouse.Click(uINextButton, new Point(19, 6));

            // Type '1989' in 'Unknown Name' text box
            uIItemEdit.Text = this.HomeCreatePolicyParams.UIItemEditText;

            // Click '&Next >' button
            Mouse.Click(uINextButton1, new Point(39, 18));

            // Click '&Next >' button
            Mouse.Click(uINextButton2, new Point(39, 18));

            // Click '&Next >' button
            Mouse.Click(uINextButton3, new Point(39, 18));

            // Type '2345' in 'Unknown Name' text box
            uIItemEdit1.Text = this.HomeCreatePolicyParams.UIItemEditText1;

            // Type '2000' in 'Unknown Name' text box
            uIItemEdit2.Text = this.HomeCreatePolicyParams.UIItemEditText2;

            // Type '2000' in 'Unknown Name' text box
            uIItemEdit3.Text = this.HomeCreatePolicyParams.UIItemEditText3;

            // Click '&Next >' button
            Mouse.Click(uINextButton4, new Point(42, 17));

            // Type '2345' in 'Unknown Name' text box
            uIItemEdit4.Text = this.HomeCreatePolicyParams.UIItemEditText4;

            // Click '&Next >' button
            Mouse.Click(uINextButton5, new Point(16, 13));

            // Click '&Next >' button
            Mouse.Click(uINextButton6, new Point(31, 11));

            // Click '&Quote' button
            Mouse.Click(uIQuoteButton, new Point(31, 11));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(56, 12));
        }
        
        /// <summary>
        /// HomeDemands
        /// </summary>
        public void HomeDemands()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIViewQuoteDetailsWindow.UIOKWindow.UIOKButton;
            WinButton uIDemandsNeedsButton = this.UIQuotesResultsWindow.UIDemandsNeedsWindow.UIDemandsNeedsButton;
            #endregion

            // Click '&Ok' button
            Mouse.Click(uIOKButton, new Point(36, 9));

            // Click 'Demands && Needs' button
            Mouse.Click(uIDemandsNeedsButton, new Point(59, 13));
        }
        
        /// <summary>
        /// HomeDemandsClose
        /// </summary>
        public void HomeDemandsClose()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIDemandsNeedsHouseholWindow.UIItemWindow.UIRibbonPropertyPage.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(25, 7));

            // The recording for the application under test '\\Pc-pez\APPLIED\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.
        }
        
        /// <summary>
        /// HomeExitWithoutPolicy - Use 'HomeExitWithoutPolicyParams' to pass parameters into this method.
        /// </summary>
        public void HomeExitWithoutPolicy()
        {
            #region Variable Declarations
            WinButton uIExitButton = this.UIQuotesResultsWindow.UIExitWindow.UIExitButton;
            WinButton uIYesButton = this.UIInsurEtamWindow1.UIYesWindow.UIYesButton;
            WinCheckBox uIAddActivityCheckBox = this.UIImporttoTAMWindow.UIImportOptionsClient.UIAddActivityCheckBox;
            WinButton uIOKButton = this.UIImporttoTAMWindow.UIImporttoTAMClient.UIOKButton;
            WinButton uIOKButton1 = this.UISelectTaminsurerforiWindow.UIItemWindow1.UISelectTaminsurerforiClient.UIOKButton;
            WinButton uIOKButton2 = this.UITamxml7Window.UITamxml7Client.UIOKButton;
            #endregion

            // Click 'E&xit' button
            Mouse.Click(uIExitButton, new Point(54, 9));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(45, 6));

            // Clear 'Add Activity' check box
            uIAddActivityCheckBox.Checked = this.HomeExitWithoutPolicyParams.UIAddActivityCheckBoxChecked;

            // Click 'Ok' button
            Mouse.Click(uIOKButton, new Point(30, 15));

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Click '&Ok' button
            Mouse.Click(uIOKButton1, new Point(42, 10));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;

            // Click 'OK' button
            Mouse.Click(uIOKButton2, new Point(70, 14));
        }
        
        /// <summary>
        /// HomeMTAAccept
        /// </summary>
        public void HomeMTAAccept()
        {
            #region Variable Declarations
            WinButton uINextButton = this.UIInsurEtamWindow.UIMotorQuotesWindow.UINextWindow.UINextButton;
            WinButton uINextButton1 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UINextWindow1.UINextButton;
            WinButton uINextButton2 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UINextWindow2.UINextButton;
            WinButton uINextButton3 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UINextWindow3.UINextButton;
            WinButton uINextButton4 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UINextWindow4.UINextButton;
            WinButton uINextButton5 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UINextWindow5.UINextButton;
            WinButton uINextButton6 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UINextWindow6.UINextButton;
            WinButton uIQuoteButton = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIQuoteWindow.UIQuoteButton;
            #endregion

            // Click '&Next >' button
            Mouse.Click(uINextButton, new Point(39, 12));

            // Click '&Next >' button
            Mouse.Click(uINextButton1, new Point(47, 12));

            // Click '&Next >' button
            Mouse.Click(uINextButton2, new Point(47, 12));

            // Click '&Next >' button
            Mouse.Click(uINextButton3, new Point(47, 12));

            // Click '&Next >' button
            Mouse.Click(uINextButton4, new Point(47, 12));

            // Click '&Next >' button
            Mouse.Click(uINextButton5, new Point(47, 12));

            // Click '&Next >' button
            Mouse.Click(uINextButton6, new Point(47, 12));

            // Click '&Quote' button
            Mouse.Click(uIQuoteButton, new Point(47, 12));
        }
        
        /// <summary>
        /// HomeMTAAfter
        /// </summary>
        public void HomeMTAAfter()
        {
            #region Variable Declarations
            WinButton uIAfterButton = this.UIMidTermAdjustmentsWindow.UIOKWindow.UIAfterButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // The recording for the application under test '\\Pc-pez\J-Drive\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click '&After' button
            Mouse.Click(uIAfterButton, new Point(38, 10));
        }
        
        /// <summary>
        /// HomeMTABefore
        /// </summary>
        public void HomeMTABefore()
        {
            #region Variable Declarations
            WinButton uIBeforeButton = this.UIMidTermAdjustmentsWindow.UIItemWindow.UIBeforeButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // The recording for the application under test '\\Pc-pez\J-Drive\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click '&Before' button
            Mouse.Click(uIBeforeButton, new Point(27, 12));
        }
        
        /// <summary>
        /// HomeMTACancel
        /// </summary>
        public void HomeMTACancel()
        {
            #region Variable Declarations
            WinButton uICancelButton = this.UIInsurEtamWindow.UIMotorQuotesWindow.UICancelWindow.UICancelButton;
            WinButton uIYesButton = this.UIInsurEtamWindow1.UIYesWindow.UIYesButton;
            WinButton uIOKButton = this.UITamxml7Window.UITamxml7Client.UIOKButton;
            #endregion

            // Click '&Cancel' button
            Mouse.Click(uICancelButton, new Point(42, 13));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(35, 12));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(46, 14));
        }
        
        /// <summary>
        /// HomeMTACancel1
        /// </summary>
        public void HomeMTACancel1()
        {
            #region Variable Declarations
            WinButton uICancelButton = this.UIInsurEtamWindow.UIMotorQuotesWindow.UICancelWindow2.UICancelButton;
            WinButton uIYesButton = this.UIInsurEtamWindow1.UIYesWindow.UIYesButton;
            WinButton uIOKButton = this.UITamxml7Window.UITamxml7Client.UIOKButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // The recording for the application under test '\\Pc-pez\J-Drive\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click '&Cancel' button
            Mouse.Click(uICancelButton, new Point(37, 17));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(66, 11));

            // The recording for the application under test '\\Pc-pez\J-Drive\TamXML\TamXML7.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(49, 13));
        }
        
        /// <summary>
        /// HomeMTAChange - Use 'HomeMTAChangeParams' to pass parameters into this method.
        /// </summary>
        public void HomeMTAChange()
        {
            #region Variable Declarations
            WinButton uIMTAButton = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIMTAWindow1.UIMTAButton;
            WinComboBox uIItemComboBox = this.UIMidTermAdjustmentsWindow.UIItemWindow.UIItemComboBox;
            WinButton uIOKButton = this.UIMidTermAdjustmentsWindow.UIOKWindow.UIOKButton;
            WinEdit uIItemEdit = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Click '&MTA' button
            Mouse.Click(uIMTAButton, new Point(45, 12));

            // Select 'General Adjustment' in 'Unknown Name' combo box
            uIItemComboBox.SelectedItem = this.HomeMTAChangeParams.UIItemComboBoxSelectedItem;

            // Click '&OK' button
            Mouse.Click(uIOKButton, new Point(35, 15));

            // Type 'NewTest' in 'Unknown Name' text box
            uIItemEdit.Text = this.HomeMTAChangeParams.UIItemEditText;
        }
        
        /// <summary>
        /// HomeMTACheckCancelled - Use 'HomeMTACheckCancelledExpectedValues' to pass parameters into this method.
        /// </summary>
        public void HomeMTACheckCancelled()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' equals 'Test'
            Assert.AreEqual(this.HomeMTACheckCancelledExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// HomeMTACheckChanged - Use 'HomeMTACheckChangedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void HomeMTACheckChanged()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' equals 'NewTest'
            Assert.AreEqual(this.HomeMTACheckChangedExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// HomeMTACheckMessage - Use 'HomeMTACheckMessageExpectedValues' to pass parameters into this method.
        /// </summary>
        public void HomeMTACheckMessage()
        {
            #region Variable Declarations
            WinText uIDateBeforeCurrentMTAText = this.UIInsurEtamWindow1.UIAcceptthisquoteNotOvWindow.UIDateBeforeCurrentMTAText;
            #endregion

            // Verify that 'Date Before Current MTA Effective Date - Please en...' label's property 'DisplayText' equals 'Date Before Current MTA Effective Date - Please enter Adjustment Date.'
            Assert.AreEqual(this.HomeMTACheckMessageExpectedValues.UIDateBeforeCurrentMTATextDisplayText, uIDateBeforeCurrentMTAText.DisplayText);
        }
        
        /// <summary>
        /// HomeMTACloseMessage
        /// </summary>
        public void HomeMTACloseMessage()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIInsurEtamWindow1.UIOKWindow.UIOKButton;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(52, 7));
        }
        
        /// <summary>
        /// HomeMTACopyCheck - Use 'HomeMTACopyCheckExpectedValues' to pass parameters into this method.
        /// </summary>
        public void HomeMTACopyCheck()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow2.UIItemEdit;
            WinEdit uIItemEdit1 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow5.UIItemEdit;
            WinEdit uIItemEdit2 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow6.UIItemEdit;
            WinComboBox uIItemComboBox = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow31.UIItemComboBox;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' equals 'NewTest'
            Assert.AreEqual(this.HomeMTACopyCheckExpectedValues.UIItemEditText, uIItemEdit.Text);

            // Verify that 'Unknown Name' text box's property 'Text' equals 'B33 8TH'
            Assert.AreEqual(this.HomeMTACopyCheckExpectedValues.UIItemEditText1, uIItemEdit1.Text);

            // Verify that 'Unknown Name' text box's property 'Text' equals '533 Yardley Green Road'
            Assert.AreEqual(this.HomeMTACopyCheckExpectedValues.UIItemEditText2, uIItemEdit2.Text);

            // Verify that 'Unknown Name' combo box's property 'SelectedItem' equals 'Advertising'
            Assert.AreEqual(this.HomeMTACopyCheckExpectedValues.UIItemComboBoxSelectedItem, uIItemComboBox.SelectedItem);
        }
        
        /// <summary>
        /// HomeMTACoverDate
        /// </summary>
        public void HomeMTACoverDate()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIMTAEffectiveDatesWindow.UIOKWindow.UIOKButton;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(46, 8));
        }
        
        /// <summary>
        /// HomeMTAEnterDate - Use 'HomeMTAEnterDateParams' to pass parameters into this method.
        /// </summary>
        public void HomeMTAEnterDate()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIMTAEffectiveDatesWindow.UIItemWindow.UIItemEdit;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // The recording for the application under test '\\Pc-pez\J-Drive\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Type '15/10/12' in 'Unknown Name' text box
            uIItemEdit.Text = this.HomeMTAEnterDateParams.UIItemEditText;
        }
        
        /// <summary>
        /// HomeMTASelectQuote - Use 'HomeMTASelectQuoteParams' to pass parameters into this method.
        /// </summary>
        public void HomeMTASelectQuote()
        {
            #region Variable Declarations
            WinClient uIQuotesResultsClient = this.UIQuotesResultsWindow.UIItemWindow1.UIQuotesResultsClient;
            WinClient uIQuotesResultsClient1 = this.UIQuotesResultsWindow.UIItemWindow2.UIQuotesResultsClient;
            WinButton uIAcceptButton = this.UIQuotesResultsWindow.UIAcceptWindow.UIAcceptButton;
            WinButton uIOKButton = this.UIConfirmMTAWindow.UIOKWindow.UIOKButton;
            WinButton uIOKButton1 = this.UIConfirmDocumentsWindow.UIOKWindow.UIOKButton;
            WinButton uIOKButton2 = this.UIInsurEtamWindow1.UIOKWindow.UIOKButton;
            WinCheckBox uIDeferPrintingCheckBox = this.UIPointOfSaleWindow.UIDeferPrintingWindow.UIDeferPrintingCheckBox;
            WinButton uIOKButton3 = this.UIPointOfSaleWindow.UIOKWindow.UIOKButton;
            WinCheckBox uIAddActivityCheckBox = this.UIImporttoTAMWindow.UIImportOptionsClient.UIAddActivityCheckBox;
            WinButton uIOKButton4 = this.UIImporttoTAMWindow.UIPanel1Client.UIOKButton;
            WinButton uIOKButton5 = this.UITamxml7Window.UITamxml7Client.UIOKButton;
            #endregion

            // Click 'Quotes Results' client
            Mouse.Click(uIQuotesResultsClient, new Point(424, 227));

            // Type '{Home}' in 'Quotes Results' client
            Keyboard.SendKeys(uIQuotesResultsClient1, this.HomeMTASelectQuoteParams.UIQuotesResultsClientSendKeys, ModifierKeys.None);

            // Click 'Accept' button
            Mouse.Click(uIAcceptButton, new Point(64, 11));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(37, 8));

            // Click 'Ok' button
            Mouse.Click(uIOKButton1, new Point(39, 16));

            // Click 'OK' button
            Mouse.Click(uIOKButton2, new Point(58, 15));

            // Select '&Defer Printing?' check box
            uIDeferPrintingCheckBox.Checked = this.HomeMTASelectQuoteParams.UIDeferPrintingCheckBoxChecked;

            // Click 'Ok' button
            Mouse.Click(uIOKButton3, new Point(50, 8));

            // The recording for the application under test '\\Pc-pez\J-Drive\TamXML\TamXML7.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Clear 'Add Activity' check box
            uIAddActivityCheckBox.Checked = this.HomeMTASelectQuoteParams.UIAddActivityCheckBoxChecked;

            // Click 'Ok' button
            Mouse.Click(uIOKButton4, new Point(29, 19));

            // Click 'OK' button
            Mouse.Click(uIOKButton5, new Point(33, 12));

            // Click 'OK' button
            Mouse.Click(uIOKButton5, new Point(39, 13));
        }
        
        /// <summary>
        /// HomeOpenPolicy
        /// </summary>
        public void HomeOpenPolicy()
        {
            #region Variable Declarations
            WinButton uIDetailButton = this.UIPolicyautotestWindow.UIPolicyListWindow.UIDetailWindow.UIDetailButton;
            WinEdit uIItemEdit = this.UIPolicyautotestWindow.UIBillingScreenMOTOWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Click 'Detail' button
            Mouse.Click(uIDetailButton, new Point(26, 12));

            // Click 'Unknown Name' text box
            Mouse.Click(uIItemEdit, new Point(25, 5));
        }
        
        /// <summary>
        /// HomeOpenQuote
        /// </summary>
        public void HomeOpenQuote()
        {
            #region Variable Declarations
            WinButton uIOptionsButton = this.UIPolicyautotestWindow.UIPolicyListWindow.UIOptionsWindow.UIOptionsButton;
            WinMenuItem uIQuoteSelectListMenuItem = this.UIPolicyautotestWindow.UIApplicationMenuBar.UIOptionsMenuItem.UILinksMenuItem.UIItem3rdPartyIntegratMenuItem.UIQuoteSelectListMenuItem;
            WinButton uIOKButton = this.UICurrentOrFutureWindow.UICurrentOrFutureClient.UIOKButton;
            #endregion

            // Click 'Options' button
            Mouse.Click(uIOptionsButton, new Point(31, 8));

            // Click 'Options' -> 'Links' -> '3rd Party Integration' -> 'Quote Select List' menu item
            Mouse.Click(uIQuoteSelectListMenuItem, new Point(123, 7));

            // Click '&Ok' button
            Mouse.Click(uIOKButton, new Point(44, 13));
        }
        
        /// <summary>
        /// HomePrintQuote
        /// </summary>
        public void HomePrintQuote()
        {
            #region Variable Declarations
            WinButton uICancelButton = this.UIPolicyautotestWindow.UIBillingScreenMOTOWindow.UICancelWindow.UICancelButton;
            #endregion

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(19, 8));
        }
        
        /// <summary>
        /// HomeProposer - Use 'HomeProposerParams' to pass parameters into this method.
        /// </summary>
        public void HomeProposer()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow2.UIItemEdit;
            WinEdit uIItemEdit1 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow11.UIItemEdit;
            WinComboBox uIItemComboBox = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow21.UIItemComboBox;
            WinComboBox uIItemComboBox1 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow31.UIItemComboBox;
            WinEdit uIItemEdit2 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow4.UIItemEdit;
            WinEdit uIItemEdit3 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow5.UIItemEdit;
            WinButton uILookupButton = this.UIInsurEtamWindow.UIMotorQuotesWindow.UILookupWindow.UILookupButton;
            WinButton uIOKButton = this.UISearchResultForB338TWindow.UIOKWindow.UIOKButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\APPLIED\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Type 'test1' in 'Unknown Name' text box
            uIItemEdit.Text = this.HomeProposerParams.UIItemEditText;

            // Type 'test' in 'Unknown Name' text box
            uIItemEdit1.Text = this.HomeProposerParams.UIItemEditText1;

            // Type 'test' in 'Unknown Name' text box
            uIItemEdit.Text = this.HomeProposerParams.UIItemEditText2;

            // Select 'Account Director' in 'Unknown Name' combo box
            uIItemComboBox.SelectedItem = this.HomeProposerParams.UIItemComboBoxSelectedItem;

            // Select 'Advertising' in 'Unknown Name' combo box
            uIItemComboBox1.SelectedItem = this.HomeProposerParams.UIItemComboBoxSelectedItem1;

            // Type '160589' in 'Unknown Name' text box
            uIItemEdit2.Text = this.HomeProposerParams.UIItemEditText3;

            // Click 'Unknown Name' text box
            Mouse.Click(uIItemEdit3, new Point(48, 10));

            // Type 'B338TH' in 'Unknown Name' text box
            uIItemEdit3.Text = this.HomeProposerParams.UIItemEditText4;

            // Click '&Lookup...' button
            Mouse.Click(uILookupButton, new Point(28, 13));

            // Click '&Ok' button
            Mouse.Click(uIOKButton, new Point(43, 7));
        }
        
        /// <summary>
        /// HomeRebroke
        /// </summary>
        public void HomeRebroke()
        {
            #region Variable Declarations
            WinButton uIRebrokeButton = this.UIAUTO2301001Window.UIRebrokeWindow.UIRebrokeButton;
            WinButton uIYesButton = this.UIInsurEtamWindow1.UIYesWindow.UIYesButton;
            WinButton uIProceedButton = this.UICreditCheckAtRenewalWindow.UIProceedWindow.UIProceedButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // The recording for the application under test '\\Pc-pez\J-Drive\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'Re&broke...' button
            Mouse.Click(uIRebrokeButton, new Point(55, 11));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(41, 15));

            // Click 'Proceed' button
            Mouse.Click(uIProceedButton, new Point(61, 11));
        }
        
        /// <summary>
        /// HomeRebrokeCurrent
        /// </summary>
        public void HomeRebrokeCurrent()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIHouseholdRebrokeResuWindow.UIOKWindow.UIOKButton;
            WinButton uIYesButton = this.UIInsurEtamWindow1.UIYesWindow.UIYesButton;
            #endregion

            // Click '&OK' button
            Mouse.Click(uIOKButton, new Point(60, 9));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(63, 11));
        }
        
        /// <summary>
        /// HomeRebrokeFinish
        /// </summary>
        public void HomeRebrokeFinish()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIHouseholdRebrokeResuWindow.UIOKWindow.UIOKButton;
            #endregion

            // Click '&OK' button
            Mouse.Click(uIOKButton, new Point(36, 13));
        }
        
        /// <summary>
        /// HomeRebrokeSelectAlternative
        /// </summary>
        public void HomeRebrokeSelectAlternative()
        {
            #region Variable Declarations
            WinButton uISelectAlternativeButton = this.UIHouseholdRebrokeResuWindow.UISelectAlternativeWindow.UISelectAlternativeButton;
            #endregion

            // Click '&Select Alternative' button
            Mouse.Click(uISelectAlternativeButton, new Point(49, 13));
        }
        
        /// <summary>
        /// HomeRebrokeSelectPolicy - Use 'HomeRebrokeSelectPolicyParams' to pass parameters into this method.
        /// </summary>
        public void HomeRebrokeSelectPolicy()
        {
            #region Variable Declarations
            WinClient uIHouseholdRebrokeResuClient = this.UIHouseholdRebrokeResuWindow.UIItemWindow.UIHouseholdRebrokeResuClient;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'Household Rebroke Results' client
            Mouse.Click(uIHouseholdRebrokeResuClient, new Point(449, 216));

            // Type '{Home}' in 'Household Rebroke Results' client
            Keyboard.SendKeys(uIHouseholdRebrokeResuClient, this.HomeRebrokeSelectPolicyParams.UIHouseholdRebrokeResuClientSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// HomeRenewalBeforeAccept - Use 'HomeRenewalBeforeAcceptParams' to pass parameters into this method.
        /// </summary>
        public void HomeRenewalBeforeAccept()
        {
            #region Variable Declarations
            WinClient uIQuotesResultsClient = this.UIQuotesResultsWindow.UIItemWindow1.UIQuotesResultsClient;
            WinButton uIAcceptButton = this.UIQuotesResultsWindow.UIAcceptWindow.UIAcceptButton;
            WinButton uIOKButton = this.UIConfirmMTAWindow.UIOKWindow.UIOKButton;
            WinButton uIOKButton1 = this.UIConfirmDocumentsWindow.UIOKWindow.UIOKButton;
            WinButton uIOKButton2 = this.UIInsurEtamWindow1.UIOKWindow.UIOKButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // The recording for the application under test '\\Pc-pez\J-Drive\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'Quotes Results' client
            Mouse.Click(uIQuotesResultsClient, new Point(420, 229));

            // Type '{Home}' in 'Quotes Results' client
            Keyboard.SendKeys(uIQuotesResultsClient, this.HomeRenewalBeforeAcceptParams.UIQuotesResultsClientSendKeys, ModifierKeys.None);

            // Click 'Accept' button
            Mouse.Click(uIAcceptButton, new Point(75, 10));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(36, 16));

            // Click 'Ok' button
            Mouse.Click(uIOKButton1, new Point(37, 19));

            // Click 'OK' button
            Mouse.Click(uIOKButton2, new Point(48, 14));
        }
        
        /// <summary>
        /// HomeRenewalBeforeFinish - Use 'HomeRenewalBeforeFinishParams' to pass parameters into this method.
        /// </summary>
        public void HomeRenewalBeforeFinish()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIMTASuccessfulWindow.UIOKWindow.UIOKButton;
            WinCheckBox uIDeferPrintingCheckBox = this.UIPointOfSaleWindow.UIDeferPrintingWindow.UIDeferPrintingCheckBox;
            WinButton uIOKButton1 = this.UIPointOfSaleWindow.UIOKWindow.UIOKButton;
            WinCheckBox uIAddActivityCheckBox = this.UIImporttoTAMWindow.UIImportOptionsClient.UIAddActivityCheckBox;
            WinButton uIOKButton2 = this.UIImporttoTAMWindow.UIPanel1Client.UIOKButton;
            WinButton uIOKButton3 = this.UITamxml7Window.UITamxml7Client.UIOKButton;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(49, 11));

            // Select '&Defer Printing?' check box
            uIDeferPrintingCheckBox.Checked = this.HomeRenewalBeforeFinishParams.UIDeferPrintingCheckBoxChecked;

            // Click 'Ok' button
            Mouse.Click(uIOKButton1, new Point(53, 18));

            // The recording for the application under test '\\Pc-pez\J-Drive\TamXML\TamXML7.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Clear 'Add Activity' check box
            uIAddActivityCheckBox.Checked = this.HomeRenewalBeforeFinishParams.UIAddActivityCheckBoxChecked;

            // Click 'Ok' button
            Mouse.Click(uIOKButton2, new Point(33, 12));

            // Click 'OK' button
            Mouse.Click(uIOKButton3, new Point(28, 13));

            // Click 'OK' button
            Mouse.Click(uIOKButton3, new Point(35, 11));
        }
        
        /// <summary>
        /// HomeRenewalCancelledCheck - Use 'HomeRenewalCancelledCheckExpectedValues' to pass parameters into this method.
        /// </summary>
        public void HomeRenewalCancelledCheck()
        {
            #region Variable Declarations
            WinText uIMTAsuccessfullyproceText = this.UIMTASuccessfulWindow.UIMTAsuccessfullyproceWindow.UIMTAsuccessfullyproceText;
            #endregion

            // Verify that 'MTA successfully processed on a previously renewed...' label's property 'DisplayText' contains 'WARNING! - RENEWAL EDI HAS BEEN CANCELLED'
            StringAssert.Contains(uIMTAsuccessfullyproceText.DisplayText, this.HomeRenewalCancelledCheckExpectedValues.UIMTAsuccessfullyproceTextDisplayText);
        }
        
        /// <summary>
        /// HomeRenewalConfirm
        /// </summary>
        public void HomeRenewalConfirm()
        {
            #region Variable Declarations
            WinButton uIYesButton = this.UIInsurEtamWindow1.UIYesWindow.UIYesButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // The recording for the application under test '\\Pc-pez\J-Drive\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(33, 10));
        }
        
        /// <summary>
        /// HomeSelectPolicy - Use 'HomeSelectPolicyParams' to pass parameters into this method.
        /// </summary>
        public void HomeSelectPolicy()
        {
            #region Variable Declarations
            WinClient uIQuotesResultsClient = this.UIQuotesResultsWindow.UIItemWindow.UIQuotesResultsClient;
            #endregion

            // Click 'Quotes Results' client
            Mouse.Click(uIQuotesResultsClient, new Point(367, 171));

            // Type '{End}' in 'Quotes Results' client
            Keyboard.SendKeys(uIQuotesResultsClient, this.HomeSelectPolicyParams.UIQuotesResultsClientSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// HomeSelectPolicy1 - Use 'HomeSelectPolicy1Params' to pass parameters into this method.
        /// </summary>
        public void HomeSelectPolicy1()
        {
            #region Variable Declarations
            WinClient uIQuotesResultsClient = this.UIQuotesResultsWindow.UIItemWindow1.UIQuotesResultsClient;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // The recording for the application under test '\\Pc-pez\J-Drive\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'Quotes Results' client
            Mouse.Click(uIQuotesResultsClient, new Point(354, 212));

            // Type '{Home}' in 'Quotes Results' client
            Keyboard.SendKeys(uIQuotesResultsClient, this.HomeSelectPolicy1Params.UIQuotesResultsClientSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// HomeSiteRenewal - Use 'HomeSiteRenewalParams' to pass parameters into this method.
        /// </summary>
        public void HomeSiteRenewal()
        {
            #region Variable Declarations
            HtmlHyperlink uICreateaHouseholdTestHyperlink = this.UIInsurEcomSystemMaintWindow.UILeftbarFrame.UIInsurEcomLeftbarDocument1.UIDivRenewalsPane.UICreateaHouseholdTestHyperlink;
            HtmlComboBox uIInsurerIDComboBox = this.UIInsurEcomSystemMaintWindow.UIContentFrame.UIInsurEcomMainPageDocument1.UIInsurerIDComboBox;
            HtmlEdit uITxtPolicyNumberEdit = this.UIInsurEcomSystemMaintWindow.UIContentFrame.UIInsurEcomMainPageDocument1.UITxtPolicyNumberEdit;
            HtmlEdit uITxtRenewalDateEdit = this.UIInsurEcomSystemMaintWindow.UIContentFrame.UIInsurEcomMainPageDocument1.UITxtRenewalDateEdit;
            HtmlEdit uITxtAutoLapseDateEdit = this.UIInsurEcomSystemMaintWindow.UIContentFrame.UIInsurEcomMainPageDocument1.UITxtAutoLapseDateEdit;
            HtmlTextArea uITxtClientXmlEdit = this.UIInsurEcomSystemMaintWindow.UIContentFrame.UIInsurEcomMainPageDocument1.UITxtClientXmlEdit;
            HtmlInputButton uIGetXMLfromServerButton = this.UIInsurEcomSystemMaintWindow.UIContentFrame.UIInsurEcomMainPageDocument1.UIGetXMLfromServerButton;
            HtmlInputButton uICreateRecordButton = this.UIInsurEcomSystemMaintWindow.UIContentFrame.UIInsurEcomMainPageDocument1.UICreateRecordButton;
            BrowserWindow uIInsurEcomSystemMaintWindow = this.UIInsurEcomSystemMaintWindow;
            #endregion

            // Click 'Create a Household Test Renewal Invitation' link
            Mouse.Click(uICreateaHouseholdTestHyperlink, new Point(48, 20));

            // Select 'Covea Insurance plc (formerly MMA)' in 'InsurerID' combo box
            uIInsurerIDComboBox.SelectedItem = this.HomeSiteRenewalParams.UIInsurerIDComboBoxSelectedItem;

            // Type '81588888001120' in 'txtPolicyNumber' text box
            uITxtPolicyNumberEdit.Text = this.HomeSiteRenewalParams.UITxtPolicyNumberEditText;

            // Type '14/11/2012' in 'txtRenewalDate' text box
            uITxtRenewalDateEdit.Text = this.HomeSiteRenewalParams.UITxtRenewalDateEditText;

            // Type '14/11/2012' in 'txtAutoLapseDate' text box
            uITxtAutoLapseDateEdit.Text = this.HomeSiteRenewalParams.UITxtAutoLapseDateEditText;

            // Click 'txtClientXml' text box
            Mouse.Click(uITxtClientXmlEdit, new Point(284, 43));

            // Click 'Get XML from Server' button
            Mouse.Click(uIGetXMLfromServerButton, new Point(114, 9));

            // Click 'Create Record' button
            Mouse.Click(uICreateRecordButton, new Point(102, 11));

            // Click 'Ok' button in the browser dialog window
            uIInsurEcomSystemMaintWindow.PerformDialogAction(BrowserDialogAction.Ok);
        }
        
        /// <summary>
        /// HomeStartDate - Use 'HomeStartDateParams' to pass parameters into this method.
        /// </summary>
        public void HomeStartDate()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow13.UIItemEdit;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // The recording for the application under test '\\Pc-pez\J-Drive\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Type '10/11/12' in 'Unknown Name' text box
            uIItemEdit.Text = this.HomeStartDateParams.UIItemEditText;
        }
        
        /// <summary>
        /// HouseProposer - Use 'HouseProposerParams' to pass parameters into this method.
        /// </summary>
        public void HouseProposer()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow2.UIItemEdit;
            WinEdit uIItemEdit1 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow11.UIItemEdit;
            WinEdit uIItemEdit2 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow3.UIItemEdit;
            WinComboBox uIItemComboBox = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow21.UIItemComboBox;
            WinComboBox uIItemComboBox1 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow31.UIItemComboBox;
            WinEdit uIItemEdit3 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow4.UIItemEdit;
            WinEdit uIItemEdit4 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow5.UIItemEdit;
            WinEdit uIItemEdit5 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow51.UIItemEdit;
            WinButton uILookupButton = this.UIInsurEtamWindow.UIMotorQuotesWindow.UILookupWindow.UILookupButton;
            WinButton uIOKButton = this.UISearchResultForB338TWindow.UIOKWindow.UIOKButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\APPLIED\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // The recording for the application under test '\\Pc-pez\APPLIED\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Type 'test1' in 'Unknown Name' text box
            uIItemEdit.Text = this.HouseProposerParams.UIItemEditText;

            // Type 'test' in 'Unknown Name' text box
            uIItemEdit1.Text = this.HouseProposerParams.UIItemEditText1;

            // Type 'test' in 'Unknown Name' text box
            uIItemEdit2.Text = this.HouseProposerParams.UIItemEditText2;

            // Select 'Advertising Buyer' in 'Unknown Name' combo box
            uIItemComboBox.SelectedItem = this.HouseProposerParams.UIItemComboBoxSelectedItem;

            // Select 'Addressing/Circularising Services' in 'Unknown Name' combo box
            uIItemComboBox1.SelectedItem = this.HouseProposerParams.UIItemComboBoxSelectedItem1;

            // Type '151065' in 'Unknown Name' text box
            uIItemEdit3.Text = this.HouseProposerParams.UIItemEditText3;

            // Click 'Unknown Name' text box
            Mouse.Click(uIItemEdit4, new Point(16, 7));

            // Type 'B338TH' in 'Unknown Name' text box
            uIItemEdit5.Text = this.HouseProposerParams.UIItemEditText4;

            // Click '&Lookup...' button
            Mouse.Click(uILookupButton, new Point(31, 15));

            // Click '&Ok' button
            Mouse.Click(uIOKButton, new Point(28, 22));
        }
        
        /// <summary>
        /// HouseRegressApp - Use 'HouseRegressAppParams' to pass parameters into this method.
        /// </summary>
        public void HouseRegressApp()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIRegressIETamPolicyWindow.UIItemWindow4.UIItemComboBox;
            #endregion

            // Select 'Household' in 'Unknown Name' combo box
            uIItemComboBox.SelectedItem = this.HouseRegressAppParams.UIItemComboBoxSelectedItem;
        }
        
        /// <summary>
        /// Links_1
        /// </summary>
        public void Links_1()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UICurrentOrFutureWindow.UICurrentOrFutureClient.UIOKButton;
            #endregion

            // Click '&Ok' button
            Mouse.Click(uIOKButton, new Point(40, 5));
        }
        
        /// <summary>
        /// Login - Use 'LoginParams' to pass parameters into this method.
        /// </summary>
        public void Login()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UITheAgencyManagerSignWindow.UIItemWindow.UIItemEdit;
            WinButton uIOKButton = this.UITheAgencyManagerSignWindow.UIOKWindow.UIOKButton;
            #endregion

            // Wait for 5 seconds for user delay between actions; Launch '\\Pc-pez\APPLIED\WINTAM\HOMEBASE.EXE'
            Playback.Wait(5000);
            ApplicationUnderTest hOMEBASEApplication = ApplicationUnderTest.Launch(this.LoginParams.ExePath, this.LoginParams.AlternateExePath);

            // Click 'Unknown Name' text box
            Mouse.Click(uIItemEdit, new Point(51, 8));

            // Type '********' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.LoginParams.UIItemEditSendKeys, true);

            // Click '&OK' button
            Mouse.Click(uIOKButton, new Point(55, 10));

            // Click '&OK' button
            Mouse.Click(uIOKButton, new Point(56, 13));
        }
        
        /// <summary>
        /// Login_new - Use 'Login_newParams' to pass parameters into this method.
        /// </summary>
        public void Login_new()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UITheAgencyManagerSignWindow.UIItemWindow.UIItemEdit;
            WinButton uIOKButton = this.UITheAgencyManagerSignWindow.UIOKWindow1.UIOKButton;
            #endregion

            // Launch 'C:\APPLIED\WINTAM\HOMEBASE.EXE'
            ApplicationUnderTest hOMEBASEApplication = ApplicationUnderTest.Launch(this.Login_newParams.ExePath, this.Login_newParams.AlternateExePath);

            // Click 'Unknown Name' text box
            Mouse.Click(uIItemEdit, new Point(33, 11));

            // Type '********' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.Login_newParams.UIItemEditSendKeys, true);

            // Click '&OK' button
            Mouse.Click(uIOKButton, new Point(67, 13));
        }
        
        /// <summary>
        /// LoginEnterDate - Use 'LoginEnterDateParams' to pass parameters into this method.
        /// </summary>
        public void LoginEnterDate()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UITheAgencyManagerSignWindow.UIOKWindow.UIItemEdit;
            WinComboBox uIItemComboBox = this.UITheAgencyManagerSignWindow.UIItemWindow1.UIItemComboBox;
            WinEdit uIItemEdit1 = this.UITheAgencyManagerSignWindow.UIItemWindow2.UIItemEdit;
            WinButton uIOKButton = this.UITheAgencyManagerSignWindow.UIOKWindow1.UIOKButton;
            #endregion

            // The recording for the application under test '\\ICLVDEVAP01\J-Drive\wintam\Homebase.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Type '13/11/2012' in 'Unknown Name' text box
            uIItemEdit.Text = this.LoginEnterDateParams.UIItemEditText;

            // Select 'November' in 'Unknown Name' combo box
            uIItemComboBox.SelectedItem = this.LoginEnterDateParams.UIItemComboBoxSelectedItem;

            // Type '2012' in 'Unknown Name' text box
            uIItemEdit1.Text = this.LoginEnterDateParams.UIItemEditText1;

            // Click '&OK' button
            Mouse.Click(uIOKButton, new Point(54, 5));
        }
        
        /// <summary>
        /// MotoAmendRisk - Use 'MotoAmendRiskParams' to pass parameters into this method.
        /// </summary>
        public void MotoAmendRisk()
        {
            #region Variable Declarations
            WinButton uIAmendRiskButton = this.UIAUTO2081001Window.UIAmendRiskWindow.UIAmendRiskButton;
            WinEdit uIItemEdit = this.UIAmendRiskWindow.UIItemWindow.UIItemEdit;
            WinButton uIProposerDetailsButton = this.UIAmendRiskWindow.UIProposerDetailsWindow.UIProposerDetailsButton;
            WinEdit uIItemEdit1 = this.UIProposerDetailsWindow.UIItemWindow.UIItemEdit;
            WinButton uIOKButton = this.UIProposerDetailsWindow.UIOKWindow.UIOKButton;
            WinButton uICalculateQuoteButton = this.UIAmendRiskWindow.UICalculateQuoteWindow.UICalculateQuoteButton;
            WinButton uINOButton = this.UICreditCheckWindow.UINOWindow.UINOButton;
            WinButton uICancelButton = this.UIQuoteSelectListWindow.UICancelWindow.UICancelButton;
            #endregion

            // Click '&Amend Risk...' button
            Mouse.Click(uIAmendRiskButton, new Point(80, 11));

            // Type '1500' in 'Unknown Name' text box
            uIItemEdit.Text = this.MotoAmendRiskParams.UIItemEditText;

            // Click '&Proposer Details...' button
            Mouse.Click(uIProposerDetailsButton, new Point(66, 12));

            // Type 'NewTest' in 'Unknown Name' text box
            uIItemEdit1.Text = this.MotoAmendRiskParams.UIItemEditText1;

            // Click '&OK' button
            Mouse.Click(uIOKButton, new Point(50, 11));

            // Click 'Calculate &Quote' button
            Mouse.Click(uICalculateQuoteButton, new Point(58, 6));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(50, 0));

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Click '&Cancel' button
            Mouse.Click(uICancelButton, new Point(14, 18));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;
        }
        
        /// <summary>
        /// MotoAmendRiskNew
        /// </summary>
        public void MotoAmendRiskNew()
        {
            #region Variable Declarations
            WinButton uIRenewPolicyButton = this.UIAmendRiskResultsWindow.UIRenewPolicyWindow.UIRenewPolicyButton;
            WinButton uIYesButton = this.UIConfirmWindow.UIYesWindow.UIYesButton;
            WinButton uICancelButton = this.UISavethefileasWindow.UICancelWindow.UICancelButton;
            WinButton uIOKButton = this.UIConfirmDocumentsWindow.UIOKWindow.UIOKButton;
            #endregion

            // Click '&Renew Policy' button
            Mouse.Click(uIRenewPolicyButton, new Point(51, 9));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(60, 14));

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(62, 15));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;

            // Click 'Ok' button
            Mouse.Click(uIOKButton, new Point(37, 9));
        }
        
        /// <summary>
        /// MotoAWAPCheckNEW - Use 'MotoAWAPCheckNEWExpectedValues' to pass parameters into this method.
        /// </summary>
        public void MotoAWAPCheckNEW()
        {
            #region Variable Declarations
            WinEdit uILblBalanceEdit = this.UITransactionListWindow.UILblBalanceWindow.UILblBalanceEdit;
            #endregion

            // Verify that 'lblBalance' text box's property 'Text' equals '10,000.00'
            Assert.AreEqual(this.MotoAWAPCheckNEWExpectedValues.UILblBalanceEditText, uILblBalanceEdit.Text);
        }
        
        /// <summary>
        /// MotoAWAPCheckTAX - Use 'MotoAWAPCheckTAXExpectedValues' to pass parameters into this method.
        /// </summary>
        public void MotoAWAPCheckTAX()
        {
            #region Variable Declarations
            WinEdit uILblBalanceEdit = this.UITransactionListWindow.UILblBalanceWindow.UILblBalanceEdit;
            #endregion

            // Verify that 'lblBalance' text box's property 'Text' equals '600.00'
            Assert.AreEqual(this.MotoAWAPCheckTAXExpectedValues.UILblBalanceEditText, uILblBalanceEdit.Text);
        }
        
        /// <summary>
        /// MotoCalculate
        /// </summary>
        public void MotoCalculate()
        {
            #region Variable Declarations
            WinButton uICalculateQuoteButton = this.UIInsurEtamWindow.UIMotorQuotesWindow.UICalculateQuoteWindow.UICalculateQuoteButton;
            #endregion

            // Click 'Calculate &Quote' button
            Mouse.Click(uICalculateQuoteButton, new Point(69, 13));
        }
        
        /// <summary>
        /// MotoCancelExit
        /// </summary>
        public void MotoCancelExit()
        {
            #region Variable Declarations
            WinButton uIExitButton = this.UIQuoteResultsWindow.UIExitWindow.UIExitButton;
            WinButton uIYesButton = this.UIInsurEtamWindow1.UIYesWindow.UIYesButton;
            WinButton uIOKButton = this.UITamxml7Window.UITamxml7Client.UIOKButton;
            #endregion

            // Click 'E&xit' button
            Mouse.Click(uIExitButton, new Point(59, 16));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(66, 12));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(53, 10));
        }
        
        /// <summary>
        /// MotoCancelPolicy - Use 'MotoCancelPolicyParams' to pass parameters into this method.
        /// </summary>
        public void MotoCancelPolicy()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIMidTermAdjustmentsWindow.UIItemWindow.UIItemComboBox;
            WinButton uIOKButton = this.UIMidTermAdjustmentsWindow.UIOKWindow.UIOKButton;
            WinButton uICalculateQuoteButton = this.UIInsurEtamWindow.UIMotorQuotesWindow.UICalculateQuoteWindow.UICalculateQuoteButton;
            #endregion

            // Select 'Cancel Cover' in 'Unknown Name' combo box
            uIItemComboBox.SelectedItem = this.MotoCancelPolicyParams.UIItemComboBoxSelectedItem;

            // Click '&OK' button
            Mouse.Click(uIOKButton, new Point(34, 12));

            // Click 'Calculate &Quote' button
            Mouse.Click(uICalculateQuoteButton, new Point(67, 12));
        }
        
        /// <summary>
        /// MotoCancelPolicy_1
        /// </summary>
        public void MotoCancelPolicy_1()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIMTAEffectiveDatesWindow.UIOKWindow.UIOKButton;
            WinButton uINOButton = this.UIClaimsWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(39, 9));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(22, 18));
        }
        
        /// <summary>
        /// MotoCheckAWAPpremium - Use 'MotoCheckAWAPpremiumExpectedValues' to pass parameters into this method.
        /// </summary>
        public void MotoCheckAWAPpremium()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIPolicyautotestWindow.UIBillingScreenMOTOWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' equals '10000.00'
            Assert.AreEqual(this.MotoCheckAWAPpremiumExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// MotoCheckChangedPremium - Use 'MotoCheckChangedPremiumExpectedValues' to pass parameters into this method.
        /// </summary>
        public void MotoCheckChangedPremium()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIPolicyautotestWindow.UIBillingScreenMOTOWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' equals '9433.96'
            Assert.AreEqual(this.MotoCheckChangedPremiumExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// MotoCheckPolicyStatus - Use 'MotoCheckPolicyStatusExpectedValues' to pass parameters into this method.
        /// </summary>
        public void MotoCheckPolicyStatus()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIPolicyautotestWindow.UIBillingScreenMOTOWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' equals 'NEW'
            Assert.AreEqual(this.MotoCheckPolicyStatusExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// MotoCloseAndOpenPolicyList
        /// </summary>
        public void MotoCloseAndOpenPolicyList()
        {
            #region Variable Declarations
            WinButton uICancelButton = this.UICustomertxt1tdsfsWindow.UINewCustomerDetailWindow.UICancelWindow.UICancelButton;
            WinButton uIItemButton = this.UICustomertxt1tdsfsWindow.UIItemWindow.UIItemButton;
            WinButton uIDetailButton = this.UICustomertxt1tdsfsWindow.UIPolicyListWindow.UIDetailWindow.UIDetailButton;
            #endregion

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(31, 15));

            // Click 'Unknown Name' button
            Mouse.Click(uIItemButton, new Point(27, 23));

            // Click 'Detail' button
            Mouse.Click(uIDetailButton, new Point(52, 11));
        }
        
        /// <summary>
        /// MotoCloseDetails
        /// </summary>
        public void MotoCloseDetails()
        {
            #region Variable Declarations
            WinButton uICancelButton = this.UIPolicyautotestWindow.UIBillingScreenMOTOWindow.UICancelWindow.UICancelButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(32, 12));
        }
        
        /// <summary>
        /// MotoCopyCheckCar - Use 'MotoCopyCheckCarExpectedValues' to pass parameters into this method.
        /// </summary>
        public void MotoCopyCheckCar()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow1.UIItemEdit;
            WinEdit uIItemEdit1 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' equals 'RF53OXL'
            Assert.AreEqual(this.MotoCopyCheckCarExpectedValues.UIItemEditText, uIItemEdit.Text);

            // Verify that 'Unknown Name' text box's property 'Text' equals '1000'
            Assert.AreEqual(this.MotoCopyCheckCarExpectedValues.UIItemEditText1, uIItemEdit1.Text);
        }
        
        /// <summary>
        /// MotoCopyCheckProposer - Use 'MotoCopyCheckProposerExpectedValues' to pass parameters into this method.
        /// </summary>
        public void MotoCopyCheckProposer()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIProposerDetailsWindow.UIItemWindow.UIItemEdit;
            WinEdit uIItemEdit1 = this.UIProposerDetailsWindow.UIItemWindow2.UIItemEdit;
            WinEdit uIItemEdit2 = this.UIProposerDetailsWindow.UIItemWindow3.UIItemEdit;
            WinEdit uIItemEdit3 = this.UIProposerDetailsWindow.UIItemWindow4.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' equals 'Test'
            Assert.AreEqual(this.MotoCopyCheckProposerExpectedValues.UIItemEditText, uIItemEdit.Text);

            // Verify that 'Unknown Name' text box's property 'Text' equals '16 Apr 1985'
            Assert.AreEqual(this.MotoCopyCheckProposerExpectedValues.UIItemEditText1, uIItemEdit1.Text);

            // Verify that 'Unknown Name' text box's property 'Text' equals 'B33 8TH'
            Assert.AreEqual(this.MotoCopyCheckProposerExpectedValues.UIItemEditText2, uIItemEdit2.Text);

            // Verify that 'Unknown Name' text box's property 'Text' equals '533 Yardley Green Road'
            Assert.AreEqual(this.MotoCopyCheckProposerExpectedValues.UIItemEditText3, uIItemEdit3.Text);
        }
        
        /// <summary>
        /// MotoCopyFinish - Use 'MotoCopyFinishParams' to pass parameters into this method.
        /// </summary>
        public void MotoCopyFinish()
        {
            #region Variable Declarations
            WinButton uICalculateQuoteButton = this.UIInsurEtamWindow.UIMotorQuotesWindow.UICalculateQuoteWindow.UICalculateQuoteButton;
            WinButton uICancelButton = this.UIQuoteSelectListWindow.UICancelWindow.UICancelButton;
            WinButton uINOButton = this.UICreditCheckWindow.UINOWindow.UINOButton;
            WinClient uIQuoteResultsClient = this.UIQuoteResultsWindow.UIItemWindow.UIQuoteResultsClient;
            WinButton uIAcceptButton = this.UIQuoteResultsWindow.UIAcceptWindow.UIAcceptButton;
            WinButton uIYesButton = this.UIInsurEtamWindow1.UIYesWindow.UIYesButton;
            WinButton uIOKButton = this.UIPaymentMethodsWindow.UIOKWindow.UIOKButton;
            WinButton uIOKButton1 = this.UIConfirmDocumentsWindow.UIOKWindow.UIOKButton;
            WinButton uIConfirmButton = this.UIPolicyDateTimeWindow.UIConfirmWindow.UIConfirmButton;
            WinButton uICancelButton1 = this.UISavethefileasWindow.UICancelWindow.UICancelButton;
            WinCheckBox uIDeferPrintingCheckBox = this.UIPointOfSaleWindow.UIDeferPrintingWindow.UIDeferPrintingCheckBox;
            WinButton uIOKButton2 = this.UIPointOfSaleWindow.UIOKWindow.UIOKButton;
            WinCheckBox uIAddActivityCheckBox = this.UIImporttoTAMWindow.UIImportOptionsClient.UIAddActivityCheckBox;
            WinButton uIOKButton3 = this.UIImporttoTAMWindow.UIPanel1Client.UIOKButton;
            WinButton uIOKButton4 = this.UITamXMLImportCustomerWindow.UIItemWindow.UITamXMLImportCustomerClient.UIOKButton;
            WinButton uIOKButton5 = this.UITransactiontoinsertWindow.UIItemWindow.UITransactiontoinsertClient.UIOKButton;
            WinButton uIOKButton6 = this.UIPleaseselectWHOtofolWindow.UIItemWindow.UIPleaseselectWHOtofolClient.UIOKButton;
            WinButton uIOKButton7 = this.UITamxml7Window.UITamxml7Client.UIOKButton;
            WinList uIItemList = this.UIPleaseselectWHOtofolWindow.UIItemWindow1.UIItemList;
            WinButton uICancelButton2 = this.UIPolicyautotestWindow.UIPolicyListWindow.UICancelWindow.UICancelButton;
            #endregion

            // Click 'Calculate &Quote' button
            Mouse.Click(uICalculateQuoteButton, new Point(91, 8));

            // Click '&Cancel' button
            Mouse.Click(uICancelButton, new Point(46, 7));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(33, 11));

            // Click 'Quote Results' client
            Mouse.Click(uIQuoteResultsClient, new Point(456, 148));

            // Type '{Home}' in 'Quote Results' client
            Keyboard.SendKeys(uIQuoteResultsClient, this.MotoCopyFinishParams.UIQuoteResultsClientSendKeys, ModifierKeys.None);

            // Click 'A&ccept' button
            Mouse.Click(uIAcceptButton, new Point(58, 14));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(52, 6));

            // Click '&Ok' button
            Mouse.Click(uIOKButton, new Point(25, 19));

            // Click 'Ok' button
            Mouse.Click(uIOKButton1, new Point(48, 11));

            // Click '&Confirm' button
            Mouse.Click(uIConfirmButton, new Point(20, 7));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton1, new Point(39, 12));

            // Select '&Defer Printing?' check box
            uIDeferPrintingCheckBox.Checked = this.MotoCopyFinishParams.UIDeferPrintingCheckBoxChecked;

            // Click 'Ok' button
            Mouse.Click(uIOKButton2, new Point(54, 8));

            // Clear 'Add Activity' check box
            uIAddActivityCheckBox.Checked = this.MotoCopyFinishParams.UIAddActivityCheckBoxChecked;

            // Click 'Ok' button
            Mouse.Click(uIOKButton3, new Point(23, 12));

            // Click '&Ok' button
            Mouse.Click(uIOKButton4, new Point(54, 8));

            // Click '&Ok' button
            Mouse.Click(uIOKButton5, new Point(40, 14));

            // Click '&Ok' button
            Mouse.Click(uIOKButton6, new Point(40, 14));

            // Click 'OK' button
            Mouse.Click(uIOKButton7, new Point(43, 21));

            // Select 'AG Administrator General' in 'Unknown Name' list box
            uIItemList.SelectedItemsAsString = this.MotoCopyFinishParams.UIItemListSelectedItemsAsString;

            // Click '&Ok' button
            Mouse.Click(uIOKButton6, new Point(42, 8));

            // Click 'OK' button
            Mouse.Click(uIOKButton7, new Point(43, 6));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton2, new Point(39, 13));
        }
        
        /// <summary>
        /// MotoCopyFinishedRisk
        /// </summary>
        public void MotoCopyFinishedRisk()
        {
            #region Variable Declarations
            WinButton uIOptionsButton = this.UIPolicyautotestWindow.UIPolicyListWindow.UIOptionsWindow.UIOptionsButton;
            WinMenuItem uICopyRiskMenuItem = this.UIPolicyautotestWindow.UIApplicationMenuBar.UIOptionsMenuItem.UILinksMenuItem.UIItem3rdPartyIntegratMenuItem.UICopyRiskMenuItem;
            WinButton uIOKButton = this.UIWhichpolicywouldyoulWindow.UIItemWindow.UIWhichpolicywouldyoulClient.UIOKButton;
            WinButton uIOKButton1 = this.UIProductSelectionWindow.UIOKWindow.UIOKButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'Options' button
            Mouse.Click(uIOptionsButton, new Point(29, 12));

            // Click 'Options' -> 'Links' -> '3rd Party Integration' -> 'Copy Risk' menu item
            Mouse.Click(uICopyRiskMenuItem, new Point(79, 13));

            // The recording for the application under test '\\Pc-pez\J-Drive\TamXML\TamXML7.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click '&Ok' button
            Mouse.Click(uIOKButton, new Point(57, 15));

            // The recording for the application under test '\\Pc-pez\J-Drive\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click '&OK' button
            Mouse.Click(uIOKButton1, new Point(31, 15));
        }
        
        /// <summary>
        /// MotoCopyRiskExit
        /// </summary>
        public void MotoCopyRiskExit()
        {
            #region Variable Declarations
            WinButton uIExitButton = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIExitWindow.UIExitButton;
            WinButton uINOButton = this.UIInsurEtamWindow1.UINOWindow.UINOButton;
            WinButton uIOKButton = this.UITamxml7Window.UITamxml7Client.UIOKButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // The recording for the application under test '\\Pc-pez\J-Drive\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click '&Exit' button
            Mouse.Click(uIExitButton, new Point(66, 10));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(47, 10));

            // The recording for the application under test '\\Pc-pez\J-Drive\TamXML\TamXML7.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(34, 11));
        }
        
        /// <summary>
        /// MotoCopyRiskProposerOk
        /// </summary>
        public void MotoCopyRiskProposerOk()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIProposerDetailsWindow.UIOKWindow.UIOKButton;
            #endregion

            // Click '&OK' button
            Mouse.Click(uIOKButton, new Point(44, 7));
        }
        
        /// <summary>
        /// MotoExitMTA
        /// </summary>
        public void MotoExitMTA()
        {
            #region Variable Declarations
            WinButton uIExitButton = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIExitWindow.UIExitButton;
            WinButton uIYesButton = this.UIInsurEtamWindow1.UIYesWindow.UIYesButton;
            WinButton uIOKButton = this.UITamxml7Window.UITamxml7Client.UIOKButton;
            #endregion

            // Click '&Exit' button
            Mouse.Click(uIExitButton, new Point(51, 10));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(13, 9));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(55, 12));
        }
        
        /// <summary>
        /// MotoFinishMTA - Use 'MotoFinishMTAParams' to pass parameters into this method.
        /// </summary>
        public void MotoFinishMTA()
        {
            #region Variable Declarations
            WinClient uIQuoteResultsClient = this.UIQuoteResultsWindow.UIItemWindow2.UIQuoteResultsClient;
            WinButton uIAcceptButton = this.UIQuoteResultsWindow.UIAcceptWindow.UIAcceptButton;
            WinButton uIYesButton = this.UIInsurEtamWindow1.UIYesWindow.UIYesButton;
            WinButton uIOKButton = this.UIConfirmDocumentsWindow.UIOKWindow.UIOKButton;
            WinButton uIOKButton1 = this.UIInsurEtamWindow1.UIOKWindow.UIOKButton;
            WinClient uIPointOfSaleClient = this.UIPointOfSaleWindow.UIPointOfSaleClient;
            WinCheckBox uIDeferPrintingCheckBox = this.UIPointOfSaleWindow.UIDeferPrintingWindow.UIDeferPrintingCheckBox;
            WinButton uIOKButton2 = this.UIPointOfSaleWindow.UIOKWindow.UIOKButton;
            WinCheckBox uIAddActivityCheckBox = this.UIImporttoTAMWindow.UIImportOptionsClient.UIAddActivityCheckBox;
            WinButton uIOKButton3 = this.UIImporttoTAMWindow.UIPanel1Client.UIOKButton;
            WinButton uIOKButton4 = this.UITamxml7Window.UITamxml7Client.UIOKButton;
            #endregion

            // Click 'Quote Results' client
            Mouse.Click(uIQuoteResultsClient, new Point(371, 177));

            // Type '{Home}' in 'Quote Results' client
            Keyboard.SendKeys(uIQuoteResultsClient, this.MotoFinishMTAParams.UIQuoteResultsClientSendKeys, ModifierKeys.None);

            // Click 'A&ccept' button
            Mouse.Click(uIAcceptButton, new Point(51, 11));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(57, 13));

            // Click 'Ok' button
            Mouse.Click(uIOKButton, new Point(38, 11));

            // Click 'OK' button
            Mouse.Click(uIOKButton1, new Point(59, 17));

            // Click 'Point Of Sale' client
            Mouse.Click(uIPointOfSaleClient, new Point(477, 239));

            // Select '&Defer Printing?' check box
            uIDeferPrintingCheckBox.Checked = this.MotoFinishMTAParams.UIDeferPrintingCheckBoxChecked;

            // Click 'Ok' button
            Mouse.Click(uIOKButton2, new Point(54, 19));

            // Clear 'Add Activity' check box
            uIAddActivityCheckBox.Checked = this.MotoFinishMTAParams.UIAddActivityCheckBoxChecked;

            // Click 'Ok' button
            Mouse.Click(uIOKButton3, new Point(43, 6));

            // Click 'OK' button
            Mouse.Click(uIOKButton4, new Point(48, 14));

            // Click 'OK' button
            Mouse.Click(uIOKButton4, new Point(38, 12));
        }
        
        /// <summary>
        /// MotoInceptionDate - Use 'MotoInceptionDateParams' to pass parameters into this method.
        /// </summary>
        public void MotoInceptionDate()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow13.UIItemEdit;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // The recording for the application under test '\\Pc-pez\J-Drive\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Type '13/11/12' in 'Unknown Name' text box
            uIItemEdit.Text = this.MotoInceptionDateParams.UIItemEditText;
        }
        
        /// <summary>
        /// MotoMTA
        /// </summary>
        public void MotoMTA()
        {
            #region Variable Declarations
            WinButton uIOptionsButton = this.UIPolicyautotestWindow.UIPolicyListWindow.UIOptionsWindow.UIOptionsButton;
            WinMenuItem uIQuoteSelectListMenuItem = this.UIPolicyautotestWindow.UIApplicationMenuBar.UIOptionsMenuItem.UILinksMenuItem.UIItem3rdPartyIntegratMenuItem.UIQuoteSelectListMenuItem;
            WinButton uIOKButton = this.UICurrentOrFutureWindow.UICurrentOrFutureClient.UIOKButton;
            WinButton uIMTAButton = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIMTAWindow.UIMTAButton;
            #endregion

            // Click 'Options' button
            Mouse.Click(uIOptionsButton, new Point(37, 10));

            // Click 'Options' -> 'Links' -> '3rd Party Integration' -> 'Quote Select List' menu item
            Mouse.Click(uIQuoteSelectListMenuItem, new Point(80, 15));

            // Click '&Ok' button
            Mouse.Click(uIOKButton, new Point(41, 10));

            // Click '&MTA...' button
            Mouse.Click(uIMTAButton, new Point(67, 11));
        }
        
        /// <summary>
        /// MotoMTAAccept - Use 'MotoMTAAcceptParams' to pass parameters into this method.
        /// </summary>
        public void MotoMTAAccept()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIMidTermAdjustmentsWindow.UIItemWindow.UIItemComboBox;
            WinButton uIOKButton = this.UIMidTermAdjustmentsWindow.UIOKWindow.UIOKButton;
            WinEdit uIItemEdit = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow.UIItemEdit;
            WinButton uICalculateQuoteButton = this.UIInsurEtamWindow.UIMotorQuotesWindow.UICalculateQuoteWindow.UICalculateQuoteButton;
            #endregion

            // Select 'Change of Vehicle' in 'Unknown Name' combo box
            uIItemComboBox.SelectedItem = this.MotoMTAAcceptParams.UIItemComboBoxSelectedItem;

            // Click '&OK' button
            Mouse.Click(uIOKButton, new Point(28, 12));

            // Type '2000' in 'Unknown Name' text box
            uIItemEdit.Text = this.MotoMTAAcceptParams.UIItemEditText;

            // Click 'Calculate &Quote' button
            Mouse.Click(uICalculateQuoteButton, new Point(68, 4));
        }
        
        /// <summary>
        /// MotoMTABefore - Use 'MotoMTABeforeParams' to pass parameters into this method.
        /// </summary>
        public void MotoMTABefore()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UICurrentOrFutureWindow.UICurrentOrFutureClient.UIOKButton;
            WinButton uIBeforeButton = this.UIMidTermAdjustmentsWindow.UIItemWindow.UIBeforeButton;
            WinButton uIMTAButton = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIMTAWindow.UIMTAButton;
            WinComboBox uIItemComboBox = this.UIMidTermAdjustmentsWindow.UIItemWindow1.UIItemComboBox;
            WinButton uIOKButton1 = this.UIMidTermAdjustmentsWindow.UIOKWindow.UIOKButton;
            WinEdit uIItemEdit = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow1.UIItemEdit;
            WinButton uICalculateQuoteButton = this.UIInsurEtamWindow.UIMotorQuotesWindow.UICalculateQuoteWindow.UICalculateQuoteButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // The recording for the application under test '\\Pc-pez\J-Drive\TamXML\TamXML7.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click '&Ok' button
            Mouse.Click(uIOKButton, new Point(35, 10));

            // The recording for the application under test '\\Pc-pez\J-Drive\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click '&Before' button
            Mouse.Click(uIBeforeButton, new Point(19, 16));

            // Click '&MTA...' button
            Mouse.Click(uIMTAButton, new Point(44, 11));

            // Select 'Change of Vehicle' in 'Unknown Name' combo box
            uIItemComboBox.SelectedItem = this.MotoMTABeforeParams.UIItemComboBoxSelectedItem;

            // Click '&OK' button
            Mouse.Click(uIOKButton1, new Point(44, 21));

            // Type '77777' in 'Unknown Name' text box
            uIItemEdit.Text = this.MotoMTABeforeParams.UIItemEditText;

            // Click 'Calculate &Quote' button
            Mouse.Click(uICalculateQuoteButton, new Point(61, 15));
        }
        
        /// <summary>
        /// MotoMTABefore2 - Use 'MotoMTABefore2Params' to pass parameters into this method.
        /// </summary>
        public void MotoMTABefore2()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UICurrentOrFutureWindow.UICurrentOrFutureClient.UIOKButton;
            WinButton uIYesButton = this.UIInsurEtamWindow1.UIYesWindow.UIYesButton;
            WinButton uIMTAButton = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIMTAWindow.UIMTAButton;
            WinComboBox uIItemComboBox = this.UIMidTermAdjustmentsWindow.UIItemWindow.UIItemComboBox;
            WinButton uIOKButton1 = this.UIMidTermAdjustmentsWindow.UIOKWindow.UIOKButton;
            WinEdit uIItemEdit = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow1.UIItemEdit;
            WinButton uICalculateQuoteButton = this.UIInsurEtamWindow.UIMotorQuotesWindow.UICalculateQuoteWindow.UICalculateQuoteButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\TamXML\TamXML7.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click '&Ok' button
            Mouse.Click(uIOKButton, new Point(44, 11));

            // The recording for the application under test '\\Pc-pez\J-Drive\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(57, 12));

            // Click '&MTA...' button
            Mouse.Click(uIMTAButton, new Point(53, 9));

            // Select 'Change of Vehicle' in 'Unknown Name' combo box
            uIItemComboBox.SelectedItem = this.MotoMTABefore2Params.UIItemComboBoxSelectedItem;

            // Click '&OK' button
            Mouse.Click(uIOKButton1, new Point(36, 16));

            // Type '23423' in 'Unknown Name' text box
            uIItemEdit.Text = this.MotoMTABefore2Params.UIItemEditText;

            // Click 'Calculate &Quote' button
            Mouse.Click(uICalculateQuoteButton, new Point(59, 11));
        }
        
        /// <summary>
        /// MotoMTABeforeAccept - Use 'MotoMTABeforeAcceptParams' to pass parameters into this method.
        /// </summary>
        public void MotoMTABeforeAccept()
        {
            #region Variable Declarations
            WinClient uIQuoteResultsClient = this.UIQuoteResultsWindow.UIItemWindow2.UIQuoteResultsClient;
            WinButton uIAcceptButton = this.UIQuoteResultsWindow.UIAcceptWindow.UIAcceptButton;
            WinButton uIYesButton = this.UIInsurEtamWindow1.UIYesWindow.UIYesButton;
            WinButton uIOKButton = this.UIConfirmDocumentsWindow.UIOKWindow.UIOKButton;
            WinButton uIOKButton1 = this.UIInsurEtamWindow1.UIOKWindow.UIOKButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // The recording for the application under test '\\Pc-pez\J-Drive\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'Quote Results' client
            Mouse.Click(uIQuoteResultsClient, new Point(401, 181));

            // Type '{Home}' in 'Quote Results' client
            Keyboard.SendKeys(uIQuoteResultsClient, this.MotoMTABeforeAcceptParams.UIQuoteResultsClientSendKeys, ModifierKeys.None);

            // Click 'A&ccept' button
            Mouse.Click(uIAcceptButton, new Point(56, 12));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(51, 11));

            // Click 'Ok' button
            Mouse.Click(uIOKButton, new Point(31, 21));

            // Click 'OK' button
            Mouse.Click(uIOKButton1, new Point(38, 19));
        }
        
        /// <summary>
        /// MotoMTABeforeFinish - Use 'MotoMTABeforeFinishParams' to pass parameters into this method.
        /// </summary>
        public void MotoMTABeforeFinish()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIMTASuccessfulWindow.UIOKWindow.UIOKButton;
            WinCheckBox uIDeferPrintingCheckBox = this.UIPointOfSaleWindow.UIDeferPrintingWindow.UIDeferPrintingCheckBox;
            WinButton uIOKButton1 = this.UIPointOfSaleWindow.UIOKWindow.UIOKButton;
            WinCheckBox uIAddActivityCheckBox = this.UIImporttoTAMWindow.UIImportOptionsClient.UIAddActivityCheckBox;
            WinButton uIOKButton2 = this.UIImporttoTAMWindow.UIPanel1Client.UIOKButton;
            WinButton uIOKButton3 = this.UITamxml7Window.UITamxml7Client.UIOKButton;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(28, 8));

            // Select '&Defer Printing?' check box
            uIDeferPrintingCheckBox.Checked = this.MotoMTABeforeFinishParams.UIDeferPrintingCheckBoxChecked;

            // Click 'Ok' button
            Mouse.Click(uIOKButton1, new Point(69, 14));

            // The recording for the application under test '\\Pc-pez\J-Drive\TamXML\TamXML7.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Clear 'Add Activity' check box
            uIAddActivityCheckBox.Checked = this.MotoMTABeforeFinishParams.UIAddActivityCheckBoxChecked;

            // Click 'Ok' button
            Mouse.Click(uIOKButton2, new Point(46, 21));

            // Click 'OK' button
            Mouse.Click(uIOKButton3, new Point(39, 8));

            // Click 'OK' button
            Mouse.Click(uIOKButton3, new Point(24, 10));
        }
        
        /// <summary>
        /// MotoMTACheckCar - Use 'MotoMTACheckCarExpectedValues' to pass parameters into this method.
        /// </summary>
        public void MotoMTACheckCar()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow1.UIItemEdit;
            WinEdit uIItemEdit1 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' equals 'RF53OXL'
            Assert.AreEqual(this.MotoMTACheckCarExpectedValues.UIItemEditText, uIItemEdit.Text);

            // Verify that 'Unknown Name' text box's property 'Text' equals '2000'
            Assert.AreEqual(this.MotoMTACheckCarExpectedValues.UIItemEditText1, uIItemEdit1.Text);
        }
        
        /// <summary>
        /// MotoMTACheckNewValue - Use 'MotoMTACheckNewValueExpectedValues' to pass parameters into this method.
        /// </summary>
        public void MotoMTACheckNewValue()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' equals '2000'
            Assert.AreEqual(this.MotoMTACheckNewValueExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// MotoMTACloseMessage
        /// </summary>
        public void MotoMTACloseMessage()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIInsurEtamWindow1.UIOKWindow.UIOKButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(56, 8));
        }
        
        /// <summary>
        /// MotoMTAConfirmDate
        /// </summary>
        public void MotoMTAConfirmDate()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIMTAEffectiveDatesWindow.UIOKWindow.UIOKButton;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(21, 17));
        }
        
        /// <summary>
        /// MotoMTAConfirmPolicy - Use 'MotoMTAConfirmPolicyParams' to pass parameters into this method.
        /// </summary>
        public void MotoMTAConfirmPolicy()
        {
            #region Variable Declarations
            WinClient uIQuoteResultsClient = this.UIQuoteResultsWindow.UIItemWindow2.UIQuoteResultsClient;
            WinClient uIQuoteResultsClient1 = this.UIQuoteResultsWindow.UIItemWindow3.UIQuoteResultsClient;
            WinButton uIAcceptButton = this.UIQuoteResultsWindow.UIAcceptWindow.UIAcceptButton;
            WinButton uIYesButton = this.UIInsurEtamWindow1.UIYesWindow.UIYesButton;
            WinButton uIOKButton = this.UIConfirmDocumentsWindow.UIOKWindow.UIOKButton;
            WinButton uIOKButton1 = this.UIInsurEtamWindow1.UIOKWindow.UIOKButton;
            WinCheckBox uIDeferPrintingCheckBox = this.UIPointOfSaleWindow.UIDeferPrintingWindow.UIDeferPrintingCheckBox;
            WinButton uIOKButton2 = this.UIPointOfSaleWindow.UIOKWindow.UIOKButton;
            WinCheckBox uIAddActivityCheckBox = this.UIImporttoTAMWindow.UIImportOptionsClient.UIAddActivityCheckBox;
            WinButton uIOKButton3 = this.UIImporttoTAMWindow.UIPanel1Client.UIOKButton;
            WinButton uIOKButton4 = this.UITamxml7Window.UITamxml7Client.UIOKButton;
            #endregion

            // Click 'Quote Results' client
            Mouse.Click(uIQuoteResultsClient, new Point(362, 176));

            // Type '{Home}' in 'Quote Results' client
            Keyboard.SendKeys(uIQuoteResultsClient1, this.MotoMTAConfirmPolicyParams.UIQuoteResultsClientSendKeys, ModifierKeys.None);

            // Click 'A&ccept' button
            Mouse.Click(uIAcceptButton, new Point(54, 8));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(40, 12));

            // Click 'Ok' button
            Mouse.Click(uIOKButton, new Point(50, 19));

            // Click 'OK' button
            Mouse.Click(uIOKButton1, new Point(32, 8));

            // Select '&Defer Printing?' check box
            uIDeferPrintingCheckBox.Checked = this.MotoMTAConfirmPolicyParams.UIDeferPrintingCheckBoxChecked;

            // Click 'Ok' button
            Mouse.Click(uIOKButton2, new Point(42, 12));

            // Clear 'Add Activity' check box
            uIAddActivityCheckBox.Checked = this.MotoMTAConfirmPolicyParams.UIAddActivityCheckBoxChecked;

            // Click 'Ok' button
            Mouse.Click(uIOKButton3, new Point(24, 14));

            // Click 'OK' button
            Mouse.Click(uIOKButton4, new Point(37, 10));
        }
        
        /// <summary>
        /// MotoMTAConfirmPolicy_1
        /// </summary>
        public void MotoMTAConfirmPolicy_1()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UITamxml7Window.UITamxml7Client.UIOKButton;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(37, 25));
        }
        
        /// <summary>
        /// MotoMTAMessageAfterDate - Use 'MotoMTAMessageAfterDateExpectedValues' to pass parameters into this method.
        /// </summary>
        public void MotoMTAMessageAfterDate()
        {
            #region Variable Declarations
            WinText uIAdjustmentdatetimecaText = this.UIInsurEtamWindow1.UIAcceptthisquoteNotOvWindow.UIAdjustmentdatetimecaText;
            #endregion

            // Verify that 'Adjustment date/time cannot be after the policy ef...' label's property 'DisplayText' contains 'Adjustment date/time cannot be after the policy effective end date/time'
            StringAssert.Contains(uIAdjustmentdatetimecaText.DisplayText, this.MotoMTAMessageAfterDateExpectedValues.UIAdjustmentdatetimecaTextDisplayText);
        }
        
        /// <summary>
        /// MotoMTAMessageCancelled - Use 'MotoMTAMessageCancelledExpectedValues' to pass parameters into this method.
        /// </summary>
        public void MotoMTAMessageCancelled()
        {
            #region Variable Declarations
            WinText uIMTAsuccessfullyproceText = this.UIMTASuccessfulWindow.UIMTAsuccessfullyproceWindow.UIMTAsuccessfullyproceText;
            #endregion

            // Verify that 'MTA successfully processed on a previously renewed...' label's property 'DisplayText' contains 'RENEWAL EDI HAS BEEN CANCELLED'
            StringAssert.Contains(uIMTAsuccessfullyproceText.DisplayText, this.MotoMTAMessageCancelledExpectedValues.UIMTAsuccessfullyproceTextDisplayText);
        }
        
        /// <summary>
        /// MotoMTANoSave - Use 'MotoMTANoSaveParams' to pass parameters into this method.
        /// </summary>
        public void MotoMTANoSave()
        {
            #region Variable Declarations
            WinComboBox uIItemComboBox = this.UIMidTermAdjustmentsWindow.UIItemWindow.UIItemComboBox;
            WinButton uIOKButton = this.UIMidTermAdjustmentsWindow.UIOKWindow.UIOKButton;
            WinButton uIExitButton = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIExitWindow.UIExitButton;
            WinButton uIYesButton = this.UIInsurEtamWindow1.UIYesWindow.UIYesButton;
            WinButton uIOKButton1 = this.UITamxml7Window.UITamxml7Client.UIOKButton;
            #endregion

            // Select 'Change of Driver' in 'Unknown Name' combo box
            uIItemComboBox.SelectedItem = this.MotoMTANoSaveParams.UIItemComboBoxSelectedItem;

            // Click '&OK' button
            Mouse.Click(uIOKButton, new Point(42, 16));

            // Click '&Exit' button
            Mouse.Click(uIExitButton, new Point(70, 10));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(51, 13));

            // Click 'OK' button
            Mouse.Click(uIOKButton1, new Point(39, 15));
        }
        
        /// <summary>
        /// MotoMTAOpenQuote
        /// </summary>
        public void MotoMTAOpenQuote()
        {
            #region Variable Declarations
            WinButton uIOptionsButton = this.UIPolicyautotestWindow.UIPolicyListWindow.UIOptionsWindow.UIOptionsButton;
            WinMenuItem uIQuoteSelectListMenuItem = this.UIPolicyautotestWindow.UIApplicationMenuBar.UIOptionsMenuItem.UILinksMenuItem.UIItem3rdPartyIntegratMenuItem.UIQuoteSelectListMenuItem;
            WinButton uIOKButton = this.UICurrentOrFutureWindow.UICurrentOrFutureClient.UIOKButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'Options' button
            Mouse.Click(uIOptionsButton, new Point(33, 12));

            // Click 'Options' -> 'Links' -> '3rd Party Integration' -> 'Quote Select List' menu item
            Mouse.Click(uIQuoteSelectListMenuItem, new Point(116, 15));

            // The recording for the application under test '\\Pc-pez\J-Drive\TamXML\TamXML7.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click '&Ok' button
            Mouse.Click(uIOKButton, new Point(29, 10));

            // The recording for the application under test '\\Pc-pez\J-Drive\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.
        }
        
        /// <summary>
        /// MotoPolicyPerson - Use 'MotoPolicyPersonParams' to pass parameters into this method.
        /// </summary>
        public void MotoPolicyPerson()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIProposerTypeWindow.UIOKWindow.UIOKButton;
            WinEdit uIItemEdit = this.UIProposerDetailsWindow.UIItemWindow.UIItemEdit;
            WinEdit uIItemEdit1 = this.UIProposerDetailsWindow.UIItemWindow1.UIItemEdit;
            WinEdit uIItemEdit2 = this.UIProposerDetailsWindow.UIItemWindow2.UIItemEdit;
            WinEdit uIItemEdit3 = this.UIProposerDetailsWindow.UIItemWindow3.UIItemEdit;
            WinButton uILookupButton = this.UIProposerDetailsWindow.UILookupWindow.UILookupButton;
            WinButton uIOKButton1 = this.UISearchResultForB338TWindow.UIOKWindow.UIOKButton;
            #endregion

            // Click '&Ok' button
            Mouse.Click(uIOKButton, new Point(52, 17));

            // Type 'Test' in 'Unknown Name' text box
            uIItemEdit.Text = this.MotoPolicyPersonParams.UIItemEditText;

            // Type '{Tab}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.MotoPolicyPersonParams.UIItemEditSendKeys, ModifierKeys.None);

            // Type 'test' in 'Unknown Name' text box
            uIItemEdit1.Text = this.MotoPolicyPersonParams.UIItemEditText1;

            // Type '160485' in 'Unknown Name' text box
            uIItemEdit2.Text = this.MotoPolicyPersonParams.UIItemEditText2;

            // Type 'B338TH' in 'Unknown Name' text box
            uIItemEdit3.Text = this.MotoPolicyPersonParams.UIItemEditText3;

            // Click '&Lookup...' button
            Mouse.Click(uILookupButton, new Point(34, 13));

            // Click '&Ok' button
            Mouse.Click(uIOKButton1, new Point(38, 12));
        }
        
        /// <summary>
        /// MotoPostcodeLookup - Use 'MotoPostcodeLookupParams' to pass parameters into this method.
        /// </summary>
        public void MotoPostcodeLookup()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIProposerTypeWindow.UIOKWindow.UIOKButton;
            WinEdit uIItemEdit = this.UIProposerDetailsWindow.UIItemWindow.UIItemEdit;
            WinEdit uIItemEdit1 = this.UIProposerDetailsWindow.UIItemWindow1.UIItemEdit;
            WinEdit uIItemEdit2 = this.UIProposerDetailsWindow.UIItemWindow2.UIItemEdit;
            WinEdit uIItemEdit3 = this.UIProposerDetailsWindow.UIItemWindow3.UIItemEdit;
            WinButton uILookupButton = this.UIProposerDetailsWindow.UILookupWindow.UILookupButton;
            WinButton uIOKButton1 = this.UISearchResultForBN16BWindow.UIOKWindow.UIOKButton;
            #endregion

            // Click '&Ok' button
            Mouse.Click(uIOKButton, new Point(41, 13));

            // Type 'test' in 'Unknown Name' text box
            uIItemEdit.Text = this.MotoPostcodeLookupParams.UIItemEditText;

            // Type 'test' in 'Unknown Name' text box
            uIItemEdit1.Text = this.MotoPostcodeLookupParams.UIItemEditText1;

            // Type '160486' in 'Unknown Name' text box
            uIItemEdit2.Text = this.MotoPostcodeLookupParams.UIItemEditText2;

            // Type 'BN16BN' in 'Unknown Name' text box
            uIItemEdit3.Text = this.MotoPostcodeLookupParams.UIItemEditText3;

            // Click '&Lookup...' button
            Mouse.Click(uILookupButton, new Point(9, 12));

            // Click '&Ok' button
            Mouse.Click(uIOKButton1, new Point(37, 9));
        }
        
        /// <summary>
        /// MotoRebroke
        /// </summary>
        public void MotoRebroke()
        {
            #region Variable Declarations
            WinButton uIRebrokeButton = this.UIAUTO2081001Window.UIRebrokeWindow.UIRebrokeButton;
            WinButton uICancelButton = this.UIQuoteSelectListWindow.UICancelWindow.UICancelButton;
            WinButton uINOButton = this.UICreditCheckWindow.UINOWindow.UINOButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'Re&broke...' button
            Mouse.Click(uIRebrokeButton, new Point(86, 12));

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Click '&Cancel' button
            Mouse.Click(uICancelButton, new Point(48, 17));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(48, 11));
        }
        
        /// <summary>
        /// MotoRebrokeCurrent
        /// </summary>
        public void MotoRebrokeCurrent()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIRebrokeResultsScreenWindow.UIOKWindow.UIOKButton;
            WinButton uIYesButton = this.UIInsurEtamWindow1.UIYesWindow.UIYesButton;
            #endregion

            // Click '&OK' button
            Mouse.Click(uIOKButton, new Point(50, 10));

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(43, 11));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;
        }
        
        /// <summary>
        /// MotoRebrokeSelectScheme - Use 'MotoRebrokeSelectSchemeParams' to pass parameters into this method.
        /// </summary>
        public void MotoRebrokeSelectScheme()
        {
            #region Variable Declarations
            WinClient uIItemClient = this.UIRebrokeResultsScreenWindow.UIItemWindow1.UIItemClient;
            WinClient uIItemClient1 = this.UIRebrokeResultsScreenWindow.UIItemWindow2.UIItemClient;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'Unknown Name' client
            Mouse.Click(uIItemClient, new Point(271, 102));

            // Type '{Home}' in 'Unknown Name' client
            Keyboard.SendKeys(uIItemClient1, this.MotoRebrokeSelectSchemeParams.UIItemClientSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// MotoRegressApp - Use 'MotoRegressAppParams' to pass parameters into this method.
        /// </summary>
        public void MotoRegressApp()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIRegressIETamPolicyWindow.UIItemWindow.UIItemEdit;
            WinEdit uIItemEdit1 = this.UIRegressIETamPolicyWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Launch 'C:\TestProject7\Regress_IETam_Policy.exe'
            ApplicationUnderTest regress_IETam_PolicyApplication = ApplicationUnderTest.Launch(this.MotoRegressAppParams.ExePath, this.MotoRegressAppParams.AlternateExePath);

            // Type 'AUTO182' in 'Unknown Name' text box
            uIItemEdit.Text = this.MotoRegressAppParams.UIItemEditText;

            // Type '-1001' in 'Unknown Name' text box
            uIItemEdit1.Text = this.MotoRegressAppParams.UIItemEditText1;
        }
        
        /// <summary>
        /// MotoRegressAppFinish
        /// </summary>
        public void MotoRegressAppFinish()
        {
            #region Variable Declarations
            WinButton uIRegressButton = this.UIRegressIETamPolicyWindow.UIRegressWindow.UIRegressButton;
            #endregion

            // Click 'Regress' button
            Mouse.Click(uIRegressButton, new Point(47, 22));
        }
        
        /// <summary>
        /// MotoRenewalCheckRecord - Use 'MotoRenewalCheckRecordExpectedValues' to pass parameters into this method.
        /// </summary>
        public void MotoRenewalCheckRecord()
        {
            #region Variable Declarations
            WinWindow uIAUTO1871001Window = this.UIAUTO1871001Window;
            #endregion

            // Verify that 'AUTO187-1001' window's property 'Name' contains 'AUTO187'
            StringAssert.Contains(uIAUTO1871001Window.Name, this.MotoRenewalCheckRecordExpectedValues.UIAUTO1871001WindowName);
        }
        
        /// <summary>
        /// MotoSearchCar - Use 'MotoSearchCarParams' to pass parameters into this method.
        /// </summary>
        public void MotoSearchCar()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIProposerDetailsWindow.UIOKWindow.UIOKButton;
            WinComboBox uIItemComboBox = this.UIDriverDetailsWindow.UIItemWindow.UIItemComboBox;
            WinComboBox uIItemComboBox1 = this.UIDriverDetailsWindow.UIItemWindow1.UIItemComboBox;
            WinEdit uIItemEdit = this.UIDriverDetailsWindow.UIItemWindow2.UIItemEdit;
            WinButton uIOKButton1 = this.UIDriverDetailsWindow.UIOKWindow.UIOKButton;
            WinComboBox uIItemComboBox2 = this.UIVehicleLookupWindow.UIItemWindow1.UIItemComboBox;
            WinComboBox uIItemComboBox3 = this.UIVehicleLookupWindow.UIItemWindow11.UIItemComboBox;
            WinButton uIFilterButton = this.UIVehicleLookupWindow.UIFilterWindow1.UIFilterButton;
            WinButton uIOKButton2 = this.UIVehicleLookupWindow.UIOKWindow.UIOKButton;
            WinEdit uIItemEdit1 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow1.UIItemEdit;
            WinEdit uIItemEdit2 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Click '&OK' button
            Mouse.Click(uIOKButton, new Point(40, 9));

            // Select 'Account Executive' in 'Unknown Name' combo box
            uIItemComboBox.SelectedItem = this.MotoSearchCarParams.UIItemComboBoxSelectedItem;

            // Select 'Aerial Manufacturer' in 'Unknown Name' combo box
            uIItemComboBox1.SelectedItem = this.MotoSearchCarParams.UIItemComboBoxSelectedItem1;

            // Type '151208' in 'Unknown Name' text box
            uIItemEdit.Text = this.MotoSearchCarParams.UIItemEditText;

            // Click '&OK' button
            Mouse.Click(uIOKButton1, new Point(45, 18));

            // Select 'FORD' in 'Unknown Name' combo box
            uIItemComboBox2.EditableItem = this.MotoSearchCarParams.UIItemComboBoxEditableItem;

            // Select 'KA' in 'Unknown Name' combo box
            uIItemComboBox3.EditableItem = this.MotoSearchCarParams.UIItemComboBoxEditableItem1;

            // Click '&Filter' button
            Mouse.Click(uIFilterButton, new Point(29, 9));

            // Click '&OK' button
            Mouse.Click(uIOKButton2, new Point(24, 10));

            // Type '123434' in 'Unknown Name' text box
            uIItemEdit1.Text = this.MotoSearchCarParams.UIItemEditText1;

            // Type '1000' in 'Unknown Name' text box
            uIItemEdit2.Text = this.MotoSearchCarParams.UIItemEditText2;
        }
        
        /// <summary>
        /// MotoSelectHighwayPolicy - Use 'MotoSelectHighwayPolicyParams' to pass parameters into this method.
        /// </summary>
        public void MotoSelectHighwayPolicy()
        {
            #region Variable Declarations
            WinClient uIQuoteResultsClient = this.UIQuoteResultsWindow.UIItemWindow2.UIQuoteResultsClient;
            #endregion

            // The recording for the application under test '\\ICLVDEVAP01\J-Drive\APPS\IEOffice\DATA\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'Quote Results' client
            Mouse.Click(uIQuoteResultsClient, new Point(405, 217));

            // Type '{Home}' in 'Quote Results' client
            Keyboard.SendKeys(uIQuoteResultsClient, this.MotoSelectHighwayPolicyParams.UIQuoteResultsClientSendKeys, ModifierKeys.None);

            // The recording for the application under test '\\ICLVDEVAP01\J-Drive\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.
        }
        
        /// <summary>
        /// MTACancel
        /// </summary>
        public void MTACancel()
        {
            #region Variable Declarations
            WinButton uICancelButton = this.UIMTAEffectiveDatesWindow.UICancelWindow.UICancelButton;
            WinButton uIExitButton = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIExitWindow.UIExitButton;
            WinButton uIYesButton = this.UIInsurEtamWindow1.UIYesWindow.UIYesButton;
            WinButton uIOKButton = this.UITamxml7Window.UITamxml7Client.UIOKButton;
            #endregion

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(26, 13));

            // Click '&Exit' button
            Mouse.Click(uIExitButton, new Point(65, 13));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(46, 9));

            // The recording for the application under test '\\Pc-pez\J-Drive\TamXML\TamXML7.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(50, 11));
        }
        
        /// <summary>
        /// MTACloseMessageAfter
        /// </summary>
        public void MTACloseMessageAfter()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIInsurEtamWindow1.UIOKWindow.UIOKButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // The recording for the application under test '\\Pc-pez\J-Drive\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(59, 13));
        }
        
        /// <summary>
        /// MTACloseMessageBefore
        /// </summary>
        public void MTACloseMessageBefore()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIInsurEtamWindow1.UIOKWindow.UIOKButton;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(52, 12));
        }
        
        /// <summary>
        /// MTADate - Use 'MTADateParams' to pass parameters into this method.
        /// </summary>
        public void MTADate()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIMTAEffectiveDatesWindow.UIItemWindow.UIItemEdit;
            WinButton uIOKButton = this.UIMTAEffectiveDatesWindow.UIOKWindow.UIOKButton;
            #endregion

            // Type '20/11/12' in 'Unknown Name' text box
            uIItemEdit.Text = this.MTADateParams.UIItemEditText;

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(39, 10));
        }
        
        /// <summary>
        /// MTAEffectiveDatesCancel
        /// </summary>
        public void MTAEffectiveDatesCancel()
        {
            #region Variable Declarations
            WinButton uICancelButton = this.UIMTAEffectiveDatesWindow.UICancelWindow.UICancelButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // The recording for the application under test '\\Pc-pez\J-Drive\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(28, 12));
        }
        
        /// <summary>
        /// MTAMessageBeforeCurrent - Use 'MTAMessageBeforeCurrentExpectedValues' to pass parameters into this method.
        /// </summary>
        public void MTAMessageBeforeCurrent()
        {
            #region Variable Declarations
            WinText uIDateBeforeCurrentMTAText = this.UIInsurEtamWindow1.UIAcceptthisquoteNotOvWindow.UIDateBeforeCurrentMTAText;
            #endregion

            // Verify that 'Date Before Current MTA Effective Date - Please en...' label's property 'DisplayText' equals 'Date Before Current MTA Effective Date - Please enter Adjustment Date.'
            Assert.AreEqual(this.MTAMessageBeforeCurrentExpectedValues.UIDateBeforeCurrentMTATextDisplayText, uIDateBeforeCurrentMTAText.DisplayText);
        }
        
        /// <summary>
        /// OpenPolicyAttachments
        /// </summary>
        public void OpenPolicyAttachments()
        {
            #region Variable Declarations
            WinButton uICancelButton = this.UIPolicyautotestWindow.UIBillingScreenMOTOWindow.UICancelWindow.UICancelButton;
            WinClient uIItemClient = this.UIPolicyautotestWindow.UIPolicyListWindow.UIItemWindow.UIItemClient;
            #endregion

            // The recording for the application under test '\\Pc-pez\APPLIED\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(35, 12));

            // Double-Click 'Unknown Name' client
            Mouse.DoubleClick(uIItemClient, new Point(16, 10));
        }
        
        /// <summary>
        /// OpenSiteForRenewal - Use 'OpenSiteForRenewalParams' to pass parameters into this method.
        /// </summary>
        public void OpenSiteForRenewal()
        {
            #region Variable Declarations
            WinEdit uIUsernameEdit = this.UIWindowsSecurityWindow.UIItemListItem.UIUsernameEdit;
            WinWindow uIItemWindow = this.UIWindowsSecurityWindow.UIItemListItem.UIItemWindow;
            WinEdit uIPasswordEdit = this.UIWindowsSecurityWindow.UIItemListItem.UIPasswordEdit;
            WinButton uIOKButton = this.UIWindowsSecurityWindow.UIWindowsSecurityPane.UIOKButton;
            HtmlHyperlink uIRenewalsMaintenanceHyperlink = this.UIInsurEcomSystemMaintWindow.UILeftbarFrame.UIInsurEcomLeftbarDocument.UIRenewalsMaintenanceHyperlink;
            #endregion

            // Go to web page 'https://www.insur-econnect.com/sysmaint/default.asp?mode=1' using new browser instance
            this.UIBlankPageMicrosoftInWindow.LaunchUrl(new System.Uri(this.OpenSiteForRenewalParams.UIBlankPageMicrosoftInWindowUrl));

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Click 'User name' text box
            Mouse.Click(uIUsernameEdit, new Point(92, 7));

            // Type 'Bus sys' in 'Unknown Name' window
            Keyboard.SendKeys(uIItemWindow, this.OpenSiteForRenewalParams.UIItemWindowSendKeys, ModifierKeys.None);

            // Click 'Password' text box
            Mouse.Click(uIPasswordEdit, new Point(90, 0));

            // Type '********' in 'Password' text box
            Keyboard.SendKeys(uIPasswordEdit, this.OpenSiteForRenewalParams.UIPasswordEditSendKeys, true);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(43, 19));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;

            // Click 'Renewals Maintenance' link
            Mouse.Click(uIRenewalsMaintenanceHyperlink, new Point(40, 13));
        }
        
        /// <summary>
        /// OpenTransactions
        /// </summary>
        public void OpenTransactions()
        {
            #region Variable Declarations
            WinButton uICancelButton = this.UIPolicyautotestWindow.UIBillingScreenMOTOWindow.UICancelWindow.UICancelButton;
            WinButton uIItemButton = this.UIPolicyautotestWindow.UIItemWindow1.UIItemButton;
            WinButton uIDetailButton = this.UIPolicyautotestWindow.UIBillingScreenHOMEWindow1.UIDetailWindow.UIDetailButton;
            WinButton uICancelButton1 = this.UIUpdateGeneralTransacWindow.UICancelWindow.UICancelButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(30, 10));

            // Click 'Unknown Name' button
            Mouse.Click(uIItemButton, new Point(8, 13));

            // Click 'Detail' button
            Mouse.Click(uIDetailButton, new Point(42, 17));

            // Click 'Cance&l' button
            Mouse.Click(uICancelButton1, new Point(37, 11));
        }
        
        /// <summary>
        /// Options
        /// </summary>
        public void Options()
        {
            #region Variable Declarations
            WinButton uIOptionsButton = this.UICustomertxt1tdsfsWindow.UIPolicyListWindow.UIOptionsWindow.UIOptionsButton;
            #endregion

            // Click 'Options' button
            Mouse.Click(uIOptionsButton, new Point(29, 11));
        }
        
        /// <summary>
        /// PostcodeLookup - Use 'PostcodeLookupExpectedValues' to pass parameters into this method.
        /// </summary>
        public void PostcodeLookup()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIProposerDetailsWindow.UIItemWindow4.UIItemEdit;
            WinEdit uIItemEdit1 = this.UIProposerDetailsWindow.UIItemWindow5.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' equals '533 Yardley Green Road'
            Assert.AreEqual(this.PostcodeLookupExpectedValues.UIItemEditText, uIItemEdit.Text);

            // Verify that 'Unknown Name' text box's property 'Text' equals 'BIRMINGHAM'
            Assert.AreEqual(this.PostcodeLookupExpectedValues.UIItemEditText1, uIItemEdit1.Text);
        }
        
        /// <summary>
        /// PrintQuote
        /// </summary>
        public void PrintQuote()
        {
            #region Variable Declarations
            WinButton uIPrintQuoteButton = this.UIQuoteResultsWindow.UIPrintQuoteWindow.UIPrintQuoteButton;
            #endregion

            // Wait for 2 seconds for user delay between actions; Click '&Print Quote...' button
            Playback.Wait(2000);
            Mouse.Click(uIPrintQuoteButton, new Point(49, 10));
        }
        
        /// <summary>
        /// PublicCreditCheckOk
        /// </summary>
        public void PublicCreditCheckOk()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIErrorWindow.UIOKWindow.UIOKButton;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(49, 10));
        }
        
        /// <summary>
        /// QuoteResults - Use 'QuoteResultsParams' to pass parameters into this method.
        /// </summary>
        public void QuoteResults()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIProposerDetailsWindow.UIOKWindow.UIOKButton;
            WinComboBox uIItemComboBox = this.UIDriverDetailsWindow.UIItemWindow.UIItemComboBox;
            WinComboBox uIItemComboBox1 = this.UIDriverDetailsWindow.UIItemWindow1.UIItemComboBox;
            WinEdit uIItemEdit = this.UIDriverDetailsWindow.UIItemWindow2.UIItemEdit;
            WinButton uIOKButton1 = this.UIDriverDetailsWindow.UIOKWindow.UIOKButton;
            WinEdit uIItemEdit1 = this.UIVehicleLookupWindow.UIItemWindow.UIItemEdit;
            WinButton uIFilterButton = this.UIVehicleLookupWindow.UIFilterWindow.UIFilterButton;
            WinButton uIOKButton2 = this.UIVehicleLookupWindow.UIOKWindow.UIOKButton;
            WinEdit uIItemEdit2 = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow.UIItemEdit;
            WinButton uICalculateQuoteButton = this.UIInsurEtamWindow.UIMotorQuotesWindow.UICalculateQuoteWindow.UICalculateQuoteButton;
            #endregion

            // Click '&OK' button
            Mouse.Click(uIOKButton, new Point(44, 12));

            // Select 'Account Executive' in 'Unknown Name' combo box
            uIItemComboBox.SelectedItem = this.QuoteResultsParams.UIItemComboBoxSelectedItem;

            // Select 'Acupuncture' in 'Unknown Name' combo box
            uIItemComboBox1.SelectedItem = this.QuoteResultsParams.UIItemComboBoxSelectedItem1;

            // Type '151101' in 'Unknown Name' text box
            uIItemEdit.Text = this.QuoteResultsParams.UIItemEditText;

            // Click '&OK' button
            Mouse.Click(uIOKButton1, new Point(38, 4));

            // Type 'RF53OXL' in 'Unknown Name' text box
            uIItemEdit1.Text = this.QuoteResultsParams.UIItemEditText1;

            // Click '&Filter' button
            Mouse.Click(uIFilterButton, new Point(59, 14));

            // Click '&OK' button
            Mouse.Click(uIOKButton2, new Point(33, 5));

            // Type '1000' in 'Unknown Name' text box
            uIItemEdit2.Text = this.QuoteResultsParams.UIItemEditText2;

            // Click 'Calculate &Quote' button
            Mouse.Click(uICalculateQuoteButton, new Point(25, 13));
        }
        
        /// <summary>
        /// QuoteResults_1
        /// </summary>
        public void QuoteResults_1()
        {
            #region Variable Declarations
            WinButton uINOButton = this.UICreditCheckWindow.UINOWindow.UINOButton;
            #endregion

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(28, 10));
        }
        
        /// <summary>
        /// RebrokeAlternativeFinish - Use 'RebrokeAlternativeFinishParams' to pass parameters into this method.
        /// </summary>
        public void RebrokeAlternativeFinish()
        {
            #region Variable Declarations
            WinButton uIRenewPolicyButton = this.UIAUTO2211001Window.UIRenewPolicyWindow.UIRenewPolicyButton;
            WinRadioButton uIAlternativeRadioButton = this.UIRenewalAcceptWindow.UIAlternativeWindow.UIAlternativeRadioButton;
            WinButton uIOKButton = this.UIRenewalAcceptWindow.UIOKWindow.UIOKButton;
            WinButton uIOKButton1 = this.UIInsurerNoticeRevaluaWindow.UIOKWindow.UIOKButton;
            WinClient uIItemClient = this.UIRenewalsNewBusinessAWindow.UIItemWindow.UIItemClient;
            WinButton uIAcceptButton = this.UIRenewalsNewBusinessAWindow.UIAcceptWindow.UIAcceptButton;
            WinButton uIYesButton = this.UIInsurEtamWindow1.UIYesWindow.UIYesButton;
            WinButton uICancelButton = this.UISavethefileasWindow.UICancelWindow.UICancelButton;
            WinButton uIOKButton2 = this.UIConfirmDocumentsWindow.UIOKWindow.UIOKButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // The recording for the application under test '\\Pc-pez\J-Drive\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click '&Renew Policy' button
            Mouse.Click(uIRenewPolicyButton, new Point(79, 13));

            // Select 'Alternative' radio button
            uIAlternativeRadioButton.Selected = this.RebrokeAlternativeFinishParams.UIAlternativeRadioButtonSelected;

            // Click '&OK' button
            Mouse.Click(uIOKButton, new Point(30, 12));

            // Click 'OK' button
            Mouse.Click(uIOKButton1, new Point(27, 13));

            // Click 'Unknown Name' client
            Mouse.Click(uIItemClient, new Point(398, 91));

            // Type '{Home}' in 'Unknown Name' client
            Keyboard.SendKeys(uIItemClient, this.RebrokeAlternativeFinishParams.UIItemClientSendKeys, ModifierKeys.None);

            // Click '&Accept' button
            Mouse.Click(uIAcceptButton, new Point(51, 9));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(36, 9));

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(71, 16));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;

            // Click 'Ok' button
            Mouse.Click(uIOKButton2, new Point(72, 10));

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(74, 15));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;
        }
        
        /// <summary>
        /// RebrokeAlternativeFinish_1 - Use 'RebrokeAlternativeFinish_1Params' to pass parameters into this method.
        /// </summary>
        public void RebrokeAlternativeFinish_1()
        {
            #region Variable Declarations
            WinCheckBox uIDeferPrintingCheckBox = this.UIPrintDocumentsWindow.UIDeferPrintingWindow.UIDeferPrintingCheckBox;
            WinButton uIOKButton = this.UIPrintDocumentsWindow.UIOKWindow.UIOKButton;
            WinButton uIOKButton1 = this.UIInsurEtamWindow1.UIOKWindow.UIOKButton;
            WinCheckBox uIAddActivityCheckBox = this.UIImporttoTAMWindow.UIImportOptionsClient.UIAddActivityCheckBox;
            WinButton uIOKButton2 = this.UIImporttoTAMWindow.UIPanel1Client.UIOKButton;
            WinButton uIOKButton3 = this.UITransactiontoinsertWindow.UIItemWindow.UITransactiontoinsertClient.UIOKButton;
            WinList uIItemList = this.UIPleaseselectWHOtofolWindow.UIItemWindow1.UIItemList;
            WinButton uIOKButton4 = this.UIPleaseselectWHOtofolWindow.UIItemWindow.UIPleaseselectWHOtofolClient.UIOKButton;
            WinButton uIOKButton5 = this.UITamxml7Window.UITamxml7Client.UIOKButton;
            #endregion

            // Select '&Defer Printing?' check box
            uIDeferPrintingCheckBox.Checked = this.RebrokeAlternativeFinish_1Params.UIDeferPrintingCheckBoxChecked;

            // Click 'Ok' button
            Mouse.Click(uIOKButton, new Point(75, 12));

            // Click 'OK' button
            Mouse.Click(uIOKButton1, new Point(50, 6));

            // Click 'OK' button
            Mouse.Click(uIOKButton1, new Point(58, 13));

            // The recording for the application under test '\\Pc-pez\J-Drive\TamXML\TamXML7.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Clear 'Add Activity' check box
            uIAddActivityCheckBox.Checked = this.RebrokeAlternativeFinish_1Params.UIAddActivityCheckBoxChecked;

            // Click 'Ok' button
            Mouse.Click(uIOKButton2, new Point(46, 14));

            // Click '&Ok' button
            Mouse.Click(uIOKButton3, new Point(49, 7));

            // Select 'AG Administrator General' in 'Unknown Name' list box
            uIItemList.SelectedItemsAsString = this.RebrokeAlternativeFinish_1Params.UIItemListSelectedItemsAsString;

            // Click '&Ok' button
            Mouse.Click(uIOKButton4, new Point(55, 12));

            // Click 'OK' button
            Mouse.Click(uIOKButton5, new Point(41, 10));
        }
        
        /// <summary>
        /// RebrokeAlternativeRenew - Use 'RebrokeAlternativeRenewParams' to pass parameters into this method.
        /// </summary>
        public void RebrokeAlternativeRenew()
        {
            #region Variable Declarations
            WinButton uIRenewPolicyButton = this.UIAUTO2311001Window.UIRenewPolicyWindow.UIRenewPolicyButton;
            WinRadioButton uIAlternativeRadioButton = this.UIRenewalAcceptWindow.UIAlternativeWindow.UIAlternativeRadioButton;
            WinButton uIOKButton = this.UIRenewalAcceptWindow.UIOKWindow.UIOKButton;
            WinButton uIOKButton1 = this.UIInsurerNoticeRevaluaWindow.UIOKWindow.UIOKButton;
            WinClient uIRenewalsNewBusinessAClient = this.UIRenewalsNewBusinessAWindow1.UIItemWindow.UIRenewalsNewBusinessAClient;
            WinButton uIAcceptButton = this.UIRenewalsNewBusinessAWindow1.UIAcceptWindow.UIAcceptButton;
            WinButton uICancelButton = this.UISavethefileasWindow.UICancelWindow.UICancelButton;
            #endregion

            // Click '&Renew Policy...' button
            Mouse.Click(uIRenewPolicyButton, new Point(48, 13));

            // Select 'Alternative' radio button
            uIAlternativeRadioButton.Selected = this.RebrokeAlternativeRenewParams.UIAlternativeRadioButtonSelected;

            // Click '&OK' button
            Mouse.Click(uIOKButton, new Point(52, 20));

            // Click 'OK' button
            Mouse.Click(uIOKButton1, new Point(36, 11));

            // Click 'Renewals: New Business Accept' client
            Mouse.Click(uIRenewalsNewBusinessAClient, new Point(433, 51));

            // Click '&Accept' button
            Mouse.Click(uIAcceptButton, new Point(45, 17));

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(51, 14));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;
        }
        
        /// <summary>
        /// RebrokeAlternativeRenew_1 - Use 'RebrokeAlternativeRenew_1Params' to pass parameters into this method.
        /// </summary>
        public void RebrokeAlternativeRenew_1()
        {
            #region Variable Declarations
            WinCheckBox uIDeferPrintingCheckBox = this.UIPrintDocumentsWindow.UIDeferPrintingWindow.UIDeferPrintingCheckBox;
            WinButton uIOKButton = this.UIPrintDocumentsWindow.UIOKWindow.UIOKButton;
            WinButton uIOKButton1 = this.UIInsurEtamWindow1.UIOKWindow.UIOKButton;
            WinCheckBox uIAddActivityCheckBox = this.UIImporttoTAMWindow.UIImportOptionsClient.UIAddActivityCheckBox;
            WinButton uIOKButton2 = this.UIImporttoTAMWindow.UIPanel1Client.UIOKButton;
            WinButton uIOKButton3 = this.UITransactiontoinsertWindow.UIItemWindow.UITransactiontoinsertClient.UIOKButton;
            WinList uIItemList = this.UIPleaseselectWHOtofolWindow.UIItemWindow1.UIItemList;
            WinButton uIOKButton4 = this.UIPleaseselectWHOtofolWindow.UIItemWindow.UIPleaseselectWHOtofolClient.UIOKButton;
            WinButton uIOKButton5 = this.UITamxml7Window.UITamxml7Client.UIOKButton;
            #endregion

            // Select '&Defer Printing?' check box
            uIDeferPrintingCheckBox.Checked = this.RebrokeAlternativeRenew_1Params.UIDeferPrintingCheckBoxChecked;

            // Click 'Ok' button
            Mouse.Click(uIOKButton, new Point(63, 21));

            // Click 'OK' button
            Mouse.Click(uIOKButton1, new Point(49, 8));

            // Click 'OK' button
            Mouse.Click(uIOKButton1, new Point(62, 14));

            // Clear 'Add Activity' check box
            uIAddActivityCheckBox.Checked = this.RebrokeAlternativeRenew_1Params.UIAddActivityCheckBoxChecked;

            // Click 'Ok' button
            Mouse.Click(uIOKButton2, new Point(44, 7));

            // Click '&Ok' button
            Mouse.Click(uIOKButton3, new Point(54, 7));

            // Select 'AG Administrator General' in 'Unknown Name' list box
            uIItemList.SelectedItemsAsString = this.RebrokeAlternativeRenew_1Params.UIItemListSelectedItemsAsString;

            // Click '&Ok' button
            Mouse.Click(uIOKButton4, new Point(59, 13));

            // Click 'OK' button
            Mouse.Click(uIOKButton5, new Point(48, 4));
        }
        
        /// <summary>
        /// RebrokeSelectAlternative
        /// </summary>
        public void RebrokeSelectAlternative()
        {
            #region Variable Declarations
            WinButton uISelectAlternativeButton = this.UIRebrokeResultsScreenWindow.UISelectAlternativeWindow.UISelectAlternativeButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // The recording for the application under test '\\Pc-pez\J-Drive\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click '&Select Alternative' button
            Mouse.Click(uISelectAlternativeButton, new Point(56, 13));
        }
        
        /// <summary>
        /// RecordedMethod1
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIPolicyrtyertWindow.UIBillingScreenMOTOTESWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Click 'Unknown Name' text box
            Mouse.Click(uIItemEdit, new Point(45, 4));
        }
        
        /// <summary>
        /// RecordedMethod2 - Use 'RecordedMethod2Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinClient uIQuoteResultsClient = this.UIQuoteResultsWindow.UIItemWindow.UIQuoteResultsClient;
            WinRadioButton uIComprehensiveRadioButton = this.UIQuoteResultsWindow.UIComprehensiveWindow.UIComprehensiveRadioButton;
            WinButton uIPrintQuoteButton = this.UIQuoteResultsWindow.UIPrintQuoteWindow.UIPrintQuoteButton;
            WinButton uIOKButton = this.UIViewQuoteDetailsWindow.UIOKWindow.UIOKButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\APPLIED\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // The recording for the application under test '\\Pc-pez\APPLIED\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'Quote Results' client
            Mouse.Click(uIQuoteResultsClient, new Point(188, 25));

            // Type '{Space}' in 'Comprehensive' radio button
            Keyboard.SendKeys(uIComprehensiveRadioButton, this.RecordedMethod2Params.UIComprehensiveRadioButtonSendKeys, ModifierKeys.None);

            // Click '&Print Quote...' button
            Mouse.Click(uIPrintQuoteButton, new Point(43, 11));

            // Click '&Ok' button
            Mouse.Click(uIOKButton, new Point(97, 10));
        }
        
        /// <summary>
        /// RecordedMethod3 - Use 'RecordedMethod3Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod3()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIPolicyrtyertWindow.UIBillingScreenMOTOTESWindow.UIItemWindow.UIItemEdit;
            #endregion

            // The recording for the application under test '\\Pc-pez\APPLIED\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Type '8711.32' in 'Unknown Name' text box
            uIItemEdit.Text = this.RecordedMethod3Params.UIItemEditText;
        }
        
        /// <summary>
        /// RecordedMethod4
        /// </summary>
        public void RecordedMethod4()
        {
            #region Variable Declarations
            WinButton uICancelButton = this.UIPolicyautotestWindow.UIBillingScreenMOTOWindow.UICancelWindow.UICancelButton;
            #endregion

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(40, 13));
        }
        
        /// <summary>
        /// RecordedMethod4_1
        /// </summary>
        public void RecordedMethod4_1()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UICurrentOrFutureWindow.UICurrentOrFutureClient.UIOKButton;
            #endregion

            // Click '&Ok' button
            Mouse.Click(uIOKButton, new Point(23, 9));
        }
        
        /// <summary>
        /// RecordedMethod5 - Use 'RecordedMethod5Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod5()
        {
            #region Variable Declarations
            WinButton uIPolicySummaryButton = this.UIQuoteResultsWindow.UIPolicySummaryWindow.UIPolicySummaryButton;
            WinComboBox uIFilenameComboBox = this.UISavethefileasWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISavethefileasWindow.UISaveWindow.UISaveButton;
            #endregion

            // Click 'Policy &Summary' button
            Mouse.Click(uIPolicySummaryButton, new Point(46, 14));

            // Last mouse action was not recorded.

            // Select '⁬test_print' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod5Params.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(38, 12));
        }
        
        /// <summary>
        /// RecordedMethod6
        /// </summary>
        public void RecordedMethod6()
        {
            #region Variable Declarations
            WinListItem uITestProject7ListItem = this.UIProgramManagerWindow.UIDesktopList.UITestProject7ListItem;
            #endregion

            // Click 'TestProject7' list item
            Mouse.Click(uITestProject7ListItem, new Point(28, 16));
        }
        
        /// <summary>
        /// RegistryHighway - Use 'RegistryHighwayParams' to pass parameters into this method.
        /// </summary>
        public void RegistryHighway()
        {
            #region Variable Declarations
            WinComboBox uIOpenComboBox = this.UIRunWindow.UIItemWindow1.UIOpenComboBox;
            WinButton uIOKButton = this.UIRunWindow.UIOKWindow.UIOKButton;
            WinButton uIYesButton = this.UIRegistryEditorWindow.UIRegistryEditorPane.UIYesButton;
            WinButton uIOKButton1 = this.UIRegistryEditorWindow.UIRegistryEditorPane.UIOKButton;
            #endregion

            // Press keyboard shortcut keys 'Windows + R'
            Keyboard.SendKeys(this.RegistryHighwayParams.SendKeys, ModifierKeys.Windows);

            // Select 'c:\TestProject7\ourhighway.reg' in 'Open:' combo box
            uIOpenComboBox.EditableItem = this.RegistryHighwayParams.UIOpenComboBoxEditableItem;

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(49, 16));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(41, 10));

            // Click 'OK' button
            Mouse.Click(uIOKButton1, new Point(16, 10));
        }
        
        /// <summary>
        /// RegressAppDate - Use 'RegressAppDateParams' to pass parameters into this method.
        /// </summary>
        public void RegressAppDate()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIRegressIETamPolicyWindow.UIItemWindow3.UIItemEdit;
            #endregion

            // Type '10/11/2011' in 'Unknown Name' text box
            uIItemEdit.Text = this.RegressAppDateParams.UIItemEditText;
        }
        
        /// <summary>
        /// RenewalAfterMTA1 - Use 'RenewalAfterMTA1Params' to pass parameters into this method.
        /// </summary>
        public void RenewalAfterMTA1()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UICurrentOrFutureWindow.UICurrentOrFutureClient.UIOKButton;
            WinButton uIAfterButton = this.UIMidTermAdjustmentsWindow.UIOKWindow.UIAfterButton;
            WinButton uIMTAButton = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIMTAWindow.UIMTAButton;
            WinComboBox uIItemComboBox = this.UIMidTermAdjustmentsWindow.UIItemWindow.UIItemComboBox;
            WinButton uIOKButton1 = this.UIMidTermAdjustmentsWindow.UIOKWindow1.UIOKButton;
            WinEdit uIItemEdit = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow1.UIItemEdit;
            WinButton uICalculateQuoteButton = this.UIInsurEtamWindow.UIMotorQuotesWindow.UICalculateQuoteWindow.UICalculateQuoteButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // The recording for the application under test '\\Pc-pez\J-Drive\TamXML\TamXML7.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click '&Ok' button
            Mouse.Click(uIOKButton, new Point(42, 14));

            // The recording for the application under test '\\Pc-pez\J-Drive\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click '&After' button
            Mouse.Click(uIAfterButton, new Point(37, 8));

            // Click '&MTA...' button
            Mouse.Click(uIMTAButton, new Point(55, 10));

            // Select 'Change of Vehicle' in 'Unknown Name' combo box
            uIItemComboBox.SelectedItem = this.RenewalAfterMTA1Params.UIItemComboBoxSelectedItem;

            // Click '&OK' button
            Mouse.Click(uIOKButton1, new Point(39, 17));

            // Type '888888' in 'Unknown Name' text box
            uIItemEdit.Text = this.RenewalAfterMTA1Params.UIItemEditText;

            // Click 'Calculate &Quote' button
            Mouse.Click(uICalculateQuoteButton, new Point(71, 13));
        }
        
        /// <summary>
        /// RenewalCheckInvited - Use 'RenewalCheckInvitedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void RenewalCheckInvited()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIAUTO1871001Window.UIItemWindow.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' equals 'Invited'
            Assert.AreEqual(this.RenewalCheckInvitedExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// RenewalCheckStatus - Use 'RenewalCheckStatusExpectedValues' to pass parameters into this method.
        /// </summary>
        public void RenewalCheckStatus()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIPolicyautotestWindow.UIBillingScreenMOTOWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' equals 'REN'
            Assert.AreEqual(this.RenewalCheckStatusExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// RenewalLoaderClose
        /// </summary>
        public void RenewalLoaderClose()
        {
            #region Variable Declarations
            WinTitleBar uIRenewalLoaderTitleBar = this.UIRenewalLoaderWindow.UIRenewalLoaderTitleBar;
            WinButton uICloseButton = this.UIRenewalLoaderWindow.UIRenewalLoaderTitleBar.UICloseButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // The recording for the application under test '\\Pc-pez\J-Drive\TamXML\RLoader.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'Renewal Loader' title bar
            Mouse.Click(uIRenewalLoaderTitleBar, new Point(89, 11));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(18, 9));
        }
        
        /// <summary>
        /// RenewalLoaderOpen
        /// </summary>
        public void RenewalLoaderOpen()
        {
            #region Variable Declarations
            WinButton uIItemButton = this.UIPolicyautotestWindow.UIItemWindow.UIItemButton;
            WinButton uIOptionsButton = this.UIPolicyautotestWindow.UIPolicyListWindow.UIOptionsWindow.UIOptionsButton;
            WinMenuItem uILinksMenuItem = this.UIPolicyautotestWindow.UIApplicationMenuBar.UIOptionsMenuItem.UILinksMenuItem;
            WinMenuItem uIItem3rdPartyIntegratMenuItem = this.UIPolicyautotestWindow.UIApplicationMenuBar.UIOptionsMenuItem.UILinksMenuItem1.UIItem3rdPartyIntegratMenuItem;
            WinMenuItem uIRenewalsLoaderMenuItem = this.UIPolicyautotestWindow.UIApplicationMenuBar.UIOptionsMenuItem.UILinksMenuItem.UIItem3rdPartyIntegratMenuItem.UIRenewalsLoaderMenuItem;
            #endregion

            // Click 'Unknown Name' button
            Mouse.Click(uIItemButton, new Point(25, 19));

            // Click 'Options' button
            Mouse.Click(uIOptionsButton, new Point(28, 11));

            // Click 'Options' -> 'Links' menu item
            Mouse.Click(uILinksMenuItem, new Point(79, 10));

            // Click 'Options' -> 'Links' -> '3rd Party Integration' menu item
            Mouse.Click(uIItem3rdPartyIntegratMenuItem, new Point(100, 16));

            // Click 'Options' -> 'Links' -> '3rd Party Integration' -> 'Renewals Loader' menu item
            Mouse.Click(uIRenewalsLoaderMenuItem, new Point(111, 11));
        }
        
        /// <summary>
        /// RenewalLoaderRun - Use 'RenewalLoaderRunParams' to pass parameters into this method.
        /// </summary>
        public void RenewalLoaderRun()
        {
            #region Variable Declarations
            WinTitleBar uIRenewalLoaderTitleBar = this.UIRenewalLoaderWindow.UIRenewalLoaderTitleBar;
            WinEdit uIItemEdit = this.UIRenewalLoaderWindow.UIItem12122012Window.UIItemEdit;
            WinEdit uIItemEdit1 = this.UIRenewalLoaderWindow.UIItem13122012Window.UIItemEdit;
            WinButton uIRunButton = this.UIRenewalLoaderWindow.UIRenewalLoaderClient.UIRunButton;
            #endregion

            // Click 'Renewal Loader' title bar
            Mouse.Click(uIRenewalLoaderTitleBar, new Point(103, 8));

            // Type '12/12/2012' in 'Unknown Name' text box
            uIItemEdit.Text = this.RenewalLoaderRunParams.UIItemEditText;

            // Type '22/12/2012' in 'Unknown Name' text box
            uIItemEdit1.Text = this.RenewalLoaderRunParams.UIItemEditText1;

            // Click 'Run' button
            Mouse.Click(uIRunButton, new Point(42, 15));
        }
        
        /// <summary>
        /// RenewalModuleClose
        /// </summary>
        public void RenewalModuleClose()
        {
            #region Variable Declarations
            WinButton uIExitButton = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIExitWindow1.UIExitButton;
            WinButton uIYesButton = this.UIInsurEtamWindow1.UIYesWindow.UIYesButton;
            #endregion

            // Click 'E&xit' button
            Mouse.Click(uIExitButton, new Point(44, 19));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(44, 14));
        }
        
        /// <summary>
        /// RenewalModuleConfirm
        /// </summary>
        public void RenewalModuleConfirm()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIConfirmWindow.UIOKWindow.UIOKButton;
            #endregion

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(45, 13));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;
        }
        
        /// <summary>
        /// RenewalModuleDisplay - Use 'RenewalModuleDisplayParams' to pass parameters into this method.
        /// </summary>
        public void RenewalModuleDisplay()
        {
            #region Variable Declarations
            WinClient uIInsurETAMRenewalsClient = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow10.UIInsurETAMRenewalsClient;
            WinButton uIDisplayRecordButton = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIDisplayRecordWindow.UIDisplayRecordButton;
            #endregion

            // Click 'Insur-E TAM Renewals' client
            Mouse.Click(uIInsurETAMRenewalsClient, new Point(10, 10));

            // Type '{End}' in 'Insur-E TAM Renewals' client
            Keyboard.SendKeys(uIInsurETAMRenewalsClient, this.RenewalModuleDisplayParams.UIInsurETAMRenewalsClientSendKeys, ModifierKeys.None);

            // Click 'Display Record...' button
            Mouse.Click(uIDisplayRecordButton, new Point(67, 11));
        }
        
        /// <summary>
        /// RenewalModuleEDI - Use 'RenewalModuleEDIParams' to pass parameters into this method.
        /// </summary>
        public void RenewalModuleEDI()
        {
            #region Variable Declarations
            WinButton uIOptionsButton = this.UIPolicyautotestWindow.UIPolicyListWindow.UIOptionsWindow.UIOptionsButton;
            WinMenuItem uILinksMenuItem = this.UIPolicyautotestWindow.UIApplicationMenuBar.UIOptionsMenuItem.UILinksMenuItem;
            WinMenuItem uIItem3rdPartyIntegratMenuItem = this.UIPolicyautotestWindow.UIApplicationMenuBar.UIOptionsMenuItem.UILinksMenuItem1.UIItem3rdPartyIntegratMenuItem;
            WinMenuItem uIRenewalsModuleMenuItem = this.UIPolicyautotestWindow.UIApplicationMenuBar.UIOptionsMenuItem.UILinksMenuItem2.UIItem3rdPartyIntegratMenuItem.UIRenewalsModuleMenuItem;
            WinEdit uIItemEdit = this.UIIETAMRenewalsWindow.UIItemWindow.UIItemEdit;
            WinButton uIOKButton = this.UIIETAMRenewalsWindow.UIOKWindow.UIOKButton;
            #endregion

            // Click 'Options' button
            Mouse.Click(uIOptionsButton, new Point(21, 12));

            // Click 'Options' -> 'Links' menu item
            Mouse.Click(uILinksMenuItem, new Point(101, 8));

            // Click 'Options' -> 'Links' -> '3rd Party Integration' menu item
            Mouse.Click(uIItem3rdPartyIntegratMenuItem, new Point(89, 10));

            // Click 'Options' -> 'Links' -> '3rd Party Integration' -> 'Renewals Module' menu item
            Mouse.Click(uIRenewalsModuleMenuItem, new Point(98, 12));

            // The recording for the application under test '\\Pc-pez\J-Drive\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Type '1' in 'Unknown Name' text box
            uIItemEdit.Text = this.RenewalModuleEDIParams.UIItemEditText;

            // Click 'Ok' button
            Mouse.Click(uIOKButton, new Point(31, 10));
        }
        
        /// <summary>
        /// RenewalModuleEDI_1
        /// </summary>
        public void RenewalModuleEDI_1()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIInsurEtamWindow1.UIOKWindow.UIOKButton;
            WinButton uIExitButton = this.UIPoliciesAutoRenewedAWindow.UIExitWindow.UIExitButton;
            WinButton uIEDIMatchButton = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIEDIMatchWindow.UIEDIMatchButton;
            WinButton uIOKButton1 = this.UIRenewalSearchWindow.UIOKWindow.UIOKButton;
            WinButton uILogandClearButton = this.UIInsurEtamWindow.UIMotorQuotesWindow.UILogandClearWindow.UILogandClearButton;
            #endregion

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(36, 13));

            // Click 'E&xit' button
            Mouse.Click(uIExitButton, new Point(33, 11));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;

            // Click '&EDI Match...' button
            Mouse.Click(uIEDIMatchButton, new Point(59, 10));

            // Click '&Ok' button
            Mouse.Click(uIOKButton1, new Point(37, 9));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(46, 21));

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Click '&Log and Clear' button
            Mouse.Click(uILogandClearButton, new Point(50, 15));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(50, 7));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;
        }
        
        /// <summary>
        /// RenewalModuleFilterMoto - Use 'RenewalModuleFilterMotoParams' to pass parameters into this method.
        /// </summary>
        public void RenewalModuleFilterMoto()
        {
            #region Variable Declarations
            WinButton uIFilterButton = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIFilterWindow.UIFilterButton;
            WinEdit uIItemEdit = this.UIFilterRenewalRecordsWindow.UIItemWindow.UIItemEdit;
            WinEdit uIItemEdit1 = this.UIFilterRenewalRecordsWindow.UIItemWindow1.UIItemEdit;
            WinComboBox uIItemComboBox = this.UIFilterRenewalRecordsWindow.UIItemWindow2.UIItemComboBox;
            WinButton uIOKButton = this.UIFilterRenewalRecordsWindow.UIOKWindow.UIOKButton;
            #endregion

            // Click '&Filter...' button
            Mouse.Click(uIFilterButton, new Point(40, 11));

            // Type '12/11/12' in 'Unknown Name' text box
            uIItemEdit.Text = this.RenewalModuleFilterMotoParams.UIItemEditText;

            // Type '12/11/12' in 'Unknown Name' text box
            uIItemEdit1.Text = this.RenewalModuleFilterMotoParams.UIItemEditText1;

            // Select 'Motor' in 'Unknown Name' combo box
            uIItemComboBox.SelectedItem = this.RenewalModuleFilterMotoParams.UIItemComboBoxSelectedItem;

            // Click '&Ok' button
            Mouse.Click(uIOKButton, new Point(39, 11));
        }
        
        /// <summary>
        /// RenewalModuleInvite
        /// </summary>
        public void RenewalModuleInvite()
        {
            #region Variable Declarations
            WinButton uIInviteButton = this.UIAUTO1871001Window.UIInviteWindow.UIInviteButton;
            #endregion

            // Click '&Invite' button
            Mouse.Click(uIInviteButton, new Point(75, 8));
        }
        
        /// <summary>
        /// RenewalModuleRenew
        /// </summary>
        public void RenewalModuleRenew()
        {
            #region Variable Declarations
            WinButton uIRenewPolicyButton = this.UIAUTO1871001Window.UIRenewPolicyWindow.UIRenewPolicyButton;
            WinButton uIYesButton = this.UIConfirmWindow.UIYesWindow.UIYesButton;
            WinButton uIOKButton = this.UIConfirmDocumentsWindow.UIOKWindow.UIOKButton;
            #endregion

            // Click '&Renew Policy' button
            Mouse.Click(uIRenewPolicyButton, new Point(46, 10));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(55, 14));

            // Click 'Ok' button
            Mouse.Click(uIOKButton, new Point(44, 16));
        }
        
        /// <summary>
        /// RenewalModuleRenew_1 - Use 'RenewalModuleRenew_1Params' to pass parameters into this method.
        /// </summary>
        public void RenewalModuleRenew_1()
        {
            #region Variable Declarations
            WinCheckBox uIDeferPrintingCheckBox = this.UIPrintDocumentsWindow.UIDeferPrintingWindow.UIDeferPrintingCheckBox;
            WinButton uIOKButton = this.UIPrintDocumentsWindow.UIOKWindow.UIOKButton;
            WinButton uIOKButton1 = this.UIInsurEtamWindow1.UIOKWindow.UIOKButton;
            WinCheckBox uIAddActivityCheckBox = this.UIImporttoTAMWindow.UIImportOptionsClient.UIAddActivityCheckBox;
            WinButton uIOKButton2 = this.UIImporttoTAMWindow.UIPanel1Client.UIOKButton;
            WinButton uIOKButton3 = this.UITransactiontoinsertWindow.UIItemWindow.UITransactiontoinsertClient.UIOKButton;
            WinList uIItemList = this.UIPleaseselectWHOtofolWindow.UIItemWindow1.UIItemList;
            WinButton uIOKButton4 = this.UIPleaseselectWHOtofolWindow.UIItemWindow.UIPleaseselectWHOtofolClient.UIOKButton;
            WinButton uIOKButton5 = this.UITamxml7Window.UITamxml7Client.UIOKButton;
            #endregion

            // Select '&Defer Printing?' check box
            uIDeferPrintingCheckBox.Checked = this.RenewalModuleRenew_1Params.UIDeferPrintingCheckBoxChecked;

            // Click 'Ok' button
            Mouse.Click(uIOKButton, new Point(76, 10));

            // Click 'OK' button
            Mouse.Click(uIOKButton1, new Point(48, 19));

            // The recording for the application under test '\\Pc-pez\J-Drive\TamXML\TamXML7.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Clear 'Add Activity' check box
            uIAddActivityCheckBox.Checked = this.RenewalModuleRenew_1Params.UIAddActivityCheckBoxChecked;

            // Click 'Ok' button
            Mouse.Click(uIOKButton2, new Point(46, 16));

            // Click '&Ok' button
            Mouse.Click(uIOKButton3, new Point(47, 24));

            // Select 'AG Administrator General' in 'Unknown Name' list box
            uIItemList.SelectedItemsAsString = this.RenewalModuleRenew_1Params.UIItemListSelectedItemsAsString;

            // Click '&Ok' button
            Mouse.Click(uIOKButton4, new Point(46, 4));

            // Click 'OK' button
            Mouse.Click(uIOKButton5, new Point(44, 8));
        }
        
        /// <summary>
        /// RenewalModuleSort
        /// </summary>
        public void RenewalModuleSort()
        {
            #region Variable Declarations
            WinClient uIInsurETAMRenewalsClient = this.UIInsurEtamWindow.UIMotorQuotesWindow.UIItemWindow12.UIInsurETAMRenewalsClient;
            #endregion

            // The recording for the application under test '\\ICLVDEVTM02\Applied\WINTAM\clntfile.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // The recording for the application under test '\\ICLVDEVTM02\Applied\APPS\ieoffice\data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'Insur-E TAM Renewals' client
            Mouse.Click(uIInsurETAMRenewalsClient, new Point(24, 8));
        }
        
        /// <summary>
        /// RenewConfirmInvite
        /// </summary>
        public void RenewConfirmInvite()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIConfirmWindow.UIOKWindow.UIOKButton;
            #endregion

            // The recording for the application under test '\\Pc-pez\J-Drive\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(54, 7));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;
        }
        
        /// <summary>
        /// RetrieveResponse
        /// </summary>
        public void RetrieveResponse()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIInsurEtamWindow1.UIOKWindow1.UIOKButton;
            #endregion

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(51, 11));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;
        }
        
        /// <summary>
        /// RewiseRecord
        /// </summary>
        public void RewiseRecord()
        {
            #region Variable Declarations
            WinButton uIYesButton = this.UIPolicyWindow.UIYesWindow.UIYesButton;
            #endregion

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(52, 16));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;
        }
        
        /// <summary>
        /// SaveWithoutPremium - Use 'SaveWithoutPremiumParams' to pass parameters into this method.
        /// </summary>
        public void SaveWithoutPremium()
        {
            #region Variable Declarations
            WinButton uIExitButton = this.UIQuoteResultsWindow.UIExitWindow.UIExitButton;
            WinButton uIYesButton = this.UIInsurEtamWindow1.UIYesWindow.UIYesButton;
            WinCheckBox uIAddActivityCheckBox = this.UIImporttoTAMWindow.UIImportOptionsClient.UIAddActivityCheckBox;
            WinButton uIOKButton = this.UIImporttoTAMWindow.UIImporttoTAMClient.UIOKButton;
            WinList uIItemList = this.UISelectTaminsurerforiWindow.UIItemWindow.UIItemList;
            WinButton uIOKButton1 = this.UISelectTaminsurerforiWindow.UIItemWindow1.UISelectTaminsurerforiClient.UIOKButton;
            WinButton uIOKButton2 = this.UITamxml7Window.UITamxml7Client.UIOKButton;
            #endregion

            // Click 'E&xit' button
            Mouse.Click(uIExitButton, new Point(55, 11));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(34, 18));

            // Clear 'Add Activity' check box
            uIAddActivityCheckBox.Checked = this.SaveWithoutPremiumParams.UIAddActivityCheckBoxChecked;

            // Click 'Ok' button
            Mouse.Click(uIOKButton, new Point(32, 8));

            // Select 'ABD' in 'Unknown Name' list box
            uIItemList.SelectedItemsAsString = this.SaveWithoutPremiumParams.UIItemListSelectedItemsAsString;

            // Click '&Ok' button
            Mouse.Click(uIOKButton1, new Point(33, 19));

            // Click 'OK' button
            Mouse.Click(uIOKButton2, new Point(44, 15));
        }
        
        /// <summary>
        /// SelectHomeType - Use 'SelectHomeTypeParams' to pass parameters into this method.
        /// </summary>
        public void SelectHomeType()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UICustomertxt1tdsfsWindow.UINewPolicyDetailWindow.UIItemWindow1.UIItemEdit;
            WinButton uIOKButton = this.UICustomertxt1tdsfsWindow.UINewPolicyDetailWindow.UIOKWindow.UIOKButton;
            #endregion

            // Type 'HOME' in 'Unknown Name' text box
            uIItemEdit.Text = this.SelectHomeTypeParams.UIItemEditText;

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(40, 15));
        }
        
        /// <summary>
        /// SelectInsurer
        /// </summary>
        public void SelectInsurer()
        {
            #region Variable Declarations
            WinClient uIQuoteResultsClient = this.UIQuoteResultsWindow.UIItemWindow.UIQuoteResultsClient;
            #endregion

            // Wait for 2 seconds for user delay between actions; Click 'Quote Results' client
            Playback.Wait(2000);
            Mouse.Click(uIQuoteResultsClient, new Point(353, 27));
        }
        
        /// <summary>
        /// SelectMenu
        /// </summary>
        public void SelectMenu()
        {
            #region Variable Declarations
            WinButton uIOptionsButton = this.UIPolicyautotestWindow.UIPolicyListWindow.UIOptionsWindow.UIOptionsButton;
            WinMenuItem uILinksMenuItem = this.UIPolicyautotestWindow.UIApplicationMenuBar.UIOptionsMenuItem.UILinksMenuItem;
            WinMenuItem uIItem3rdPartyIntegratMenuItem = this.UIPolicyautotestWindow.UIApplicationMenuBar.UIOptionsMenuItem.UILinksMenuItem1.UIItem3rdPartyIntegratMenuItem;
            WinMenuItem uIQuoteSelectListMenuItem = this.UIPolicyautotestWindow.UIApplicationMenuBar.UIOptionsMenuItem.UILinksMenuItem2.UIItem3rdPartyIntegratMenuItem.UIQuoteSelectListMenuItem;
            #endregion

            // Click 'Options' button
            Mouse.Click(uIOptionsButton, new Point(37, 10));

            // Click 'Options' -> 'Links' menu item
            Mouse.Click(uILinksMenuItem, new Point(68, 6));

            // Click 'Options' -> 'Links' -> '3rd Party Integration' menu item
            Mouse.Click(uIItem3rdPartyIntegratMenuItem, new Point(102, 10));

            // Click 'Options' -> 'Links' -> '3rd Party Integration' -> 'Quote Select List' menu item
            Mouse.Click(uIQuoteSelectListMenuItem, new Point(101, 9));
        }
        
        /// <summary>
        /// SelectMotoPolicy - Use 'SelectMotoPolicyParams' to pass parameters into this method.
        /// </summary>
        public void SelectMotoPolicy()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UICustomertxt1tdsfsWindow.UINewPolicyDetailWindow.UIItemWindow1.UIItemEdit;
            WinButton uIOKButton = this.UICustomertxt1tdsfsWindow.UINewPolicyDetailWindow.UIOKWindow.UIOKButton;
            #endregion

            // Type 'MOTO' in 'Unknown Name' text box
            uIItemEdit.Text = this.SelectMotoPolicyParams.UIItemEditText;

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(38, 18));
        }
        
        /// <summary>
        /// SelectNextTransaction - Use 'SelectNextTransactionParams' to pass parameters into this method.
        /// </summary>
        public void SelectNextTransaction()
        {
            #region Variable Declarations
            WinList uILvwVListList = this.UITransactionListWindow.UILvwVListWindow.UILvwVListList;
            #endregion

            // Select '381' in 'lvwVList' list box
            uILvwVListList.SelectedItemsAsString = this.SelectNextTransactionParams.UILvwVListListSelectedItemsAsString;

            // Select '381' in 'lvwVList' list box
            uILvwVListList.SelectedItemsAsString = this.SelectNextTransactionParams.UILvwVListListSelectedItemsAsString1;
        }
        
        /// <summary>
        /// SelectPolicy
        /// </summary>
        public void SelectPolicy()
        {
            #region Variable Declarations
            WinTitleBar uIQuoteResultsTitleBar = this.UIQuoteResultsWindow.UIQuoteResultsTitleBar;
            WinClient uIQuoteResultsClient = this.UIQuoteResultsWindow.UIQuoteResultsClient;
            #endregion

            // Wait for 2 seconds for user delay between actions; Click 'Quote Results' title bar
            Playback.Wait(2000);
            Mouse.Click(uIQuoteResultsTitleBar, new Point(736, 10));

            // Click 'Quote Results' client
            Mouse.Click(uIQuoteResultsClient, new Point(728, 84));
        }
        
        /// <summary>
        /// SelectPolicyQuote - Use 'SelectPolicyQuoteParams' to pass parameters into this method.
        /// </summary>
        public void SelectPolicyQuote()
        {
            #region Variable Declarations
            WinClient uIQuoteResultsClient = this.UIQuoteResultsWindow.UIItemWindow.UIQuoteResultsClient;
            #endregion

            // The recording for the application under test '\\Pc-pez\APPLIED\APPS\IEOffice\Data\InsureTam.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'Quote Results' client
            Mouse.Click(uIQuoteResultsClient, new Point(295, 127));

            // Type '{Home}' in 'Quote Results' client
            Keyboard.SendKeys(uIQuoteResultsClient, this.SelectPolicyQuoteParams.UIQuoteResultsClientSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// testPrint - Use 'testPrintParams' to pass parameters into this method.
        /// </summary>
        public void testPrint()
        {
            #region Variable Declarations
            WinButton uIPolicySummaryButton = this.UIQuoteResultsWindow.UIPolicySummaryWindow.UIPolicySummaryButton;
            WinComboBox uIFilenameComboBox = this.UISavethefileasWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISavethefileasWindow.UISaveWindow.UISaveButton;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            #endregion

            // Click 'Policy &Summary' button
            Mouse.Click(uIPolicySummaryButton, new Point(61, 12));

            // Select 'test_print' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.testPrintParams.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(59, 8));

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(38, 6));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;
        }
        
        /// <summary>
        /// WarningOk
        /// </summary>
        public void WarningOk()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIWarningWindow.UIOKWindow.UIOKButton;
            #endregion

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(50, 10));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;
        }
        
        #region Properties
        public virtual AcceptEnabledExpectedValues AcceptEnabledExpectedValues
        {
            get
            {
                if ((this.mAcceptEnabledExpectedValues == null))
                {
                    this.mAcceptEnabledExpectedValues = new AcceptEnabledExpectedValues();
                }
                return this.mAcceptEnabledExpectedValues;
            }
        }
        
        public virtual AddPolicyParams AddPolicyParams
        {
            get
            {
                if ((this.mAddPolicyParams == null))
                {
                    this.mAddPolicyParams = new AddPolicyParams();
                }
                return this.mAddPolicyParams;
            }
        }
        
        public virtual AddressLookupHomeExpectedValues AddressLookupHomeExpectedValues
        {
            get
            {
                if ((this.mAddressLookupHomeExpectedValues == null))
                {
                    this.mAddressLookupHomeExpectedValues = new AddressLookupHomeExpectedValues();
                }
                return this.mAddressLookupHomeExpectedValues;
            }
        }
        
        public virtual AmendDateBeforeMessageExpectedValues AmendDateBeforeMessageExpectedValues
        {
            get
            {
                if ((this.mAmendDateBeforeMessageExpectedValues == null))
                {
                    this.mAmendDateBeforeMessageExpectedValues = new AmendDateBeforeMessageExpectedValues();
                }
                return this.mAmendDateBeforeMessageExpectedValues;
            }
        }
        
        public virtual AmendSelectQuoteParams AmendSelectQuoteParams
        {
            get
            {
                if ((this.mAmendSelectQuoteParams == null))
                {
                    this.mAmendSelectQuoteParams = new AmendSelectQuoteParams();
                }
                return this.mAmendSelectQuoteParams;
            }
        }
        
        public virtual App_startedExpectedValues App_startedExpectedValues
        {
            get
            {
                if ((this.mApp_startedExpectedValues == null))
                {
                    this.mApp_startedExpectedValues = new App_startedExpectedValues();
                }
                return this.mApp_startedExpectedValues;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual AssertMethod2ExpectedValues AssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod2ExpectedValues == null))
                {
                    this.mAssertMethod2ExpectedValues = new AssertMethod2ExpectedValues();
                }
                return this.mAssertMethod2ExpectedValues;
            }
        }
        
        public virtual AssertMethod3ExpectedValues AssertMethod3ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod3ExpectedValues == null))
                {
                    this.mAssertMethod3ExpectedValues = new AssertMethod3ExpectedValues();
                }
                return this.mAssertMethod3ExpectedValues;
            }
        }
        
        public virtual AssertMethod4ExpectedValues AssertMethod4ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod4ExpectedValues == null))
                {
                    this.mAssertMethod4ExpectedValues = new AssertMethod4ExpectedValues();
                }
                return this.mAssertMethod4ExpectedValues;
            }
        }
        
        public virtual AssertMethod5ExpectedValues AssertMethod5ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod5ExpectedValues == null))
                {
                    this.mAssertMethod5ExpectedValues = new AssertMethod5ExpectedValues();
                }
                return this.mAssertMethod5ExpectedValues;
            }
        }
        
        public virtual AssertSelectPolicyFormExpectedValues AssertSelectPolicyFormExpectedValues
        {
            get
            {
                if ((this.mAssertSelectPolicyFormExpectedValues == null))
                {
                    this.mAssertSelectPolicyFormExpectedValues = new AssertSelectPolicyFormExpectedValues();
                }
                return this.mAssertSelectPolicyFormExpectedValues;
            }
        }
        
        public virtual ChangeDatePolicyParams ChangeDatePolicyParams
        {
            get
            {
                if ((this.mChangeDatePolicyParams == null))
                {
                    this.mChangeDatePolicyParams = new ChangeDatePolicyParams();
                }
                return this.mChangeDatePolicyParams;
            }
        }
        
        public virtual ChangePremiumParams ChangePremiumParams
        {
            get
            {
                if ((this.mChangePremiumParams == null))
                {
                    this.mChangePremiumParams = new ChangePremiumParams();
                }
                return this.mChangePremiumParams;
            }
        }
        
        public virtual CheckAutoPrintExpectedValues CheckAutoPrintExpectedValues
        {
            get
            {
                if ((this.mCheckAutoPrintExpectedValues == null))
                {
                    this.mCheckAutoPrintExpectedValues = new CheckAutoPrintExpectedValues();
                }
                return this.mCheckAutoPrintExpectedValues;
            }
        }
        
        public virtual CheckBillingScreenExpectedValues CheckBillingScreenExpectedValues
        {
            get
            {
                if ((this.mCheckBillingScreenExpectedValues == null))
                {
                    this.mCheckBillingScreenExpectedValues = new CheckBillingScreenExpectedValues();
                }
                return this.mCheckBillingScreenExpectedValues;
            }
        }
        
        public virtual CheckDemandsDocExpectedValues CheckDemandsDocExpectedValues
        {
            get
            {
                if ((this.mCheckDemandsDocExpectedValues == null))
                {
                    this.mCheckDemandsDocExpectedValues = new CheckDemandsDocExpectedValues();
                }
                return this.mCheckDemandsDocExpectedValues;
            }
        }
        
        public virtual CheckQuoteMessageExpectedValues CheckQuoteMessageExpectedValues
        {
            get
            {
                if ((this.mCheckQuoteMessageExpectedValues == null))
                {
                    this.mCheckQuoteMessageExpectedValues = new CheckQuoteMessageExpectedValues();
                }
                return this.mCheckQuoteMessageExpectedValues;
            }
        }
        
        public virtual CoverDateBackCheckExpectedValues CoverDateBackCheckExpectedValues
        {
            get
            {
                if ((this.mCoverDateBackCheckExpectedValues == null))
                {
                    this.mCoverDateBackCheckExpectedValues = new CoverDateBackCheckExpectedValues();
                }
                return this.mCoverDateBackCheckExpectedValues;
            }
        }
        
        public virtual Exit1Params Exit1Params
        {
            get
            {
                if ((this.mExit1Params == null))
                {
                    this.mExit1Params = new Exit1Params();
                }
                return this.mExit1Params;
            }
        }
        
        public virtual ExitEnabledExpectedValues ExitEnabledExpectedValues
        {
            get
            {
                if ((this.mExitEnabledExpectedValues == null))
                {
                    this.mExitEnabledExpectedValues = new ExitEnabledExpectedValues();
                }
                return this.mExitEnabledExpectedValues;
            }
        }
        
        public virtual FinishQuote1Params FinishQuote1Params
        {
            get
            {
                if ((this.mFinishQuote1Params == null))
                {
                    this.mFinishQuote1Params = new FinishQuote1Params();
                }
                return this.mFinishQuote1Params;
            }
        }
        
        public virtual HomeAcceptQuote_1Params HomeAcceptQuote_1Params
        {
            get
            {
                if ((this.mHomeAcceptQuote_1Params == null))
                {
                    this.mHomeAcceptQuote_1Params = new HomeAcceptQuote_1Params();
                }
                return this.mHomeAcceptQuote_1Params;
            }
        }
        
        public virtual HomeAddressLookupExpectedValues HomeAddressLookupExpectedValues
        {
            get
            {
                if ((this.mHomeAddressLookupExpectedValues == null))
                {
                    this.mHomeAddressLookupExpectedValues = new HomeAddressLookupExpectedValues();
                }
                return this.mHomeAddressLookupExpectedValues;
            }
        }
        
        public virtual HomeAmendRenewParams HomeAmendRenewParams
        {
            get
            {
                if ((this.mHomeAmendRenewParams == null))
                {
                    this.mHomeAmendRenewParams = new HomeAmendRenewParams();
                }
                return this.mHomeAmendRenewParams;
            }
        }
        
        public virtual HomeAmendRenewFinish_1Params HomeAmendRenewFinish_1Params
        {
            get
            {
                if ((this.mHomeAmendRenewFinish_1Params == null))
                {
                    this.mHomeAmendRenewFinish_1Params = new HomeAmendRenewFinish_1Params();
                }
                return this.mHomeAmendRenewFinish_1Params;
            }
        }
        
        public virtual HomeAmendRiskParams HomeAmendRiskParams
        {
            get
            {
                if ((this.mHomeAmendRiskParams == null))
                {
                    this.mHomeAmendRiskParams = new HomeAmendRiskParams();
                }
                return this.mHomeAmendRiskParams;
            }
        }
        
        public virtual HomeAmendSelecPolicyParams HomeAmendSelecPolicyParams
        {
            get
            {
                if ((this.mHomeAmendSelecPolicyParams == null))
                {
                    this.mHomeAmendSelecPolicyParams = new HomeAmendSelecPolicyParams();
                }
                return this.mHomeAmendSelecPolicyParams;
            }
        }
        
        public virtual HomeCancelPolicyParams HomeCancelPolicyParams
        {
            get
            {
                if ((this.mHomeCancelPolicyParams == null))
                {
                    this.mHomeCancelPolicyParams = new HomeCancelPolicyParams();
                }
                return this.mHomeCancelPolicyParams;
            }
        }
        
        public virtual HomeCancelPolicyAcceptParams HomeCancelPolicyAcceptParams
        {
            get
            {
                if ((this.mHomeCancelPolicyAcceptParams == null))
                {
                    this.mHomeCancelPolicyAcceptParams = new HomeCancelPolicyAcceptParams();
                }
                return this.mHomeCancelPolicyAcceptParams;
            }
        }
        
        public virtual HomeChangePremiumParams HomeChangePremiumParams
        {
            get
            {
                if ((this.mHomeChangePremiumParams == null))
                {
                    this.mHomeChangePremiumParams = new HomeChangePremiumParams();
                }
                return this.mHomeChangePremiumParams;
            }
        }
        
        public virtual HomeCheckDemandsExpectedValues HomeCheckDemandsExpectedValues
        {
            get
            {
                if ((this.mHomeCheckDemandsExpectedValues == null))
                {
                    this.mHomeCheckDemandsExpectedValues = new HomeCheckDemandsExpectedValues();
                }
                return this.mHomeCheckDemandsExpectedValues;
            }
        }
        
        public virtual HomeCheckNewPremiumExpectedValues HomeCheckNewPremiumExpectedValues
        {
            get
            {
                if ((this.mHomeCheckNewPremiumExpectedValues == null))
                {
                    this.mHomeCheckNewPremiumExpectedValues = new HomeCheckNewPremiumExpectedValues();
                }
                return this.mHomeCheckNewPremiumExpectedValues;
            }
        }
        
        public virtual HomeCheckPolicyPremiumExpectedValues HomeCheckPolicyPremiumExpectedValues
        {
            get
            {
                if ((this.mHomeCheckPolicyPremiumExpectedValues == null))
                {
                    this.mHomeCheckPolicyPremiumExpectedValues = new HomeCheckPolicyPremiumExpectedValues();
                }
                return this.mHomeCheckPolicyPremiumExpectedValues;
            }
        }
        
        public virtual HomeCheckPremiumExpectedValues HomeCheckPremiumExpectedValues
        {
            get
            {
                if ((this.mHomeCheckPremiumExpectedValues == null))
                {
                    this.mHomeCheckPremiumExpectedValues = new HomeCheckPremiumExpectedValues();
                }
                return this.mHomeCheckPremiumExpectedValues;
            }
        }
        
        public virtual HomeCheckPrintExpectedValues HomeCheckPrintExpectedValues
        {
            get
            {
                if ((this.mHomeCheckPrintExpectedValues == null))
                {
                    this.mHomeCheckPrintExpectedValues = new HomeCheckPrintExpectedValues();
                }
                return this.mHomeCheckPrintExpectedValues;
            }
        }
        
        public virtual HomeCheckStatusExpectedValues HomeCheckStatusExpectedValues
        {
            get
            {
                if ((this.mHomeCheckStatusExpectedValues == null))
                {
                    this.mHomeCheckStatusExpectedValues = new HomeCheckStatusExpectedValues();
                }
                return this.mHomeCheckStatusExpectedValues;
            }
        }
        
        public virtual HomeCheckZeroPremiumExpectedValues HomeCheckZeroPremiumExpectedValues
        {
            get
            {
                if ((this.mHomeCheckZeroPremiumExpectedValues == null))
                {
                    this.mHomeCheckZeroPremiumExpectedValues = new HomeCheckZeroPremiumExpectedValues();
                }
                return this.mHomeCheckZeroPremiumExpectedValues;
            }
        }
        
        public virtual HomeCopyCheckDataExpectedValues HomeCopyCheckDataExpectedValues
        {
            get
            {
                if ((this.mHomeCopyCheckDataExpectedValues == null))
                {
                    this.mHomeCopyCheckDataExpectedValues = new HomeCopyCheckDataExpectedValues();
                }
                return this.mHomeCopyCheckDataExpectedValues;
            }
        }
        
        public virtual HomeCopyRiskParams HomeCopyRiskParams
        {
            get
            {
                if ((this.mHomeCopyRiskParams == null))
                {
                    this.mHomeCopyRiskParams = new HomeCopyRiskParams();
                }
                return this.mHomeCopyRiskParams;
            }
        }
        
        public virtual HomeCreatePolicyParams HomeCreatePolicyParams
        {
            get
            {
                if ((this.mHomeCreatePolicyParams == null))
                {
                    this.mHomeCreatePolicyParams = new HomeCreatePolicyParams();
                }
                return this.mHomeCreatePolicyParams;
            }
        }
        
        public virtual HomeExitWithoutPolicyParams HomeExitWithoutPolicyParams
        {
            get
            {
                if ((this.mHomeExitWithoutPolicyParams == null))
                {
                    this.mHomeExitWithoutPolicyParams = new HomeExitWithoutPolicyParams();
                }
                return this.mHomeExitWithoutPolicyParams;
            }
        }
        
        public virtual HomeMTAChangeParams HomeMTAChangeParams
        {
            get
            {
                if ((this.mHomeMTAChangeParams == null))
                {
                    this.mHomeMTAChangeParams = new HomeMTAChangeParams();
                }
                return this.mHomeMTAChangeParams;
            }
        }
        
        public virtual HomeMTACheckCancelledExpectedValues HomeMTACheckCancelledExpectedValues
        {
            get
            {
                if ((this.mHomeMTACheckCancelledExpectedValues == null))
                {
                    this.mHomeMTACheckCancelledExpectedValues = new HomeMTACheckCancelledExpectedValues();
                }
                return this.mHomeMTACheckCancelledExpectedValues;
            }
        }
        
        public virtual HomeMTACheckChangedExpectedValues HomeMTACheckChangedExpectedValues
        {
            get
            {
                if ((this.mHomeMTACheckChangedExpectedValues == null))
                {
                    this.mHomeMTACheckChangedExpectedValues = new HomeMTACheckChangedExpectedValues();
                }
                return this.mHomeMTACheckChangedExpectedValues;
            }
        }
        
        public virtual HomeMTACheckMessageExpectedValues HomeMTACheckMessageExpectedValues
        {
            get
            {
                if ((this.mHomeMTACheckMessageExpectedValues == null))
                {
                    this.mHomeMTACheckMessageExpectedValues = new HomeMTACheckMessageExpectedValues();
                }
                return this.mHomeMTACheckMessageExpectedValues;
            }
        }
        
        public virtual HomeMTACopyCheckExpectedValues HomeMTACopyCheckExpectedValues
        {
            get
            {
                if ((this.mHomeMTACopyCheckExpectedValues == null))
                {
                    this.mHomeMTACopyCheckExpectedValues = new HomeMTACopyCheckExpectedValues();
                }
                return this.mHomeMTACopyCheckExpectedValues;
            }
        }
        
        public virtual HomeMTAEnterDateParams HomeMTAEnterDateParams
        {
            get
            {
                if ((this.mHomeMTAEnterDateParams == null))
                {
                    this.mHomeMTAEnterDateParams = new HomeMTAEnterDateParams();
                }
                return this.mHomeMTAEnterDateParams;
            }
        }
        
        public virtual HomeMTASelectQuoteParams HomeMTASelectQuoteParams
        {
            get
            {
                if ((this.mHomeMTASelectQuoteParams == null))
                {
                    this.mHomeMTASelectQuoteParams = new HomeMTASelectQuoteParams();
                }
                return this.mHomeMTASelectQuoteParams;
            }
        }
        
        public virtual HomeProposerParams HomeProposerParams
        {
            get
            {
                if ((this.mHomeProposerParams == null))
                {
                    this.mHomeProposerParams = new HomeProposerParams();
                }
                return this.mHomeProposerParams;
            }
        }
        
        public virtual HomeRebrokeSelectPolicyParams HomeRebrokeSelectPolicyParams
        {
            get
            {
                if ((this.mHomeRebrokeSelectPolicyParams == null))
                {
                    this.mHomeRebrokeSelectPolicyParams = new HomeRebrokeSelectPolicyParams();
                }
                return this.mHomeRebrokeSelectPolicyParams;
            }
        }
        
        public virtual HomeRenewalBeforeAcceptParams HomeRenewalBeforeAcceptParams
        {
            get
            {
                if ((this.mHomeRenewalBeforeAcceptParams == null))
                {
                    this.mHomeRenewalBeforeAcceptParams = new HomeRenewalBeforeAcceptParams();
                }
                return this.mHomeRenewalBeforeAcceptParams;
            }
        }
        
        public virtual HomeRenewalBeforeFinishParams HomeRenewalBeforeFinishParams
        {
            get
            {
                if ((this.mHomeRenewalBeforeFinishParams == null))
                {
                    this.mHomeRenewalBeforeFinishParams = new HomeRenewalBeforeFinishParams();
                }
                return this.mHomeRenewalBeforeFinishParams;
            }
        }
        
        public virtual HomeRenewalCancelledCheckExpectedValues HomeRenewalCancelledCheckExpectedValues
        {
            get
            {
                if ((this.mHomeRenewalCancelledCheckExpectedValues == null))
                {
                    this.mHomeRenewalCancelledCheckExpectedValues = new HomeRenewalCancelledCheckExpectedValues();
                }
                return this.mHomeRenewalCancelledCheckExpectedValues;
            }
        }
        
        public virtual HomeSelectPolicyParams HomeSelectPolicyParams
        {
            get
            {
                if ((this.mHomeSelectPolicyParams == null))
                {
                    this.mHomeSelectPolicyParams = new HomeSelectPolicyParams();
                }
                return this.mHomeSelectPolicyParams;
            }
        }
        
        public virtual HomeSelectPolicy1Params HomeSelectPolicy1Params
        {
            get
            {
                if ((this.mHomeSelectPolicy1Params == null))
                {
                    this.mHomeSelectPolicy1Params = new HomeSelectPolicy1Params();
                }
                return this.mHomeSelectPolicy1Params;
            }
        }
        
        public virtual HomeSiteRenewalParams HomeSiteRenewalParams
        {
            get
            {
                if ((this.mHomeSiteRenewalParams == null))
                {
                    this.mHomeSiteRenewalParams = new HomeSiteRenewalParams();
                }
                return this.mHomeSiteRenewalParams;
            }
        }
        
        public virtual HomeStartDateParams HomeStartDateParams
        {
            get
            {
                if ((this.mHomeStartDateParams == null))
                {
                    this.mHomeStartDateParams = new HomeStartDateParams();
                }
                return this.mHomeStartDateParams;
            }
        }
        
        public virtual HouseProposerParams HouseProposerParams
        {
            get
            {
                if ((this.mHouseProposerParams == null))
                {
                    this.mHouseProposerParams = new HouseProposerParams();
                }
                return this.mHouseProposerParams;
            }
        }
        
        public virtual HouseRegressAppParams HouseRegressAppParams
        {
            get
            {
                if ((this.mHouseRegressAppParams == null))
                {
                    this.mHouseRegressAppParams = new HouseRegressAppParams();
                }
                return this.mHouseRegressAppParams;
            }
        }
        
        public virtual LoginParams LoginParams
        {
            get
            {
                if ((this.mLoginParams == null))
                {
                    this.mLoginParams = new LoginParams();
                }
                return this.mLoginParams;
            }
        }
        
        public virtual Login_newParams Login_newParams
        {
            get
            {
                if ((this.mLogin_newParams == null))
                {
                    this.mLogin_newParams = new Login_newParams();
                }
                return this.mLogin_newParams;
            }
        }
        
        public virtual LoginEnterDateParams LoginEnterDateParams
        {
            get
            {
                if ((this.mLoginEnterDateParams == null))
                {
                    this.mLoginEnterDateParams = new LoginEnterDateParams();
                }
                return this.mLoginEnterDateParams;
            }
        }
        
        public virtual MotoAmendRiskParams MotoAmendRiskParams
        {
            get
            {
                if ((this.mMotoAmendRiskParams == null))
                {
                    this.mMotoAmendRiskParams = new MotoAmendRiskParams();
                }
                return this.mMotoAmendRiskParams;
            }
        }
        
        public virtual MotoAWAPCheckNEWExpectedValues MotoAWAPCheckNEWExpectedValues
        {
            get
            {
                if ((this.mMotoAWAPCheckNEWExpectedValues == null))
                {
                    this.mMotoAWAPCheckNEWExpectedValues = new MotoAWAPCheckNEWExpectedValues();
                }
                return this.mMotoAWAPCheckNEWExpectedValues;
            }
        }
        
        public virtual MotoAWAPCheckTAXExpectedValues MotoAWAPCheckTAXExpectedValues
        {
            get
            {
                if ((this.mMotoAWAPCheckTAXExpectedValues == null))
                {
                    this.mMotoAWAPCheckTAXExpectedValues = new MotoAWAPCheckTAXExpectedValues();
                }
                return this.mMotoAWAPCheckTAXExpectedValues;
            }
        }
        
        public virtual MotoCancelPolicyParams MotoCancelPolicyParams
        {
            get
            {
                if ((this.mMotoCancelPolicyParams == null))
                {
                    this.mMotoCancelPolicyParams = new MotoCancelPolicyParams();
                }
                return this.mMotoCancelPolicyParams;
            }
        }
        
        public virtual MotoCheckAWAPpremiumExpectedValues MotoCheckAWAPpremiumExpectedValues
        {
            get
            {
                if ((this.mMotoCheckAWAPpremiumExpectedValues == null))
                {
                    this.mMotoCheckAWAPpremiumExpectedValues = new MotoCheckAWAPpremiumExpectedValues();
                }
                return this.mMotoCheckAWAPpremiumExpectedValues;
            }
        }
        
        public virtual MotoCheckChangedPremiumExpectedValues MotoCheckChangedPremiumExpectedValues
        {
            get
            {
                if ((this.mMotoCheckChangedPremiumExpectedValues == null))
                {
                    this.mMotoCheckChangedPremiumExpectedValues = new MotoCheckChangedPremiumExpectedValues();
                }
                return this.mMotoCheckChangedPremiumExpectedValues;
            }
        }
        
        public virtual MotoCheckPolicyStatusExpectedValues MotoCheckPolicyStatusExpectedValues
        {
            get
            {
                if ((this.mMotoCheckPolicyStatusExpectedValues == null))
                {
                    this.mMotoCheckPolicyStatusExpectedValues = new MotoCheckPolicyStatusExpectedValues();
                }
                return this.mMotoCheckPolicyStatusExpectedValues;
            }
        }
        
        public virtual MotoCopyCheckCarExpectedValues MotoCopyCheckCarExpectedValues
        {
            get
            {
                if ((this.mMotoCopyCheckCarExpectedValues == null))
                {
                    this.mMotoCopyCheckCarExpectedValues = new MotoCopyCheckCarExpectedValues();
                }
                return this.mMotoCopyCheckCarExpectedValues;
            }
        }
        
        public virtual MotoCopyCheckProposerExpectedValues MotoCopyCheckProposerExpectedValues
        {
            get
            {
                if ((this.mMotoCopyCheckProposerExpectedValues == null))
                {
                    this.mMotoCopyCheckProposerExpectedValues = new MotoCopyCheckProposerExpectedValues();
                }
                return this.mMotoCopyCheckProposerExpectedValues;
            }
        }
        
        public virtual MotoCopyFinishParams MotoCopyFinishParams
        {
            get
            {
                if ((this.mMotoCopyFinishParams == null))
                {
                    this.mMotoCopyFinishParams = new MotoCopyFinishParams();
                }
                return this.mMotoCopyFinishParams;
            }
        }
        
        public virtual MotoFinishMTAParams MotoFinishMTAParams
        {
            get
            {
                if ((this.mMotoFinishMTAParams == null))
                {
                    this.mMotoFinishMTAParams = new MotoFinishMTAParams();
                }
                return this.mMotoFinishMTAParams;
            }
        }
        
        public virtual MotoInceptionDateParams MotoInceptionDateParams
        {
            get
            {
                if ((this.mMotoInceptionDateParams == null))
                {
                    this.mMotoInceptionDateParams = new MotoInceptionDateParams();
                }
                return this.mMotoInceptionDateParams;
            }
        }
        
        public virtual MotoMTAAcceptParams MotoMTAAcceptParams
        {
            get
            {
                if ((this.mMotoMTAAcceptParams == null))
                {
                    this.mMotoMTAAcceptParams = new MotoMTAAcceptParams();
                }
                return this.mMotoMTAAcceptParams;
            }
        }
        
        public virtual MotoMTABeforeParams MotoMTABeforeParams
        {
            get
            {
                if ((this.mMotoMTABeforeParams == null))
                {
                    this.mMotoMTABeforeParams = new MotoMTABeforeParams();
                }
                return this.mMotoMTABeforeParams;
            }
        }
        
        public virtual MotoMTABefore2Params MotoMTABefore2Params
        {
            get
            {
                if ((this.mMotoMTABefore2Params == null))
                {
                    this.mMotoMTABefore2Params = new MotoMTABefore2Params();
                }
                return this.mMotoMTABefore2Params;
            }
        }
        
        public virtual MotoMTABeforeAcceptParams MotoMTABeforeAcceptParams
        {
            get
            {
                if ((this.mMotoMTABeforeAcceptParams == null))
                {
                    this.mMotoMTABeforeAcceptParams = new MotoMTABeforeAcceptParams();
                }
                return this.mMotoMTABeforeAcceptParams;
            }
        }
        
        public virtual MotoMTABeforeFinishParams MotoMTABeforeFinishParams
        {
            get
            {
                if ((this.mMotoMTABeforeFinishParams == null))
                {
                    this.mMotoMTABeforeFinishParams = new MotoMTABeforeFinishParams();
                }
                return this.mMotoMTABeforeFinishParams;
            }
        }
        
        public virtual MotoMTACheckCarExpectedValues MotoMTACheckCarExpectedValues
        {
            get
            {
                if ((this.mMotoMTACheckCarExpectedValues == null))
                {
                    this.mMotoMTACheckCarExpectedValues = new MotoMTACheckCarExpectedValues();
                }
                return this.mMotoMTACheckCarExpectedValues;
            }
        }
        
        public virtual MotoMTACheckNewValueExpectedValues MotoMTACheckNewValueExpectedValues
        {
            get
            {
                if ((this.mMotoMTACheckNewValueExpectedValues == null))
                {
                    this.mMotoMTACheckNewValueExpectedValues = new MotoMTACheckNewValueExpectedValues();
                }
                return this.mMotoMTACheckNewValueExpectedValues;
            }
        }
        
        public virtual MotoMTAConfirmPolicyParams MotoMTAConfirmPolicyParams
        {
            get
            {
                if ((this.mMotoMTAConfirmPolicyParams == null))
                {
                    this.mMotoMTAConfirmPolicyParams = new MotoMTAConfirmPolicyParams();
                }
                return this.mMotoMTAConfirmPolicyParams;
            }
        }
        
        public virtual MotoMTAMessageAfterDateExpectedValues MotoMTAMessageAfterDateExpectedValues
        {
            get
            {
                if ((this.mMotoMTAMessageAfterDateExpectedValues == null))
                {
                    this.mMotoMTAMessageAfterDateExpectedValues = new MotoMTAMessageAfterDateExpectedValues();
                }
                return this.mMotoMTAMessageAfterDateExpectedValues;
            }
        }
        
        public virtual MotoMTAMessageCancelledExpectedValues MotoMTAMessageCancelledExpectedValues
        {
            get
            {
                if ((this.mMotoMTAMessageCancelledExpectedValues == null))
                {
                    this.mMotoMTAMessageCancelledExpectedValues = new MotoMTAMessageCancelledExpectedValues();
                }
                return this.mMotoMTAMessageCancelledExpectedValues;
            }
        }
        
        public virtual MotoMTANoSaveParams MotoMTANoSaveParams
        {
            get
            {
                if ((this.mMotoMTANoSaveParams == null))
                {
                    this.mMotoMTANoSaveParams = new MotoMTANoSaveParams();
                }
                return this.mMotoMTANoSaveParams;
            }
        }
        
        public virtual MotoPolicyPersonParams MotoPolicyPersonParams
        {
            get
            {
                if ((this.mMotoPolicyPersonParams == null))
                {
                    this.mMotoPolicyPersonParams = new MotoPolicyPersonParams();
                }
                return this.mMotoPolicyPersonParams;
            }
        }
        
        public virtual MotoPostcodeLookupParams MotoPostcodeLookupParams
        {
            get
            {
                if ((this.mMotoPostcodeLookupParams == null))
                {
                    this.mMotoPostcodeLookupParams = new MotoPostcodeLookupParams();
                }
                return this.mMotoPostcodeLookupParams;
            }
        }
        
        public virtual MotoRebrokeSelectSchemeParams MotoRebrokeSelectSchemeParams
        {
            get
            {
                if ((this.mMotoRebrokeSelectSchemeParams == null))
                {
                    this.mMotoRebrokeSelectSchemeParams = new MotoRebrokeSelectSchemeParams();
                }
                return this.mMotoRebrokeSelectSchemeParams;
            }
        }
        
        public virtual MotoRegressAppParams MotoRegressAppParams
        {
            get
            {
                if ((this.mMotoRegressAppParams == null))
                {
                    this.mMotoRegressAppParams = new MotoRegressAppParams();
                }
                return this.mMotoRegressAppParams;
            }
        }
        
        public virtual MotoRenewalCheckRecordExpectedValues MotoRenewalCheckRecordExpectedValues
        {
            get
            {
                if ((this.mMotoRenewalCheckRecordExpectedValues == null))
                {
                    this.mMotoRenewalCheckRecordExpectedValues = new MotoRenewalCheckRecordExpectedValues();
                }
                return this.mMotoRenewalCheckRecordExpectedValues;
            }
        }
        
        public virtual MotoSearchCarParams MotoSearchCarParams
        {
            get
            {
                if ((this.mMotoSearchCarParams == null))
                {
                    this.mMotoSearchCarParams = new MotoSearchCarParams();
                }
                return this.mMotoSearchCarParams;
            }
        }
        
        public virtual MotoSelectHighwayPolicyParams MotoSelectHighwayPolicyParams
        {
            get
            {
                if ((this.mMotoSelectHighwayPolicyParams == null))
                {
                    this.mMotoSelectHighwayPolicyParams = new MotoSelectHighwayPolicyParams();
                }
                return this.mMotoSelectHighwayPolicyParams;
            }
        }
        
        public virtual MTADateParams MTADateParams
        {
            get
            {
                if ((this.mMTADateParams == null))
                {
                    this.mMTADateParams = new MTADateParams();
                }
                return this.mMTADateParams;
            }
        }
        
        public virtual MTAMessageBeforeCurrentExpectedValues MTAMessageBeforeCurrentExpectedValues
        {
            get
            {
                if ((this.mMTAMessageBeforeCurrentExpectedValues == null))
                {
                    this.mMTAMessageBeforeCurrentExpectedValues = new MTAMessageBeforeCurrentExpectedValues();
                }
                return this.mMTAMessageBeforeCurrentExpectedValues;
            }
        }
        
        public virtual OpenSiteForRenewalParams OpenSiteForRenewalParams
        {
            get
            {
                if ((this.mOpenSiteForRenewalParams == null))
                {
                    this.mOpenSiteForRenewalParams = new OpenSiteForRenewalParams();
                }
                return this.mOpenSiteForRenewalParams;
            }
        }
        
        public virtual PostcodeLookupExpectedValues PostcodeLookupExpectedValues
        {
            get
            {
                if ((this.mPostcodeLookupExpectedValues == null))
                {
                    this.mPostcodeLookupExpectedValues = new PostcodeLookupExpectedValues();
                }
                return this.mPostcodeLookupExpectedValues;
            }
        }
        
        public virtual QuoteResultsParams QuoteResultsParams
        {
            get
            {
                if ((this.mQuoteResultsParams == null))
                {
                    this.mQuoteResultsParams = new QuoteResultsParams();
                }
                return this.mQuoteResultsParams;
            }
        }
        
        public virtual RebrokeAlternativeFinishParams RebrokeAlternativeFinishParams
        {
            get
            {
                if ((this.mRebrokeAlternativeFinishParams == null))
                {
                    this.mRebrokeAlternativeFinishParams = new RebrokeAlternativeFinishParams();
                }
                return this.mRebrokeAlternativeFinishParams;
            }
        }
        
        public virtual RebrokeAlternativeFinish_1Params RebrokeAlternativeFinish_1Params
        {
            get
            {
                if ((this.mRebrokeAlternativeFinish_1Params == null))
                {
                    this.mRebrokeAlternativeFinish_1Params = new RebrokeAlternativeFinish_1Params();
                }
                return this.mRebrokeAlternativeFinish_1Params;
            }
        }
        
        public virtual RebrokeAlternativeRenewParams RebrokeAlternativeRenewParams
        {
            get
            {
                if ((this.mRebrokeAlternativeRenewParams == null))
                {
                    this.mRebrokeAlternativeRenewParams = new RebrokeAlternativeRenewParams();
                }
                return this.mRebrokeAlternativeRenewParams;
            }
        }
        
        public virtual RebrokeAlternativeRenew_1Params RebrokeAlternativeRenew_1Params
        {
            get
            {
                if ((this.mRebrokeAlternativeRenew_1Params == null))
                {
                    this.mRebrokeAlternativeRenew_1Params = new RebrokeAlternativeRenew_1Params();
                }
                return this.mRebrokeAlternativeRenew_1Params;
            }
        }
        
        public virtual RecordedMethod2Params RecordedMethod2Params
        {
            get
            {
                if ((this.mRecordedMethod2Params == null))
                {
                    this.mRecordedMethod2Params = new RecordedMethod2Params();
                }
                return this.mRecordedMethod2Params;
            }
        }
        
        public virtual RecordedMethod3Params RecordedMethod3Params
        {
            get
            {
                if ((this.mRecordedMethod3Params == null))
                {
                    this.mRecordedMethod3Params = new RecordedMethod3Params();
                }
                return this.mRecordedMethod3Params;
            }
        }
        
        public virtual RecordedMethod5Params RecordedMethod5Params
        {
            get
            {
                if ((this.mRecordedMethod5Params == null))
                {
                    this.mRecordedMethod5Params = new RecordedMethod5Params();
                }
                return this.mRecordedMethod5Params;
            }
        }
        
        public virtual RegistryHighwayParams RegistryHighwayParams
        {
            get
            {
                if ((this.mRegistryHighwayParams == null))
                {
                    this.mRegistryHighwayParams = new RegistryHighwayParams();
                }
                return this.mRegistryHighwayParams;
            }
        }
        
        public virtual RegressAppDateParams RegressAppDateParams
        {
            get
            {
                if ((this.mRegressAppDateParams == null))
                {
                    this.mRegressAppDateParams = new RegressAppDateParams();
                }
                return this.mRegressAppDateParams;
            }
        }
        
        public virtual RenewalAfterMTA1Params RenewalAfterMTA1Params
        {
            get
            {
                if ((this.mRenewalAfterMTA1Params == null))
                {
                    this.mRenewalAfterMTA1Params = new RenewalAfterMTA1Params();
                }
                return this.mRenewalAfterMTA1Params;
            }
        }
        
        public virtual RenewalCheckInvitedExpectedValues RenewalCheckInvitedExpectedValues
        {
            get
            {
                if ((this.mRenewalCheckInvitedExpectedValues == null))
                {
                    this.mRenewalCheckInvitedExpectedValues = new RenewalCheckInvitedExpectedValues();
                }
                return this.mRenewalCheckInvitedExpectedValues;
            }
        }
        
        public virtual RenewalCheckStatusExpectedValues RenewalCheckStatusExpectedValues
        {
            get
            {
                if ((this.mRenewalCheckStatusExpectedValues == null))
                {
                    this.mRenewalCheckStatusExpectedValues = new RenewalCheckStatusExpectedValues();
                }
                return this.mRenewalCheckStatusExpectedValues;
            }
        }
        
        public virtual RenewalLoaderRunParams RenewalLoaderRunParams
        {
            get
            {
                if ((this.mRenewalLoaderRunParams == null))
                {
                    this.mRenewalLoaderRunParams = new RenewalLoaderRunParams();
                }
                return this.mRenewalLoaderRunParams;
            }
        }
        
        public virtual RenewalModuleDisplayParams RenewalModuleDisplayParams
        {
            get
            {
                if ((this.mRenewalModuleDisplayParams == null))
                {
                    this.mRenewalModuleDisplayParams = new RenewalModuleDisplayParams();
                }
                return this.mRenewalModuleDisplayParams;
            }
        }
        
        public virtual RenewalModuleEDIParams RenewalModuleEDIParams
        {
            get
            {
                if ((this.mRenewalModuleEDIParams == null))
                {
                    this.mRenewalModuleEDIParams = new RenewalModuleEDIParams();
                }
                return this.mRenewalModuleEDIParams;
            }
        }
        
        public virtual RenewalModuleFilterMotoParams RenewalModuleFilterMotoParams
        {
            get
            {
                if ((this.mRenewalModuleFilterMotoParams == null))
                {
                    this.mRenewalModuleFilterMotoParams = new RenewalModuleFilterMotoParams();
                }
                return this.mRenewalModuleFilterMotoParams;
            }
        }
        
        public virtual RenewalModuleRenew_1Params RenewalModuleRenew_1Params
        {
            get
            {
                if ((this.mRenewalModuleRenew_1Params == null))
                {
                    this.mRenewalModuleRenew_1Params = new RenewalModuleRenew_1Params();
                }
                return this.mRenewalModuleRenew_1Params;
            }
        }
        
        public virtual SaveWithoutPremiumParams SaveWithoutPremiumParams
        {
            get
            {
                if ((this.mSaveWithoutPremiumParams == null))
                {
                    this.mSaveWithoutPremiumParams = new SaveWithoutPremiumParams();
                }
                return this.mSaveWithoutPremiumParams;
            }
        }
        
        public virtual SelectHomeTypeParams SelectHomeTypeParams
        {
            get
            {
                if ((this.mSelectHomeTypeParams == null))
                {
                    this.mSelectHomeTypeParams = new SelectHomeTypeParams();
                }
                return this.mSelectHomeTypeParams;
            }
        }
        
        public virtual SelectMotoPolicyParams SelectMotoPolicyParams
        {
            get
            {
                if ((this.mSelectMotoPolicyParams == null))
                {
                    this.mSelectMotoPolicyParams = new SelectMotoPolicyParams();
                }
                return this.mSelectMotoPolicyParams;
            }
        }
        
        public virtual SelectNextTransactionParams SelectNextTransactionParams
        {
            get
            {
                if ((this.mSelectNextTransactionParams == null))
                {
                    this.mSelectNextTransactionParams = new SelectNextTransactionParams();
                }
                return this.mSelectNextTransactionParams;
            }
        }
        
        public virtual SelectPolicyQuoteParams SelectPolicyQuoteParams
        {
            get
            {
                if ((this.mSelectPolicyQuoteParams == null))
                {
                    this.mSelectPolicyQuoteParams = new SelectPolicyQuoteParams();
                }
                return this.mSelectPolicyQuoteParams;
            }
        }
        
        public virtual testPrintParams testPrintParams
        {
            get
            {
                if ((this.mtestPrintParams == null))
                {
                    this.mtestPrintParams = new testPrintParams();
                }
                return this.mtestPrintParams;
            }
        }
        
        public UITheAgencyManagerSignWindow UITheAgencyManagerSignWindow
        {
            get
            {
                if ((this.mUITheAgencyManagerSignWindow == null))
                {
                    this.mUITheAgencyManagerSignWindow = new UITheAgencyManagerSignWindow();
                }
                return this.mUITheAgencyManagerSignWindow;
            }
        }
        
        public UITheAgencyManagerWindow UITheAgencyManagerWindow
        {
            get
            {
                if ((this.mUITheAgencyManagerWindow == null))
                {
                    this.mUITheAgencyManagerWindow = new UITheAgencyManagerWindow();
                }
                return this.mUITheAgencyManagerWindow;
            }
        }
        
        public UITheAgencyManagerWindow1 UITheAgencyManagerWindow1
        {
            get
            {
                if ((this.mUITheAgencyManagerWindow1 == null))
                {
                    this.mUITheAgencyManagerWindow1 = new UITheAgencyManagerWindow1();
                }
                return this.mUITheAgencyManagerWindow1;
            }
        }
        
        public UICustomertxt1tdsfsWindow UICustomertxt1tdsfsWindow
        {
            get
            {
                if ((this.mUICustomertxt1tdsfsWindow == null))
                {
                    this.mUICustomertxt1tdsfsWindow = new UICustomertxt1tdsfsWindow();
                }
                return this.mUICustomertxt1tdsfsWindow;
            }
        }
        
        public UIAssignClientNumberWindow UIAssignClientNumberWindow
        {
            get
            {
                if ((this.mUIAssignClientNumberWindow == null))
                {
                    this.mUIAssignClientNumberWindow = new UIAssignClientNumberWindow();
                }
                return this.mUIAssignClientNumberWindow;
            }
        }
        
        public UIVerifyWindow UIVerifyWindow
        {
            get
            {
                if ((this.mUIVerifyWindow == null))
                {
                    this.mUIVerifyWindow = new UIVerifyWindow();
                }
                return this.mUIVerifyWindow;
            }
        }
        
        public UISelectaPolicyNumberWindow UISelectaPolicyNumberWindow
        {
            get
            {
                if ((this.mUISelectaPolicyNumberWindow == null))
                {
                    this.mUISelectaPolicyNumberWindow = new UISelectaPolicyNumberWindow();
                }
                return this.mUISelectaPolicyNumberWindow;
            }
        }
        
        public UICurrentOrFutureWindow UICurrentOrFutureWindow
        {
            get
            {
                if ((this.mUICurrentOrFutureWindow == null))
                {
                    this.mUICurrentOrFutureWindow = new UICurrentOrFutureWindow();
                }
                return this.mUICurrentOrFutureWindow;
            }
        }
        
        public UIProposerTypeWindow UIProposerTypeWindow
        {
            get
            {
                if ((this.mUIProposerTypeWindow == null))
                {
                    this.mUIProposerTypeWindow = new UIProposerTypeWindow();
                }
                return this.mUIProposerTypeWindow;
            }
        }
        
        public UIProposerDetailsWindow UIProposerDetailsWindow
        {
            get
            {
                if ((this.mUIProposerDetailsWindow == null))
                {
                    this.mUIProposerDetailsWindow = new UIProposerDetailsWindow();
                }
                return this.mUIProposerDetailsWindow;
            }
        }
        
        public UISearchResultForB338TWindow UISearchResultForB338TWindow
        {
            get
            {
                if ((this.mUISearchResultForB338TWindow == null))
                {
                    this.mUISearchResultForB338TWindow = new UISearchResultForB338TWindow();
                }
                return this.mUISearchResultForB338TWindow;
            }
        }
        
        public UIDriverDetailsWindow UIDriverDetailsWindow
        {
            get
            {
                if ((this.mUIDriverDetailsWindow == null))
                {
                    this.mUIDriverDetailsWindow = new UIDriverDetailsWindow();
                }
                return this.mUIDriverDetailsWindow;
            }
        }
        
        public UIVehicleLookupWindow UIVehicleLookupWindow
        {
            get
            {
                if ((this.mUIVehicleLookupWindow == null))
                {
                    this.mUIVehicleLookupWindow = new UIVehicleLookupWindow();
                }
                return this.mUIVehicleLookupWindow;
            }
        }
        
        public UIInsurEtamWindow UIInsurEtamWindow
        {
            get
            {
                if ((this.mUIInsurEtamWindow == null))
                {
                    this.mUIInsurEtamWindow = new UIInsurEtamWindow();
                }
                return this.mUIInsurEtamWindow;
            }
        }
        
        public UICreditCheckWindow UICreditCheckWindow
        {
            get
            {
                if ((this.mUICreditCheckWindow == null))
                {
                    this.mUICreditCheckWindow = new UICreditCheckWindow();
                }
                return this.mUICreditCheckWindow;
            }
        }
        
        public UIQuoteResultsWindow UIQuoteResultsWindow
        {
            get
            {
                if ((this.mUIQuoteResultsWindow == null))
                {
                    this.mUIQuoteResultsWindow = new UIQuoteResultsWindow();
                }
                return this.mUIQuoteResultsWindow;
            }
        }
        
        public UIInsurEtamWindow1 UIInsurEtamWindow1
        {
            get
            {
                if ((this.mUIInsurEtamWindow1 == null))
                {
                    this.mUIInsurEtamWindow1 = new UIInsurEtamWindow1();
                }
                return this.mUIInsurEtamWindow1;
            }
        }
        
        public UIPaymentMethodsWindow UIPaymentMethodsWindow
        {
            get
            {
                if ((this.mUIPaymentMethodsWindow == null))
                {
                    this.mUIPaymentMethodsWindow = new UIPaymentMethodsWindow();
                }
                return this.mUIPaymentMethodsWindow;
            }
        }
        
        public UIConfirmDocumentsWindow UIConfirmDocumentsWindow
        {
            get
            {
                if ((this.mUIConfirmDocumentsWindow == null))
                {
                    this.mUIConfirmDocumentsWindow = new UIConfirmDocumentsWindow();
                }
                return this.mUIConfirmDocumentsWindow;
            }
        }
        
        public UIPolicyDateTimeWindow UIPolicyDateTimeWindow
        {
            get
            {
                if ((this.mUIPolicyDateTimeWindow == null))
                {
                    this.mUIPolicyDateTimeWindow = new UIPolicyDateTimeWindow();
                }
                return this.mUIPolicyDateTimeWindow;
            }
        }
        
        public UISavethefileasWindow UISavethefileasWindow
        {
            get
            {
                if ((this.mUISavethefileasWindow == null))
                {
                    this.mUISavethefileasWindow = new UISavethefileasWindow();
                }
                return this.mUISavethefileasWindow;
            }
        }
        
        public UIPointOfSaleWindow UIPointOfSaleWindow
        {
            get
            {
                if ((this.mUIPointOfSaleWindow == null))
                {
                    this.mUIPointOfSaleWindow = new UIPointOfSaleWindow();
                }
                return this.mUIPointOfSaleWindow;
            }
        }
        
        public UIImporttoTAMWindow UIImporttoTAMWindow
        {
            get
            {
                if ((this.mUIImporttoTAMWindow == null))
                {
                    this.mUIImporttoTAMWindow = new UIImporttoTAMWindow();
                }
                return this.mUIImporttoTAMWindow;
            }
        }
        
        public UITransactiontoinsertWindow UITransactiontoinsertWindow
        {
            get
            {
                if ((this.mUITransactiontoinsertWindow == null))
                {
                    this.mUITransactiontoinsertWindow = new UITransactiontoinsertWindow();
                }
                return this.mUITransactiontoinsertWindow;
            }
        }
        
        public UITamxml7Window UITamxml7Window
        {
            get
            {
                if ((this.mUITamxml7Window == null))
                {
                    this.mUITamxml7Window = new UITamxml7Window();
                }
                return this.mUITamxml7Window;
            }
        }
        
        public UIPolicyrtyertWindow UIPolicyrtyertWindow
        {
            get
            {
                if ((this.mUIPolicyrtyertWindow == null))
                {
                    this.mUIPolicyrtyertWindow = new UIPolicyrtyertWindow();
                }
                return this.mUIPolicyrtyertWindow;
            }
        }
        
        public UISelectTaminsurerforiWindow UISelectTaminsurerforiWindow
        {
            get
            {
                if ((this.mUISelectTaminsurerforiWindow == null))
                {
                    this.mUISelectTaminsurerforiWindow = new UISelectTaminsurerforiWindow();
                }
                return this.mUISelectTaminsurerforiWindow;
            }
        }
        
        public UIPolicyautotestWindow UIPolicyautotestWindow
        {
            get
            {
                if ((this.mUIPolicyautotestWindow == null))
                {
                    this.mUIPolicyautotestWindow = new UIPolicyautotestWindow();
                }
                return this.mUIPolicyautotestWindow;
            }
        }
        
        public UIViewQuoteDetailsWindow UIViewQuoteDetailsWindow
        {
            get
            {
                if ((this.mUIViewQuoteDetailsWindow == null))
                {
                    this.mUIViewQuoteDetailsWindow = new UIViewQuoteDetailsWindow();
                }
                return this.mUIViewQuoteDetailsWindow;
            }
        }
        
        public UIDemandsNeedsMotorComWindow UIDemandsNeedsMotorComWindow
        {
            get
            {
                if ((this.mUIDemandsNeedsMotorComWindow == null))
                {
                    this.mUIDemandsNeedsMotorComWindow = new UIDemandsNeedsMotorComWindow();
                }
                return this.mUIDemandsNeedsMotorComWindow;
            }
        }
        
        public UIItemWindow39 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow39();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow117 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow117();
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIConfirmSaveAsWindow UIConfirmSaveAsWindow
        {
            get
            {
                if ((this.mUIConfirmSaveAsWindow == null))
                {
                    this.mUIConfirmSaveAsWindow = new UIConfirmSaveAsWindow();
                }
                return this.mUIConfirmSaveAsWindow;
            }
        }
        
        public UIQuotesResultsWindow UIQuotesResultsWindow
        {
            get
            {
                if ((this.mUIQuotesResultsWindow == null))
                {
                    this.mUIQuotesResultsWindow = new UIQuotesResultsWindow();
                }
                return this.mUIQuotesResultsWindow;
            }
        }
        
        public UIBrokerAddonsWindow UIBrokerAddonsWindow
        {
            get
            {
                if ((this.mUIBrokerAddonsWindow == null))
                {
                    this.mUIBrokerAddonsWindow = new UIBrokerAddonsWindow();
                }
                return this.mUIBrokerAddonsWindow;
            }
        }
        
        public UIPolicyDetailConfirmaWindow UIPolicyDetailConfirmaWindow
        {
            get
            {
                if ((this.mUIPolicyDetailConfirmaWindow == null))
                {
                    this.mUIPolicyDetailConfirmaWindow = new UIPolicyDetailConfirmaWindow();
                }
                return this.mUIPolicyDetailConfirmaWindow;
            }
        }
        
        public UIKV31Window UIKV31Window
        {
            get
            {
                if ((this.mUIKV31Window == null))
                {
                    this.mUIKV31Window = new UIKV31Window();
                }
                return this.mUIKV31Window;
            }
        }
        
        public UIBarcodePrinterWindow UIBarcodePrinterWindow
        {
            get
            {
                if ((this.mUIBarcodePrinterWindow == null))
                {
                    this.mUIBarcodePrinterWindow = new UIBarcodePrinterWindow();
                }
                return this.mUIBarcodePrinterWindow;
            }
        }
        
        public UIDemandsNeedsHouseholWindow UIDemandsNeedsHouseholWindow
        {
            get
            {
                if ((this.mUIDemandsNeedsHouseholWindow == null))
                {
                    this.mUIDemandsNeedsHouseholWindow = new UIDemandsNeedsHouseholWindow();
                }
                return this.mUIDemandsNeedsHouseholWindow;
            }
        }
        
        public UIPolicyWindow UIPolicyWindow
        {
            get
            {
                if ((this.mUIPolicyWindow == null))
                {
                    this.mUIPolicyWindow = new UIPolicyWindow();
                }
                return this.mUIPolicyWindow;
            }
        }
        
        public UIAcceptWithAnotherProWindow UIAcceptWithAnotherProWindow
        {
            get
            {
                if ((this.mUIAcceptWithAnotherProWindow == null))
                {
                    this.mUIAcceptWithAnotherProWindow = new UIAcceptWithAnotherProWindow();
                }
                return this.mUIAcceptWithAnotherProWindow;
            }
        }
        
        public UIQuoteSelectListWindow UIQuoteSelectListWindow
        {
            get
            {
                if ((this.mUIQuoteSelectListWindow == null))
                {
                    this.mUIQuoteSelectListWindow = new UIQuoteSelectListWindow();
                }
                return this.mUIQuoteSelectListWindow;
            }
        }
        
        public UIUpdateGeneralTransacWindow UIUpdateGeneralTransacWindow
        {
            get
            {
                if ((this.mUIUpdateGeneralTransacWindow == null))
                {
                    this.mUIUpdateGeneralTransacWindow = new UIUpdateGeneralTransacWindow();
                }
                return this.mUIUpdateGeneralTransacWindow;
            }
        }
        
        public UITransactionListWindow UITransactionListWindow
        {
            get
            {
                if ((this.mUITransactionListWindow == null))
                {
                    this.mUITransactionListWindow = new UITransactionListWindow();
                }
                return this.mUITransactionListWindow;
            }
        }
        
        public UIOverridePremiumWindow UIOverridePremiumWindow
        {
            get
            {
                if ((this.mUIOverridePremiumWindow == null))
                {
                    this.mUIOverridePremiumWindow = new UIOverridePremiumWindow();
                }
                return this.mUIOverridePremiumWindow;
            }
        }
        
        public UIWhichpolicywouldyoulWindow UIWhichpolicywouldyoulWindow
        {
            get
            {
                if ((this.mUIWhichpolicywouldyoulWindow == null))
                {
                    this.mUIWhichpolicywouldyoulWindow = new UIWhichpolicywouldyoulWindow();
                }
                return this.mUIWhichpolicywouldyoulWindow;
            }
        }
        
        public UIProductSelectionWindow UIProductSelectionWindow
        {
            get
            {
                if ((this.mUIProductSelectionWindow == null))
                {
                    this.mUIProductSelectionWindow = new UIProductSelectionWindow();
                }
                return this.mUIProductSelectionWindow;
            }
        }
        
        public UITamXMLImportCustomerWindow UITamXMLImportCustomerWindow
        {
            get
            {
                if ((this.mUITamXMLImportCustomerWindow == null))
                {
                    this.mUITamXMLImportCustomerWindow = new UITamXMLImportCustomerWindow();
                }
                return this.mUITamXMLImportCustomerWindow;
            }
        }
        
        public UIPleaseselectWHOtofolWindow UIPleaseselectWHOtofolWindow
        {
            get
            {
                if ((this.mUIPleaseselectWHOtofolWindow == null))
                {
                    this.mUIPleaseselectWHOtofolWindow = new UIPleaseselectWHOtofolWindow();
                }
                return this.mUIPleaseselectWHOtofolWindow;
            }
        }
        
        public UIMidTermAdjustmentsWindow UIMidTermAdjustmentsWindow
        {
            get
            {
                if ((this.mUIMidTermAdjustmentsWindow == null))
                {
                    this.mUIMidTermAdjustmentsWindow = new UIMidTermAdjustmentsWindow();
                }
                return this.mUIMidTermAdjustmentsWindow;
            }
        }
        
        public UIMTAEffectiveDatesWindow UIMTAEffectiveDatesWindow
        {
            get
            {
                if ((this.mUIMTAEffectiveDatesWindow == null))
                {
                    this.mUIMTAEffectiveDatesWindow = new UIMTAEffectiveDatesWindow();
                }
                return this.mUIMTAEffectiveDatesWindow;
            }
        }
        
        public UIPolicygdfhdfdfghgdfWindow UIPolicygdfhdfdfghgdfWindow
        {
            get
            {
                if ((this.mUIPolicygdfhdfdfghgdfWindow == null))
                {
                    this.mUIPolicygdfhdfdfghgdfWindow = new UIPolicygdfhdfdfghgdfWindow();
                }
                return this.mUIPolicygdfhdfdfghgdfWindow;
            }
        }
        
        public UIConfirmMTAWindow UIConfirmMTAWindow
        {
            get
            {
                if ((this.mUIConfirmMTAWindow == null))
                {
                    this.mUIConfirmMTAWindow = new UIConfirmMTAWindow();
                }
                return this.mUIConfirmMTAWindow;
            }
        }
        
        public UIClaimsWindow UIClaimsWindow
        {
            get
            {
                if ((this.mUIClaimsWindow == null))
                {
                    this.mUIClaimsWindow = new UIClaimsWindow();
                }
                return this.mUIClaimsWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UITestProject7Window UITestProject7Window
        {
            get
            {
                if ((this.mUITestProject7Window == null))
                {
                    this.mUITestProject7Window = new UITestProject7Window();
                }
                return this.mUITestProject7Window;
            }
        }
        
        public UIRegistryEditorWindow UIRegistryEditorWindow
        {
            get
            {
                if ((this.mUIRegistryEditorWindow == null))
                {
                    this.mUIRegistryEditorWindow = new UIRegistryEditorWindow();
                }
                return this.mUIRegistryEditorWindow;
            }
        }
        
        public UIBlankPageMicrosoftInWindow UIBlankPageMicrosoftInWindow
        {
            get
            {
                if ((this.mUIBlankPageMicrosoftInWindow == null))
                {
                    this.mUIBlankPageMicrosoftInWindow = new UIBlankPageMicrosoftInWindow();
                }
                return this.mUIBlankPageMicrosoftInWindow;
            }
        }
        
        public UIWindowsSecurityWindow UIWindowsSecurityWindow
        {
            get
            {
                if ((this.mUIWindowsSecurityWindow == null))
                {
                    this.mUIWindowsSecurityWindow = new UIWindowsSecurityWindow();
                }
                return this.mUIWindowsSecurityWindow;
            }
        }
        
        public UIInsurEcomSystemMaintWindow UIInsurEcomSystemMaintWindow
        {
            get
            {
                if ((this.mUIInsurEcomSystemMaintWindow == null))
                {
                    this.mUIInsurEcomSystemMaintWindow = new UIInsurEcomSystemMaintWindow();
                }
                return this.mUIInsurEcomSystemMaintWindow;
            }
        }
        
        public UISearchResultForBN16BWindow UISearchResultForBN16BWindow
        {
            get
            {
                if ((this.mUISearchResultForBN16BWindow == null))
                {
                    this.mUISearchResultForBN16BWindow = new UISearchResultForBN16BWindow();
                }
                return this.mUISearchResultForBN16BWindow;
            }
        }
        
        public UIRunWindow UIRunWindow
        {
            get
            {
                if ((this.mUIRunWindow == null))
                {
                    this.mUIRunWindow = new UIRunWindow();
                }
                return this.mUIRunWindow;
            }
        }
        
        public UIRegressIETamPolicyWindow UIRegressIETamPolicyWindow
        {
            get
            {
                if ((this.mUIRegressIETamPolicyWindow == null))
                {
                    this.mUIRegressIETamPolicyWindow = new UIRegressIETamPolicyWindow();
                }
                return this.mUIRegressIETamPolicyWindow;
            }
        }
        
        public UIRenewalLoaderWindow UIRenewalLoaderWindow
        {
            get
            {
                if ((this.mUIRenewalLoaderWindow == null))
                {
                    this.mUIRenewalLoaderWindow = new UIRenewalLoaderWindow();
                }
                return this.mUIRenewalLoaderWindow;
            }
        }
        
        public UIIETAMRenewalsWindow UIIETAMRenewalsWindow
        {
            get
            {
                if ((this.mUIIETAMRenewalsWindow == null))
                {
                    this.mUIIETAMRenewalsWindow = new UIIETAMRenewalsWindow();
                }
                return this.mUIIETAMRenewalsWindow;
            }
        }
        
        public UIPoliciesAutoRenewedAWindow UIPoliciesAutoRenewedAWindow
        {
            get
            {
                if ((this.mUIPoliciesAutoRenewedAWindow == null))
                {
                    this.mUIPoliciesAutoRenewedAWindow = new UIPoliciesAutoRenewedAWindow();
                }
                return this.mUIPoliciesAutoRenewedAWindow;
            }
        }
        
        public UIRenewalSearchWindow UIRenewalSearchWindow
        {
            get
            {
                if ((this.mUIRenewalSearchWindow == null))
                {
                    this.mUIRenewalSearchWindow = new UIRenewalSearchWindow();
                }
                return this.mUIRenewalSearchWindow;
            }
        }
        
        public UICustomerggggggggggggWindow UICustomerggggggggggggWindow
        {
            get
            {
                if ((this.mUICustomerggggggggggggWindow == null))
                {
                    this.mUICustomerggggggggggggWindow = new UICustomerggggggggggggWindow();
                }
                return this.mUICustomerggggggggggggWindow;
            }
        }
        
        public UIFilterRenewalRecordsWindow UIFilterRenewalRecordsWindow
        {
            get
            {
                if ((this.mUIFilterRenewalRecordsWindow == null))
                {
                    this.mUIFilterRenewalRecordsWindow = new UIFilterRenewalRecordsWindow();
                }
                return this.mUIFilterRenewalRecordsWindow;
            }
        }
        
        public UIAUTO1871001Window UIAUTO1871001Window
        {
            get
            {
                if ((this.mUIAUTO1871001Window == null))
                {
                    this.mUIAUTO1871001Window = new UIAUTO1871001Window();
                }
                return this.mUIAUTO1871001Window;
            }
        }
        
        public UIPrintDocumentsWindow UIPrintDocumentsWindow
        {
            get
            {
                if ((this.mUIPrintDocumentsWindow == null))
                {
                    this.mUIPrintDocumentsWindow = new UIPrintDocumentsWindow();
                }
                return this.mUIPrintDocumentsWindow;
            }
        }
        
        public UIConfirmWindow2 UIConfirmWindow
        {
            get
            {
                if ((this.mUIConfirmWindow == null))
                {
                    this.mUIConfirmWindow = new UIConfirmWindow2();
                }
                return this.mUIConfirmWindow;
            }
        }
        
        public UIMTASuccessfulWindow UIMTASuccessfulWindow
        {
            get
            {
                if ((this.mUIMTASuccessfulWindow == null))
                {
                    this.mUIMTASuccessfulWindow = new UIMTASuccessfulWindow();
                }
                return this.mUIMTASuccessfulWindow;
            }
        }
        
        public UIRebrokeResultsScreenWindow UIRebrokeResultsScreenWindow
        {
            get
            {
                if ((this.mUIRebrokeResultsScreenWindow == null))
                {
                    this.mUIRebrokeResultsScreenWindow = new UIRebrokeResultsScreenWindow();
                }
                return this.mUIRebrokeResultsScreenWindow;
            }
        }
        
        public UIAUTO2081001Window UIAUTO2081001Window
        {
            get
            {
                if ((this.mUIAUTO2081001Window == null))
                {
                    this.mUIAUTO2081001Window = new UIAUTO2081001Window();
                }
                return this.mUIAUTO2081001Window;
            }
        }
        
        public UIAmendRiskWindow1 UIAmendRiskWindow
        {
            get
            {
                if ((this.mUIAmendRiskWindow == null))
                {
                    this.mUIAmendRiskWindow = new UIAmendRiskWindow1();
                }
                return this.mUIAmendRiskWindow;
            }
        }
        
        public UIAmendRiskResultsWindow UIAmendRiskResultsWindow
        {
            get
            {
                if ((this.mUIAmendRiskResultsWindow == null))
                {
                    this.mUIAmendRiskResultsWindow = new UIAmendRiskResultsWindow();
                }
                return this.mUIAmendRiskResultsWindow;
            }
        }
        
        public UIAUTO2211001Window UIAUTO2211001Window
        {
            get
            {
                if ((this.mUIAUTO2211001Window == null))
                {
                    this.mUIAUTO2211001Window = new UIAUTO2211001Window();
                }
                return this.mUIAUTO2211001Window;
            }
        }
        
        public UIRenewalAcceptWindow UIRenewalAcceptWindow
        {
            get
            {
                if ((this.mUIRenewalAcceptWindow == null))
                {
                    this.mUIRenewalAcceptWindow = new UIRenewalAcceptWindow();
                }
                return this.mUIRenewalAcceptWindow;
            }
        }
        
        public UIInsurerNoticeRevaluaWindow UIInsurerNoticeRevaluaWindow
        {
            get
            {
                if ((this.mUIInsurerNoticeRevaluaWindow == null))
                {
                    this.mUIInsurerNoticeRevaluaWindow = new UIInsurerNoticeRevaluaWindow();
                }
                return this.mUIInsurerNoticeRevaluaWindow;
            }
        }
        
        public UIRenewalsNewBusinessAWindow UIRenewalsNewBusinessAWindow
        {
            get
            {
                if ((this.mUIRenewalsNewBusinessAWindow == null))
                {
                    this.mUIRenewalsNewBusinessAWindow = new UIRenewalsNewBusinessAWindow();
                }
                return this.mUIRenewalsNewBusinessAWindow;
            }
        }
        
        public UIAUTO2251001Window UIAUTO2251001Window
        {
            get
            {
                if ((this.mUIAUTO2251001Window == null))
                {
                    this.mUIAUTO2251001Window = new UIAUTO2251001Window();
                }
                return this.mUIAUTO2251001Window;
            }
        }
        
        public UIHouseholdRenewalsAmeWindow UIHouseholdRenewalsAmeWindow
        {
            get
            {
                if ((this.mUIHouseholdRenewalsAmeWindow == null))
                {
                    this.mUIHouseholdRenewalsAmeWindow = new UIHouseholdRenewalsAmeWindow();
                }
                return this.mUIHouseholdRenewalsAmeWindow;
            }
        }
        
        public UICreditCheckAtRenewalWindow UICreditCheckAtRenewalWindow
        {
            get
            {
                if ((this.mUICreditCheckAtRenewalWindow == null))
                {
                    this.mUICreditCheckAtRenewalWindow = new UICreditCheckAtRenewalWindow();
                }
                return this.mUICreditCheckAtRenewalWindow;
            }
        }
        
        public UIHouseholdRenewalsAmeWindow1 UIHouseholdRenewalsAmeWindow1
        {
            get
            {
                if ((this.mUIHouseholdRenewalsAmeWindow1 == null))
                {
                    this.mUIHouseholdRenewalsAmeWindow1 = new UIHouseholdRenewalsAmeWindow1();
                }
                return this.mUIHouseholdRenewalsAmeWindow1;
            }
        }
        
        public UIAUTO2301001Window UIAUTO2301001Window
        {
            get
            {
                if ((this.mUIAUTO2301001Window == null))
                {
                    this.mUIAUTO2301001Window = new UIAUTO2301001Window();
                }
                return this.mUIAUTO2301001Window;
            }
        }
        
        public UIHouseholdRebrokeResuWindow UIHouseholdRebrokeResuWindow
        {
            get
            {
                if ((this.mUIHouseholdRebrokeResuWindow == null))
                {
                    this.mUIHouseholdRebrokeResuWindow = new UIHouseholdRebrokeResuWindow();
                }
                return this.mUIHouseholdRebrokeResuWindow;
            }
        }
        
        public UIAUTO2311001Window UIAUTO2311001Window
        {
            get
            {
                if ((this.mUIAUTO2311001Window == null))
                {
                    this.mUIAUTO2311001Window = new UIAUTO2311001Window();
                }
                return this.mUIAUTO2311001Window;
            }
        }
        
        public UIRenewalsNewBusinessAWindow1 UIRenewalsNewBusinessAWindow1
        {
            get
            {
                if ((this.mUIRenewalsNewBusinessAWindow1 == null))
                {
                    this.mUIRenewalsNewBusinessAWindow1 = new UIRenewalsNewBusinessAWindow1();
                }
                return this.mUIRenewalsNewBusinessAWindow1;
            }
        }
        
        public UISignonErrorWindow UISignonErrorWindow
        {
            get
            {
                if ((this.mUISignonErrorWindow == null))
                {
                    this.mUISignonErrorWindow = new UISignonErrorWindow();
                }
                return this.mUISignonErrorWindow;
            }
        }
        
        public UINewCustomerDAFS001Window UINewCustomerDAFS001Window
        {
            get
            {
                if ((this.mUINewCustomerDAFS001Window == null))
                {
                    this.mUINewCustomerDAFS001Window = new UINewCustomerDAFS001Window();
                }
                return this.mUINewCustomerDAFS001Window;
            }
        }
        
        public UIProgramManagerWindow UIProgramManagerWindow
        {
            get
            {
                if ((this.mUIProgramManagerWindow == null))
                {
                    this.mUIProgramManagerWindow = new UIProgramManagerWindow();
                }
                return this.mUIProgramManagerWindow;
            }
        }
        
        public UIMicrosoftWordViewerWindow UIMicrosoftWordViewerWindow
        {
            get
            {
                if ((this.mUIMicrosoftWordViewerWindow == null))
                {
                    this.mUIMicrosoftWordViewerWindow = new UIMicrosoftWordViewerWindow();
                }
                return this.mUIMicrosoftWordViewerWindow;
            }
        }
        
        public UIWindowsSecurityWindow1 UIWindowsSecurityWindow1
        {
            get
            {
                if ((this.mUIWindowsSecurityWindow1 == null))
                {
                    this.mUIWindowsSecurityWindow1 = new UIWindowsSecurityWindow1();
                }
                return this.mUIWindowsSecurityWindow1;
            }
        }
        
        public UIWarningWindow UIWarningWindow
        {
            get
            {
                if ((this.mUIWarningWindow == null))
                {
                    this.mUIWarningWindow = new UIWarningWindow();
                }
                return this.mUIWarningWindow;
            }
        }
        
        public UIErrorWindow UIErrorWindow
        {
            get
            {
                if ((this.mUIErrorWindow == null))
                {
                    this.mUIErrorWindow = new UIErrorWindow();
                }
                return this.mUIErrorWindow;
            }
        }
        #endregion
        
        #region Fields
        private AcceptEnabledExpectedValues mAcceptEnabledExpectedValues;
        
        private AddPolicyParams mAddPolicyParams;
        
        private AddressLookupHomeExpectedValues mAddressLookupHomeExpectedValues;
        
        private AmendDateBeforeMessageExpectedValues mAmendDateBeforeMessageExpectedValues;
        
        private AmendSelectQuoteParams mAmendSelectQuoteParams;
        
        private App_startedExpectedValues mApp_startedExpectedValues;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private AssertMethod2ExpectedValues mAssertMethod2ExpectedValues;
        
        private AssertMethod3ExpectedValues mAssertMethod3ExpectedValues;
        
        private AssertMethod4ExpectedValues mAssertMethod4ExpectedValues;
        
        private AssertMethod5ExpectedValues mAssertMethod5ExpectedValues;
        
        private AssertSelectPolicyFormExpectedValues mAssertSelectPolicyFormExpectedValues;
        
        private ChangeDatePolicyParams mChangeDatePolicyParams;
        
        private ChangePremiumParams mChangePremiumParams;
        
        private CheckAutoPrintExpectedValues mCheckAutoPrintExpectedValues;
        
        private CheckBillingScreenExpectedValues mCheckBillingScreenExpectedValues;
        
        private CheckDemandsDocExpectedValues mCheckDemandsDocExpectedValues;
        
        private CheckQuoteMessageExpectedValues mCheckQuoteMessageExpectedValues;
        
        private CoverDateBackCheckExpectedValues mCoverDateBackCheckExpectedValues;
        
        private Exit1Params mExit1Params;
        
        private ExitEnabledExpectedValues mExitEnabledExpectedValues;
        
        private FinishQuote1Params mFinishQuote1Params;
        
        private HomeAcceptQuote_1Params mHomeAcceptQuote_1Params;
        
        private HomeAddressLookupExpectedValues mHomeAddressLookupExpectedValues;
        
        private HomeAmendRenewParams mHomeAmendRenewParams;
        
        private HomeAmendRenewFinish_1Params mHomeAmendRenewFinish_1Params;
        
        private HomeAmendRiskParams mHomeAmendRiskParams;
        
        private HomeAmendSelecPolicyParams mHomeAmendSelecPolicyParams;
        
        private HomeCancelPolicyParams mHomeCancelPolicyParams;
        
        private HomeCancelPolicyAcceptParams mHomeCancelPolicyAcceptParams;
        
        private HomeChangePremiumParams mHomeChangePremiumParams;
        
        private HomeCheckDemandsExpectedValues mHomeCheckDemandsExpectedValues;
        
        private HomeCheckNewPremiumExpectedValues mHomeCheckNewPremiumExpectedValues;
        
        private HomeCheckPolicyPremiumExpectedValues mHomeCheckPolicyPremiumExpectedValues;
        
        private HomeCheckPremiumExpectedValues mHomeCheckPremiumExpectedValues;
        
        private HomeCheckPrintExpectedValues mHomeCheckPrintExpectedValues;
        
        private HomeCheckStatusExpectedValues mHomeCheckStatusExpectedValues;
        
        private HomeCheckZeroPremiumExpectedValues mHomeCheckZeroPremiumExpectedValues;
        
        private HomeCopyCheckDataExpectedValues mHomeCopyCheckDataExpectedValues;
        
        private HomeCopyRiskParams mHomeCopyRiskParams;
        
        private HomeCreatePolicyParams mHomeCreatePolicyParams;
        
        private HomeExitWithoutPolicyParams mHomeExitWithoutPolicyParams;
        
        private HomeMTAChangeParams mHomeMTAChangeParams;
        
        private HomeMTACheckCancelledExpectedValues mHomeMTACheckCancelledExpectedValues;
        
        private HomeMTACheckChangedExpectedValues mHomeMTACheckChangedExpectedValues;
        
        private HomeMTACheckMessageExpectedValues mHomeMTACheckMessageExpectedValues;
        
        private HomeMTACopyCheckExpectedValues mHomeMTACopyCheckExpectedValues;
        
        private HomeMTAEnterDateParams mHomeMTAEnterDateParams;
        
        private HomeMTASelectQuoteParams mHomeMTASelectQuoteParams;
        
        private HomeProposerParams mHomeProposerParams;
        
        private HomeRebrokeSelectPolicyParams mHomeRebrokeSelectPolicyParams;
        
        private HomeRenewalBeforeAcceptParams mHomeRenewalBeforeAcceptParams;
        
        private HomeRenewalBeforeFinishParams mHomeRenewalBeforeFinishParams;
        
        private HomeRenewalCancelledCheckExpectedValues mHomeRenewalCancelledCheckExpectedValues;
        
        private HomeSelectPolicyParams mHomeSelectPolicyParams;
        
        private HomeSelectPolicy1Params mHomeSelectPolicy1Params;
        
        private HomeSiteRenewalParams mHomeSiteRenewalParams;
        
        private HomeStartDateParams mHomeStartDateParams;
        
        private HouseProposerParams mHouseProposerParams;
        
        private HouseRegressAppParams mHouseRegressAppParams;
        
        private LoginParams mLoginParams;
        
        private Login_newParams mLogin_newParams;
        
        private LoginEnterDateParams mLoginEnterDateParams;
        
        private MotoAmendRiskParams mMotoAmendRiskParams;
        
        private MotoAWAPCheckNEWExpectedValues mMotoAWAPCheckNEWExpectedValues;
        
        private MotoAWAPCheckTAXExpectedValues mMotoAWAPCheckTAXExpectedValues;
        
        private MotoCancelPolicyParams mMotoCancelPolicyParams;
        
        private MotoCheckAWAPpremiumExpectedValues mMotoCheckAWAPpremiumExpectedValues;
        
        private MotoCheckChangedPremiumExpectedValues mMotoCheckChangedPremiumExpectedValues;
        
        private MotoCheckPolicyStatusExpectedValues mMotoCheckPolicyStatusExpectedValues;
        
        private MotoCopyCheckCarExpectedValues mMotoCopyCheckCarExpectedValues;
        
        private MotoCopyCheckProposerExpectedValues mMotoCopyCheckProposerExpectedValues;
        
        private MotoCopyFinishParams mMotoCopyFinishParams;
        
        private MotoFinishMTAParams mMotoFinishMTAParams;
        
        private MotoInceptionDateParams mMotoInceptionDateParams;
        
        private MotoMTAAcceptParams mMotoMTAAcceptParams;
        
        private MotoMTABeforeParams mMotoMTABeforeParams;
        
        private MotoMTABefore2Params mMotoMTABefore2Params;
        
        private MotoMTABeforeAcceptParams mMotoMTABeforeAcceptParams;
        
        private MotoMTABeforeFinishParams mMotoMTABeforeFinishParams;
        
        private MotoMTACheckCarExpectedValues mMotoMTACheckCarExpectedValues;
        
        private MotoMTACheckNewValueExpectedValues mMotoMTACheckNewValueExpectedValues;
        
        private MotoMTAConfirmPolicyParams mMotoMTAConfirmPolicyParams;
        
        private MotoMTAMessageAfterDateExpectedValues mMotoMTAMessageAfterDateExpectedValues;
        
        private MotoMTAMessageCancelledExpectedValues mMotoMTAMessageCancelledExpectedValues;
        
        private MotoMTANoSaveParams mMotoMTANoSaveParams;
        
        private MotoPolicyPersonParams mMotoPolicyPersonParams;
        
        private MotoPostcodeLookupParams mMotoPostcodeLookupParams;
        
        private MotoRebrokeSelectSchemeParams mMotoRebrokeSelectSchemeParams;
        
        private MotoRegressAppParams mMotoRegressAppParams;
        
        private MotoRenewalCheckRecordExpectedValues mMotoRenewalCheckRecordExpectedValues;
        
        private MotoSearchCarParams mMotoSearchCarParams;
        
        private MotoSelectHighwayPolicyParams mMotoSelectHighwayPolicyParams;
        
        private MTADateParams mMTADateParams;
        
        private MTAMessageBeforeCurrentExpectedValues mMTAMessageBeforeCurrentExpectedValues;
        
        private OpenSiteForRenewalParams mOpenSiteForRenewalParams;
        
        private PostcodeLookupExpectedValues mPostcodeLookupExpectedValues;
        
        private QuoteResultsParams mQuoteResultsParams;
        
        private RebrokeAlternativeFinishParams mRebrokeAlternativeFinishParams;
        
        private RebrokeAlternativeFinish_1Params mRebrokeAlternativeFinish_1Params;
        
        private RebrokeAlternativeRenewParams mRebrokeAlternativeRenewParams;
        
        private RebrokeAlternativeRenew_1Params mRebrokeAlternativeRenew_1Params;
        
        private RecordedMethod2Params mRecordedMethod2Params;
        
        private RecordedMethod3Params mRecordedMethod3Params;
        
        private RecordedMethod5Params mRecordedMethod5Params;
        
        private RegistryHighwayParams mRegistryHighwayParams;
        
        private RegressAppDateParams mRegressAppDateParams;
        
        private RenewalAfterMTA1Params mRenewalAfterMTA1Params;
        
        private RenewalCheckInvitedExpectedValues mRenewalCheckInvitedExpectedValues;
        
        private RenewalCheckStatusExpectedValues mRenewalCheckStatusExpectedValues;
        
        private RenewalLoaderRunParams mRenewalLoaderRunParams;
        
        private RenewalModuleDisplayParams mRenewalModuleDisplayParams;
        
        private RenewalModuleEDIParams mRenewalModuleEDIParams;
        
        private RenewalModuleFilterMotoParams mRenewalModuleFilterMotoParams;
        
        private RenewalModuleRenew_1Params mRenewalModuleRenew_1Params;
        
        private SaveWithoutPremiumParams mSaveWithoutPremiumParams;
        
        private SelectHomeTypeParams mSelectHomeTypeParams;
        
        private SelectMotoPolicyParams mSelectMotoPolicyParams;
        
        private SelectNextTransactionParams mSelectNextTransactionParams;
        
        private SelectPolicyQuoteParams mSelectPolicyQuoteParams;
        
        private testPrintParams mtestPrintParams;
        
        private UITheAgencyManagerSignWindow mUITheAgencyManagerSignWindow;
        
        private UITheAgencyManagerWindow mUITheAgencyManagerWindow;
        
        private UITheAgencyManagerWindow1 mUITheAgencyManagerWindow1;
        
        private UICustomertxt1tdsfsWindow mUICustomertxt1tdsfsWindow;
        
        private UIAssignClientNumberWindow mUIAssignClientNumberWindow;
        
        private UIVerifyWindow mUIVerifyWindow;
        
        private UISelectaPolicyNumberWindow mUISelectaPolicyNumberWindow;
        
        private UICurrentOrFutureWindow mUICurrentOrFutureWindow;
        
        private UIProposerTypeWindow mUIProposerTypeWindow;
        
        private UIProposerDetailsWindow mUIProposerDetailsWindow;
        
        private UISearchResultForB338TWindow mUISearchResultForB338TWindow;
        
        private UIDriverDetailsWindow mUIDriverDetailsWindow;
        
        private UIVehicleLookupWindow mUIVehicleLookupWindow;
        
        private UIInsurEtamWindow mUIInsurEtamWindow;
        
        private UICreditCheckWindow mUICreditCheckWindow;
        
        private UIQuoteResultsWindow mUIQuoteResultsWindow;
        
        private UIInsurEtamWindow1 mUIInsurEtamWindow1;
        
        private UIPaymentMethodsWindow mUIPaymentMethodsWindow;
        
        private UIConfirmDocumentsWindow mUIConfirmDocumentsWindow;
        
        private UIPolicyDateTimeWindow mUIPolicyDateTimeWindow;
        
        private UISavethefileasWindow mUISavethefileasWindow;
        
        private UIPointOfSaleWindow mUIPointOfSaleWindow;
        
        private UIImporttoTAMWindow mUIImporttoTAMWindow;
        
        private UITransactiontoinsertWindow mUITransactiontoinsertWindow;
        
        private UITamxml7Window mUITamxml7Window;
        
        private UIPolicyrtyertWindow mUIPolicyrtyertWindow;
        
        private UISelectTaminsurerforiWindow mUISelectTaminsurerforiWindow;
        
        private UIPolicyautotestWindow mUIPolicyautotestWindow;
        
        private UIViewQuoteDetailsWindow mUIViewQuoteDetailsWindow;
        
        private UIDemandsNeedsMotorComWindow mUIDemandsNeedsMotorComWindow;
        
        private UIItemWindow39 mUIItemWindow;
        
        private UIItemWindow117 mUIItemWindow1;
        
        private UIConfirmSaveAsWindow mUIConfirmSaveAsWindow;
        
        private UIQuotesResultsWindow mUIQuotesResultsWindow;
        
        private UIBrokerAddonsWindow mUIBrokerAddonsWindow;
        
        private UIPolicyDetailConfirmaWindow mUIPolicyDetailConfirmaWindow;
        
        private UIKV31Window mUIKV31Window;
        
        private UIBarcodePrinterWindow mUIBarcodePrinterWindow;
        
        private UIDemandsNeedsHouseholWindow mUIDemandsNeedsHouseholWindow;
        
        private UIPolicyWindow mUIPolicyWindow;
        
        private UIAcceptWithAnotherProWindow mUIAcceptWithAnotherProWindow;
        
        private UIQuoteSelectListWindow mUIQuoteSelectListWindow;
        
        private UIUpdateGeneralTransacWindow mUIUpdateGeneralTransacWindow;
        
        private UITransactionListWindow mUITransactionListWindow;
        
        private UIOverridePremiumWindow mUIOverridePremiumWindow;
        
        private UIWhichpolicywouldyoulWindow mUIWhichpolicywouldyoulWindow;
        
        private UIProductSelectionWindow mUIProductSelectionWindow;
        
        private UITamXMLImportCustomerWindow mUITamXMLImportCustomerWindow;
        
        private UIPleaseselectWHOtofolWindow mUIPleaseselectWHOtofolWindow;
        
        private UIMidTermAdjustmentsWindow mUIMidTermAdjustmentsWindow;
        
        private UIMTAEffectiveDatesWindow mUIMTAEffectiveDatesWindow;
        
        private UIPolicygdfhdfdfghgdfWindow mUIPolicygdfhdfdfghgdfWindow;
        
        private UIConfirmMTAWindow mUIConfirmMTAWindow;
        
        private UIClaimsWindow mUIClaimsWindow;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UITestProject7Window mUITestProject7Window;
        
        private UIRegistryEditorWindow mUIRegistryEditorWindow;
        
        private UIBlankPageMicrosoftInWindow mUIBlankPageMicrosoftInWindow;
        
        private UIWindowsSecurityWindow mUIWindowsSecurityWindow;
        
        private UIInsurEcomSystemMaintWindow mUIInsurEcomSystemMaintWindow;
        
        private UISearchResultForBN16BWindow mUISearchResultForBN16BWindow;
        
        private UIRunWindow mUIRunWindow;
        
        private UIRegressIETamPolicyWindow mUIRegressIETamPolicyWindow;
        
        private UIRenewalLoaderWindow mUIRenewalLoaderWindow;
        
        private UIIETAMRenewalsWindow mUIIETAMRenewalsWindow;
        
        private UIPoliciesAutoRenewedAWindow mUIPoliciesAutoRenewedAWindow;
        
        private UIRenewalSearchWindow mUIRenewalSearchWindow;
        
        private UICustomerggggggggggggWindow mUICustomerggggggggggggWindow;
        
        private UIFilterRenewalRecordsWindow mUIFilterRenewalRecordsWindow;
        
        private UIAUTO1871001Window mUIAUTO1871001Window;
        
        private UIPrintDocumentsWindow mUIPrintDocumentsWindow;
        
        private UIConfirmWindow2 mUIConfirmWindow;
        
        private UIMTASuccessfulWindow mUIMTASuccessfulWindow;
        
        private UIRebrokeResultsScreenWindow mUIRebrokeResultsScreenWindow;
        
        private UIAUTO2081001Window mUIAUTO2081001Window;
        
        private UIAmendRiskWindow1 mUIAmendRiskWindow;
        
        private UIAmendRiskResultsWindow mUIAmendRiskResultsWindow;
        
        private UIAUTO2211001Window mUIAUTO2211001Window;
        
        private UIRenewalAcceptWindow mUIRenewalAcceptWindow;
        
        private UIInsurerNoticeRevaluaWindow mUIInsurerNoticeRevaluaWindow;
        
        private UIRenewalsNewBusinessAWindow mUIRenewalsNewBusinessAWindow;
        
        private UIAUTO2251001Window mUIAUTO2251001Window;
        
        private UIHouseholdRenewalsAmeWindow mUIHouseholdRenewalsAmeWindow;
        
        private UICreditCheckAtRenewalWindow mUICreditCheckAtRenewalWindow;
        
        private UIHouseholdRenewalsAmeWindow1 mUIHouseholdRenewalsAmeWindow1;
        
        private UIAUTO2301001Window mUIAUTO2301001Window;
        
        private UIHouseholdRebrokeResuWindow mUIHouseholdRebrokeResuWindow;
        
        private UIAUTO2311001Window mUIAUTO2311001Window;
        
        private UIRenewalsNewBusinessAWindow1 mUIRenewalsNewBusinessAWindow1;
        
        private UISignonErrorWindow mUISignonErrorWindow;
        
        private UINewCustomerDAFS001Window mUINewCustomerDAFS001Window;
        
        private UIProgramManagerWindow mUIProgramManagerWindow;
        
        private UIMicrosoftWordViewerWindow mUIMicrosoftWordViewerWindow;
        
        private UIWindowsSecurityWindow1 mUIWindowsSecurityWindow1;
        
        private UIWarningWindow mUIWarningWindow;
        
        private UIErrorWindow mUIErrorWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AcceptEnabled'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AcceptEnabledExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'A&ccept' button's property 'Enabled' equals 'True'
        /// </summary>
        public bool UIAcceptButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddPolicy'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AddPolicyParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Customers' in 'Unknown Name' combo box
        /// </summary>
        public string UIItemComboBoxSelectedItem = "Customers";
        
        /// <summary>
        /// Type 'autotest' in '&Personal Lines' radio button
        /// </summary>
        public string UIPersonalLinesRadioButtonSendKeys = "autotest";
        
        /// <summary>
        /// Type 'autotest' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "autotest";
        
        /// <summary>
        /// Type '1' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText1 = "1";
        
        /// <summary>
        /// Type '1' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText2 = "1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddressLookupHome'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AddressLookupHomeExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals '533 Yardley Green Road'
        /// </summary>
        public string UIItemEditText = "533 Yardley Green Road";
        
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals 'BIRMINGHAM'
        /// </summary>
        public string UIItemEditText1 = "BIRMINGHAM";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AmendDateBeforeMessage'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AmendDateBeforeMessageExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Date Before Inception Date - Please enter Adjustme...' label's property 'DisplayText' equals 'Date Before Inception Date - Please enter Adjustment Date.'
        /// </summary>
        public string UIDateBeforeInceptionDTextDisplayText = "Date Before Inception Date - Please enter Adjustment Date.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AmendSelectQuote'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AmendSelectQuoteParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Home}' in 'Amend Risk Results' client
        /// </summary>
        public string UIAmendRiskResultsClientSendKeys = "{Home}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'App_started'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class App_startedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'The Agency Manager' window's property 'Name' equals 'Applied TAM 12'
        /// </summary>
        public string UITheAgencyManagerWindow1Name = "Applied TAM 12";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' is not equal to '0.00'
        /// </summary>
        public string UIItemEditText = "0.00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals '0.00'
        /// </summary>
        public string UIItemEditText = "0.00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals 'RF53OXL'
        /// </summary>
        public string UIItemEditText = "RF53OXL";
        
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals '1000'
        /// </summary>
        public string UIItemEditText1 = "1000";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Signon Error' window's property 'Exists' equals 'True'
        /// </summary>
        public bool UISignonErrorWindowExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod5ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' group's property 'ClassName' equals 'ThunderRT6Frame'
        /// </summary>
        public string UIItemGroupClassName = "ThunderRT6Frame";
        
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'LineCount' equals '1'
        /// </summary>
        public int UIItemEditLineCount = 1;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertSelectPolicyForm'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertSelectPolicyFormExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Quote Results' window's property 'Name' equals 'Quote Results'
        /// </summary>
        public string UIQuoteResultsWindowName = "Quote Results";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ChangeDatePolicy'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ChangeDatePolicyParams
    {
        
        #region Fields
        /// <summary>
        /// Type '05/11/2011' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "05/11/2011";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ChangePremium'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ChangePremiumParams
    {
        
        #region Fields
        /// <summary>
        /// Type '10000' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "10000";
        
        /// <summary>
        /// Type '321412341' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText1 = "321412341";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckAutoPrint'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class CheckAutoPrintExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'FORD FIESTA BLACK 16V (1388cc) 2003-2003' cell's property 'InnerText' contains 'FORD FIESTA BLACK 16V'
        /// </summary>
        public string UIFORDFIESTABLACK16V13CellInnerText = "FORD FIESTA BLACK 16V";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckBillingScreen'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class CheckBillingScreenExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Billing Screen: MOTO-TESTPOLICYNUMBER' window's property 'Name' equals 'Billing Screen: MOTO-TESTPOLICYNUMBER'
        /// </summary>
        public string UIBillingScreenMOTOTESWindowName = "Billing Screen: MOTO-TESTPOLICYNUMBER";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckDemandsDoc'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class CheckDemandsDocExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Demands&Needs(Motor) [Compatibility Mode] - Micros...' client's property 'Name' contains 'DemandsNeeds(Motor)'
        /// </summary>
        public string UIDemandsNeedsMotorComClientName = "DemandsNeeds(Motor)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckQuoteMessage'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class CheckQuoteMessageExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Accept this quote (Not Overridden) -  £3007.16, RA...' label's property 'DisplayText' equals 'Accept this quote (Not Overridden) -  £3007.16, RA002050?  This is a TEST Account, NO EDI message will be sent'
        /// </summary>
        public string UIAcceptthisquoteNotOvTextDisplayText = "Accept this quote (Not Overridden) -  £3007.16, RA002050?  This is a TEST Account" +
            ", NO EDI message will be sent";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CoverDateBackCheck'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class CoverDateBackCheckExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Cover Cant Be Back Dated - Please enter Adjustment...' label's property 'DisplayText' equals 'Cover Cant Be Back Dated - Please enter Adjustment Date.'
        /// </summary>
        public string UICoverCantBeBackDatedTextDisplayText = "Cover Cant Be Back Dated - Please enter Adjustment Date.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Exit1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Exit1Params
    {
        
        #region Fields
        /// <summary>
        /// Clear 'Add Activity' check box
        /// </summary>
        public bool UIAddActivityCheckBoxChecked = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ExitEnabled'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ExitEnabledExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'E&xit' button's property 'Enabled' equals 'True'
        /// </summary>
        public bool UIExitButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FinishQuote1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class FinishQuote1Params
    {
        
        #region Fields
        /// <summary>
        /// Select '&Defer Printing?' check box
        /// </summary>
        public bool UIDeferPrintingCheckBoxChecked = true;
        
        /// <summary>
        /// Clear 'Add Activity' check box
        /// </summary>
        public bool UIAddActivityCheckBoxChecked = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeAcceptQuote_1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeAcceptQuote_1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'B338TH' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "B338TH";
        
        /// <summary>
        /// Select '&Defer Printing?' check box
        /// </summary>
        public bool UIDeferPrintingCheckBoxChecked = true;
        
        /// <summary>
        /// Clear 'Add Activity' check box
        /// </summary>
        public bool UIAddActivityCheckBoxChecked = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeAddressLookup'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeAddressLookupExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals '533 Yardley Green Road'
        /// </summary>
        public string UIItemEditText = "533 Yardley Green Road";
        
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals 'BIRMINGHAM'
        /// </summary>
        public string UIItemEditText1 = "BIRMINGHAM";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeAmendRenew'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeAmendRenewParams
    {
        
        #region Fields
        /// <summary>
        /// Select '&Defer Printing?' check box
        /// </summary>
        public bool UIDeferPrintingCheckBoxChecked = true;
        
        /// <summary>
        /// Clear 'Add Activity' check box
        /// </summary>
        public bool UIAddActivityCheckBoxChecked = false;
        
        /// <summary>
        /// Select 'AG Administrator General' in 'Unknown Name' list box
        /// </summary>
        public string UIItemListSelectedItemsAsString = "AG Administrator General";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeAmendRenewFinish_1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeAmendRenewFinish_1Params
    {
        
        #region Fields
        /// <summary>
        /// Select '&Defer Printing?' check box
        /// </summary>
        public bool UIDeferPrintingCheckBoxChecked = true;
        
        /// <summary>
        /// Clear 'Add Activity' check box
        /// </summary>
        public bool UIAddActivityCheckBoxChecked = false;
        
        /// <summary>
        /// Select 'AG Administrator General' in 'Unknown Name' list box
        /// </summary>
        public string UIItemListSelectedItemsAsString = "AG Administrator General";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeAmendRisk'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeAmendRiskParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'TestNew' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "TestNew";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeAmendSelecPolicy'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeAmendSelecPolicyParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Home}' in 'Household Renewals Amend Risk results' client
        /// </summary>
        public string UIHouseholdRenewalsAmeClientSendKeys = "{Home}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeCancelPolicy'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeCancelPolicyParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Cancel Cover' in 'Unknown Name' combo box
        /// </summary>
        public string UIItemComboBoxSelectedItem = "Cancel Cover";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeCancelPolicyAccept'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeCancelPolicyAcceptParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Home}' in 'Quotes Results' client
        /// </summary>
        public string UIQuotesResultsClientSendKeys = "{Home}";
        
        /// <summary>
        /// Select '&Defer Printing?' check box
        /// </summary>
        public bool UIDeferPrintingCheckBoxChecked = true;
        
        /// <summary>
        /// Clear 'Add Activity' check box
        /// </summary>
        public bool UIAddActivityCheckBoxChecked = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeChangePremium'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeChangePremiumParams
    {
        
        #region Fields
        /// <summary>
        /// Type '10000' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "10000";
        
        /// <summary>
        /// Type '6515616' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText1 = "6515616";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeCheckDemands'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeCheckDemandsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Demands&Needs(HouseholdBuildings&Contents) [Compat...' client's property 'Name' contains 'DemandsNeeds(HouseholdBuildings&Contents)'
        /// </summary>
        public string UIDemandsNeedsHouseholClientName = "DemandsNeeds(HouseholdBuildings&Contents)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeCheckNewPremium'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeCheckNewPremiumExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' is not equal to '0.00'
        /// </summary>
        public string UIItemEditText = "0.00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeCheckPolicyPremium'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeCheckPolicyPremiumExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' is not equal to '0.00'
        /// </summary>
        public string UIItemEditText = "0.00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeCheckPremium'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeCheckPremiumExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' is not equal to '0.00'
        /// </summary>
        public string UIItemEditText = "0.00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeCheckPrint'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeCheckPrintExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that '1989' cell's property 'InnerText' equals '1989'
        /// </summary>
        public string UIItem1989CellInnerText = "1989";
        
        /// <summary>
        /// Verify that 'Mr Test Test' cell's property 'InnerText' equals 'Mr Test Test'
        /// </summary>
        public string UIMrTestTestCellInnerText = "Mr Test Test";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeCheckStatus'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeCheckStatusExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals 'NEW'
        /// </summary>
        public string UIItemEditText = "NEW";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeCheckZeroPremium'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeCheckZeroPremiumExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals '0.00'
        /// </summary>
        public string UIItemEditText = "0.00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeCopyCheckData'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeCopyCheckDataExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals 'Test'
        /// </summary>
        public string UIItemEditText = "Test";
        
        /// <summary>
        /// Verify that 'Unknown Name' combo box's property 'SelectedItem' equals 'Account Director'
        /// </summary>
        public string UIItemComboBoxSelectedItem = "Account Director";
        
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals 'B33 8TH'
        /// </summary>
        public string UIItemEditText1 = "B33 8TH";
        
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals '533 Yardley Green Road'
        /// </summary>
        public string UIItemEditText2 = "533 Yardley Green Road";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeCopyRisk'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeCopyRiskParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Household' radio button
        /// </summary>
        public bool UIHouseholdRadioButtonSelected = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeCreatePolicy'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeCreatePolicyParams
    {
        
        #region Fields
        /// <summary>
        /// Type '1989' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "1989";
        
        /// <summary>
        /// Type '2345' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText1 = "2345";
        
        /// <summary>
        /// Type '2000' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText2 = "2000";
        
        /// <summary>
        /// Type '2000' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText3 = "2000";
        
        /// <summary>
        /// Type '2345' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText4 = "2345";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeExitWithoutPolicy'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeExitWithoutPolicyParams
    {
        
        #region Fields
        /// <summary>
        /// Clear 'Add Activity' check box
        /// </summary>
        public bool UIAddActivityCheckBoxChecked = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeMTAChange'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeMTAChangeParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'General Adjustment' in 'Unknown Name' combo box
        /// </summary>
        public string UIItemComboBoxSelectedItem = "General Adjustment";
        
        /// <summary>
        /// Type 'NewTest' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "NewTest";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeMTACheckCancelled'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeMTACheckCancelledExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals 'Test'
        /// </summary>
        public string UIItemEditText = "Test";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeMTACheckChanged'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeMTACheckChangedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals 'NewTest'
        /// </summary>
        public string UIItemEditText = "NewTest";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeMTACheckMessage'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeMTACheckMessageExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Date Before Current MTA Effective Date - Please en...' label's property 'DisplayText' equals 'Date Before Current MTA Effective Date - Please enter Adjustment Date.'
        /// </summary>
        public string UIDateBeforeCurrentMTATextDisplayText = "Date Before Current MTA Effective Date - Please enter Adjustment Date.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeMTACopyCheck'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeMTACopyCheckExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals 'NewTest'
        /// </summary>
        public string UIItemEditText = "NewTest";
        
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals 'B33 8TH'
        /// </summary>
        public string UIItemEditText1 = "B33 8TH";
        
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals '533 Yardley Green Road'
        /// </summary>
        public string UIItemEditText2 = "533 Yardley Green Road";
        
        /// <summary>
        /// Verify that 'Unknown Name' combo box's property 'SelectedItem' equals 'Advertising'
        /// </summary>
        public string UIItemComboBoxSelectedItem = "Advertising";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeMTAEnterDate'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeMTAEnterDateParams
    {
        
        #region Fields
        /// <summary>
        /// Type '15/10/12' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "15/10/12";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeMTASelectQuote'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeMTASelectQuoteParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Home}' in 'Quotes Results' client
        /// </summary>
        public string UIQuotesResultsClientSendKeys = "{Home}";
        
        /// <summary>
        /// Select '&Defer Printing?' check box
        /// </summary>
        public bool UIDeferPrintingCheckBoxChecked = true;
        
        /// <summary>
        /// Clear 'Add Activity' check box
        /// </summary>
        public bool UIAddActivityCheckBoxChecked = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeProposer'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeProposerParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'test1' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "test1";
        
        /// <summary>
        /// Type 'test' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText1 = "test";
        
        /// <summary>
        /// Type 'test' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText2 = "test";
        
        /// <summary>
        /// Select 'Account Director' in 'Unknown Name' combo box
        /// </summary>
        public string UIItemComboBoxSelectedItem = "Account Director";
        
        /// <summary>
        /// Select 'Advertising' in 'Unknown Name' combo box
        /// </summary>
        public string UIItemComboBoxSelectedItem1 = "Advertising";
        
        /// <summary>
        /// Type '160589' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText3 = "160589";
        
        /// <summary>
        /// Type 'B338TH' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText4 = "B338TH";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeRebrokeSelectPolicy'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeRebrokeSelectPolicyParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Home}' in 'Household Rebroke Results' client
        /// </summary>
        public string UIHouseholdRebrokeResuClientSendKeys = "{Home}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeRenewalBeforeAccept'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeRenewalBeforeAcceptParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Home}' in 'Quotes Results' client
        /// </summary>
        public string UIQuotesResultsClientSendKeys = "{Home}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeRenewalBeforeFinish'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeRenewalBeforeFinishParams
    {
        
        #region Fields
        /// <summary>
        /// Select '&Defer Printing?' check box
        /// </summary>
        public bool UIDeferPrintingCheckBoxChecked = true;
        
        /// <summary>
        /// Clear 'Add Activity' check box
        /// </summary>
        public bool UIAddActivityCheckBoxChecked = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeRenewalCancelledCheck'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeRenewalCancelledCheckExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'MTA successfully processed on a previously renewed...' label's property 'DisplayText' contains 'WARNING! - RENEWAL EDI HAS BEEN CANCELLED'
        /// </summary>
        public string UIMTAsuccessfullyproceTextDisplayText = "WARNING! - RENEWAL EDI HAS BEEN CANCELLED";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeSelectPolicy'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeSelectPolicyParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{End}' in 'Quotes Results' client
        /// </summary>
        public string UIQuotesResultsClientSendKeys = "{End}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeSelectPolicy1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeSelectPolicy1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '{Home}' in 'Quotes Results' client
        /// </summary>
        public string UIQuotesResultsClientSendKeys = "{Home}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeSiteRenewal'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeSiteRenewalParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Covea Insurance plc (formerly MMA)' in 'InsurerID' combo box
        /// </summary>
        public string UIInsurerIDComboBoxSelectedItem = "Covea Insurance plc (formerly MMA)";
        
        /// <summary>
        /// Type '81588888001120' in 'txtPolicyNumber' text box
        /// </summary>
        public string UITxtPolicyNumberEditText = "81588888001120";
        
        /// <summary>
        /// Type '14/11/2012' in 'txtRenewalDate' text box
        /// </summary>
        public string UITxtRenewalDateEditText = "14/11/2012";
        
        /// <summary>
        /// Type '14/11/2012' in 'txtAutoLapseDate' text box
        /// </summary>
        public string UITxtAutoLapseDateEditText = "14/11/2012";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HomeStartDate'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HomeStartDateParams
    {
        
        #region Fields
        /// <summary>
        /// Type '10/11/12' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "10/11/12";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HouseProposer'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HouseProposerParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'test1' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "test1";
        
        /// <summary>
        /// Type 'test' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText1 = "test";
        
        /// <summary>
        /// Type 'test' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText2 = "test";
        
        /// <summary>
        /// Select 'Advertising Buyer' in 'Unknown Name' combo box
        /// </summary>
        public string UIItemComboBoxSelectedItem = "Advertising Buyer";
        
        /// <summary>
        /// Select 'Addressing/Circularising Services' in 'Unknown Name' combo box
        /// </summary>
        public string UIItemComboBoxSelectedItem1 = "Addressing/Circularising Services";
        
        /// <summary>
        /// Type '151065' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText3 = "151065";
        
        /// <summary>
        /// Type 'B338TH' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText4 = "B338TH";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HouseRegressApp'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class HouseRegressAppParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Household' in 'Unknown Name' combo box
        /// </summary>
        public string UIItemComboBoxSelectedItem = "Household";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Login'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class LoginParams
    {
        
        #region Fields
        /// <summary>
        /// Wait for 5 seconds for user delay between actions; Launch '\\Pc-pez\APPLIED\WINTAM\HOMEBASE.EXE'
        /// </summary>
        public string ExePath = "\\\\Pc-pez\\APPLIED\\WINTAM\\HOMEBASE.EXE";
        
        /// <summary>
        /// Wait for 5 seconds for user delay between actions; Launch '\\Pc-pez\APPLIED\WINTAM\HOMEBASE.EXE'
        /// </summary>
        public string AlternateExePath = "\\\\Pc-pez\\APPLIED\\WINTAM\\HOMEBASE.EXE";
        
        /// <summary>
        /// Type '********' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys = "Pg0NWiUP5hQNZAJXwcx+tA2ZD1IKNoRj";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Login_new'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class Login_newParams
    {
        
        #region Fields
        /// <summary>
        /// Launch 'C:\APPLIED\WINTAM\HOMEBASE.EXE'
        /// </summary>
        public string ExePath = "C:\\APPLIED\\WINTAM\\HOMEBASE.EXE";
        
        /// <summary>
        /// Launch 'C:\APPLIED\WINTAM\HOMEBASE.EXE'
        /// </summary>
        public string AlternateExePath = "C:\\APPLIED\\WINTAM\\HOMEBASE.EXE";
        
        /// <summary>
        /// Type '********' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys = "Pg0NWiUP5hQNZAJXwcx+tA2ZD1IKNoRj";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LoginEnterDate'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class LoginEnterDateParams
    {
        
        #region Fields
        /// <summary>
        /// Type '13/11/2012' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "13/11/2012";
        
        /// <summary>
        /// Select 'November' in 'Unknown Name' combo box
        /// </summary>
        public string UIItemComboBoxSelectedItem = "November";
        
        /// <summary>
        /// Type '2012' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText1 = "2012";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MotoAmendRisk'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class MotoAmendRiskParams
    {
        
        #region Fields
        /// <summary>
        /// Type '1500' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "1500";
        
        /// <summary>
        /// Type 'NewTest' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText1 = "NewTest";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MotoAWAPCheckNEW'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class MotoAWAPCheckNEWExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'lblBalance' text box's property 'Text' equals '10,000.00'
        /// </summary>
        public string UILblBalanceEditText = "10,000.00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MotoAWAPCheckTAX'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class MotoAWAPCheckTAXExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'lblBalance' text box's property 'Text' equals '600.00'
        /// </summary>
        public string UILblBalanceEditText = "600.00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MotoCancelPolicy'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class MotoCancelPolicyParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Cancel Cover' in 'Unknown Name' combo box
        /// </summary>
        public string UIItemComboBoxSelectedItem = "Cancel Cover";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MotoCheckAWAPpremium'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class MotoCheckAWAPpremiumExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals '10000.00'
        /// </summary>
        public string UIItemEditText = "10000.00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MotoCheckChangedPremium'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class MotoCheckChangedPremiumExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals '9433.96'
        /// </summary>
        public string UIItemEditText = "9433.96";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MotoCheckPolicyStatus'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class MotoCheckPolicyStatusExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals 'NEW'
        /// </summary>
        public string UIItemEditText = "NEW";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MotoCopyCheckCar'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class MotoCopyCheckCarExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals 'RF53OXL'
        /// </summary>
        public string UIItemEditText = "RF53OXL";
        
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals '1000'
        /// </summary>
        public string UIItemEditText1 = "1000";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MotoCopyCheckProposer'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class MotoCopyCheckProposerExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals 'Test'
        /// </summary>
        public string UIItemEditText = "Test";
        
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals '16 Apr 1985'
        /// </summary>
        public string UIItemEditText1 = "16 Apr 1985";
        
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals 'B33 8TH'
        /// </summary>
        public string UIItemEditText2 = "B33 8TH";
        
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals '533 Yardley Green Road'
        /// </summary>
        public string UIItemEditText3 = "533 Yardley Green Road";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MotoCopyFinish'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class MotoCopyFinishParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Home}' in 'Quote Results' client
        /// </summary>
        public string UIQuoteResultsClientSendKeys = "{Home}";
        
        /// <summary>
        /// Select '&Defer Printing?' check box
        /// </summary>
        public bool UIDeferPrintingCheckBoxChecked = true;
        
        /// <summary>
        /// Clear 'Add Activity' check box
        /// </summary>
        public bool UIAddActivityCheckBoxChecked = false;
        
        /// <summary>
        /// Select 'AG Administrator General' in 'Unknown Name' list box
        /// </summary>
        public string UIItemListSelectedItemsAsString = "AG Administrator General";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MotoFinishMTA'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class MotoFinishMTAParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Home}' in 'Quote Results' client
        /// </summary>
        public string UIQuoteResultsClientSendKeys = "{Home}";
        
        /// <summary>
        /// Select '&Defer Printing?' check box
        /// </summary>
        public bool UIDeferPrintingCheckBoxChecked = true;
        
        /// <summary>
        /// Clear 'Add Activity' check box
        /// </summary>
        public bool UIAddActivityCheckBoxChecked = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MotoInceptionDate'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class MotoInceptionDateParams
    {
        
        #region Fields
        /// <summary>
        /// Type '13/11/12' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "13/11/12";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MotoMTAAccept'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class MotoMTAAcceptParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Change of Vehicle' in 'Unknown Name' combo box
        /// </summary>
        public string UIItemComboBoxSelectedItem = "Change of Vehicle";
        
        /// <summary>
        /// Type '2000' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "2000";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MotoMTABefore'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class MotoMTABeforeParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Change of Vehicle' in 'Unknown Name' combo box
        /// </summary>
        public string UIItemComboBoxSelectedItem = "Change of Vehicle";
        
        /// <summary>
        /// Type '77777' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "77777";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MotoMTABefore2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class MotoMTABefore2Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'Change of Vehicle' in 'Unknown Name' combo box
        /// </summary>
        public string UIItemComboBoxSelectedItem = "Change of Vehicle";
        
        /// <summary>
        /// Type '23423' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "23423";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MotoMTABeforeAccept'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class MotoMTABeforeAcceptParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Home}' in 'Quote Results' client
        /// </summary>
        public string UIQuoteResultsClientSendKeys = "{Home}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MotoMTABeforeFinish'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class MotoMTABeforeFinishParams
    {
        
        #region Fields
        /// <summary>
        /// Select '&Defer Printing?' check box
        /// </summary>
        public bool UIDeferPrintingCheckBoxChecked = true;
        
        /// <summary>
        /// Clear 'Add Activity' check box
        /// </summary>
        public bool UIAddActivityCheckBoxChecked = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MotoMTACheckCar'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class MotoMTACheckCarExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals 'RF53OXL'
        /// </summary>
        public string UIItemEditText = "RF53OXL";
        
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals '2000'
        /// </summary>
        public string UIItemEditText1 = "2000";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MotoMTACheckNewValue'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class MotoMTACheckNewValueExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals '2000'
        /// </summary>
        public string UIItemEditText = "2000";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MotoMTAConfirmPolicy'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class MotoMTAConfirmPolicyParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Home}' in 'Quote Results' client
        /// </summary>
        public string UIQuoteResultsClientSendKeys = "{Home}";
        
        /// <summary>
        /// Select '&Defer Printing?' check box
        /// </summary>
        public bool UIDeferPrintingCheckBoxChecked = true;
        
        /// <summary>
        /// Clear 'Add Activity' check box
        /// </summary>
        public bool UIAddActivityCheckBoxChecked = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MotoMTAMessageAfterDate'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class MotoMTAMessageAfterDateExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Adjustment date/time cannot be after the policy ef...' label's property 'DisplayText' contains 'Adjustment date/time cannot be after the policy effective end date/time'
        /// </summary>
        public string UIAdjustmentdatetimecaTextDisplayText = "Adjustment date/time cannot be after the policy effective end date/time";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MotoMTAMessageCancelled'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class MotoMTAMessageCancelledExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'MTA successfully processed on a previously renewed...' label's property 'DisplayText' contains 'RENEWAL EDI HAS BEEN CANCELLED'
        /// </summary>
        public string UIMTAsuccessfullyproceTextDisplayText = "RENEWAL EDI HAS BEEN CANCELLED";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MotoMTANoSave'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class MotoMTANoSaveParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Change of Driver' in 'Unknown Name' combo box
        /// </summary>
        public string UIItemComboBoxSelectedItem = "Change of Driver";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MotoPolicyPerson'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class MotoPolicyPersonParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Test' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "Test";
        
        /// <summary>
        /// Type '{Tab}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'test' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText1 = "test";
        
        /// <summary>
        /// Type '160485' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText2 = "160485";
        
        /// <summary>
        /// Type 'B338TH' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText3 = "B338TH";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MotoPostcodeLookup'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class MotoPostcodeLookupParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'test' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "test";
        
        /// <summary>
        /// Type 'test' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText1 = "test";
        
        /// <summary>
        /// Type '160486' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText2 = "160486";
        
        /// <summary>
        /// Type 'BN16BN' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText3 = "BN16BN";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MotoRebrokeSelectScheme'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class MotoRebrokeSelectSchemeParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Home}' in 'Unknown Name' client
        /// </summary>
        public string UIItemClientSendKeys = "{Home}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MotoRegressApp'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class MotoRegressAppParams
    {
        
        #region Fields
        /// <summary>
        /// Launch 'C:\TestProject7\Regress_IETam_Policy.exe'
        /// </summary>
        public string ExePath = "C:\\TestProject7\\Regress_IETam_Policy.exe";
        
        /// <summary>
        /// Launch 'C:\TestProject7\Regress_IETam_Policy.exe'
        /// </summary>
        public string AlternateExePath = "C:\\TestProject7\\Regress_IETam_Policy.exe";
        
        /// <summary>
        /// Type 'AUTO182' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "AUTO182";
        
        /// <summary>
        /// Type '-1001' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText1 = "-1001";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MotoRenewalCheckRecord'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class MotoRenewalCheckRecordExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'AUTO187-1001' window's property 'Name' contains 'AUTO187'
        /// </summary>
        public string UIAUTO1871001WindowName = "AUTO187";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MotoSearchCar'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class MotoSearchCarParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Account Executive' in 'Unknown Name' combo box
        /// </summary>
        public string UIItemComboBoxSelectedItem = "Account Executive";
        
        /// <summary>
        /// Select 'Aerial Manufacturer' in 'Unknown Name' combo box
        /// </summary>
        public string UIItemComboBoxSelectedItem1 = "Aerial Manufacturer";
        
        /// <summary>
        /// Type '151208' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "151208";
        
        /// <summary>
        /// Select 'FORD' in 'Unknown Name' combo box
        /// </summary>
        public string UIItemComboBoxEditableItem = "FORD";
        
        /// <summary>
        /// Select 'KA' in 'Unknown Name' combo box
        /// </summary>
        public string UIItemComboBoxEditableItem1 = "KA";
        
        /// <summary>
        /// Type '123434' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText1 = "123434";
        
        /// <summary>
        /// Type '1000' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText2 = "1000";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MotoSelectHighwayPolicy'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class MotoSelectHighwayPolicyParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Home}' in 'Quote Results' client
        /// </summary>
        public string UIQuoteResultsClientSendKeys = "{Home}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MTADate'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class MTADateParams
    {
        
        #region Fields
        /// <summary>
        /// Type '20/11/12' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "20/11/12";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MTAMessageBeforeCurrent'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class MTAMessageBeforeCurrentExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Date Before Current MTA Effective Date - Please en...' label's property 'DisplayText' equals 'Date Before Current MTA Effective Date - Please enter Adjustment Date.'
        /// </summary>
        public string UIDateBeforeCurrentMTATextDisplayText = "Date Before Current MTA Effective Date - Please enter Adjustment Date.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenSiteForRenewal'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class OpenSiteForRenewalParams
    {
        
        #region Fields
        /// <summary>
        /// Go to web page 'https://www.insur-econnect.com/sysmaint/default.asp?mode=1' using new browser instance
        /// </summary>
        public string UIBlankPageMicrosoftInWindowUrl = "https://www.insur-econnect.com/sysmaint/default.asp?mode=1";
        
        /// <summary>
        /// Type 'Bus sys' in 'Unknown Name' window
        /// </summary>
        public string UIItemWindowSendKeys = "Bus sys";
        
        /// <summary>
        /// Type '********' in 'Password' text box
        /// </summary>
        public string UIPasswordEditSendKeys = "qCCZkjIevam+j1jjLCjLdA==";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PostcodeLookup'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class PostcodeLookupExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals '533 Yardley Green Road'
        /// </summary>
        public string UIItemEditText = "533 Yardley Green Road";
        
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals 'BIRMINGHAM'
        /// </summary>
        public string UIItemEditText1 = "BIRMINGHAM";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'QuoteResults'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class QuoteResultsParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Account Executive' in 'Unknown Name' combo box
        /// </summary>
        public string UIItemComboBoxSelectedItem = "Account Executive";
        
        /// <summary>
        /// Select 'Acupuncture' in 'Unknown Name' combo box
        /// </summary>
        public string UIItemComboBoxSelectedItem1 = "Acupuncture";
        
        /// <summary>
        /// Type '151101' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "151101";
        
        /// <summary>
        /// Type 'RF53OXL' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText1 = "RF53OXL";
        
        /// <summary>
        /// Type '1000' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText2 = "1000";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RebrokeAlternativeFinish'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RebrokeAlternativeFinishParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Alternative' radio button
        /// </summary>
        public bool UIAlternativeRadioButtonSelected = true;
        
        /// <summary>
        /// Type '{Home}' in 'Unknown Name' client
        /// </summary>
        public string UIItemClientSendKeys = "{Home}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RebrokeAlternativeFinish_1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RebrokeAlternativeFinish_1Params
    {
        
        #region Fields
        /// <summary>
        /// Select '&Defer Printing?' check box
        /// </summary>
        public bool UIDeferPrintingCheckBoxChecked = true;
        
        /// <summary>
        /// Clear 'Add Activity' check box
        /// </summary>
        public bool UIAddActivityCheckBoxChecked = false;
        
        /// <summary>
        /// Select 'AG Administrator General' in 'Unknown Name' list box
        /// </summary>
        public string UIItemListSelectedItemsAsString = "AG Administrator General";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RebrokeAlternativeRenew'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RebrokeAlternativeRenewParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Alternative' radio button
        /// </summary>
        public bool UIAlternativeRadioButtonSelected = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RebrokeAlternativeRenew_1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RebrokeAlternativeRenew_1Params
    {
        
        #region Fields
        /// <summary>
        /// Select '&Defer Printing?' check box
        /// </summary>
        public bool UIDeferPrintingCheckBoxChecked = true;
        
        /// <summary>
        /// Clear 'Add Activity' check box
        /// </summary>
        public bool UIAddActivityCheckBoxChecked = false;
        
        /// <summary>
        /// Select 'AG Administrator General' in 'Unknown Name' list box
        /// </summary>
        public string UIItemListSelectedItemsAsString = "AG Administrator General";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod2Params
    {
        
        #region Fields
        /// <summary>
        /// Type '{Space}' in 'Comprehensive' radio button
        /// </summary>
        public string UIComprehensiveRadioButtonSendKeys = "{Space}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod3Params
    {
        
        #region Fields
        /// <summary>
        /// Type '8711.32' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "8711.32";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod5Params
    {
        
        #region Fields
        /// <summary>
        /// Select '⁬test_print' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "⁬test_print";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RegistryHighway'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RegistryHighwayParams
    {
        
        #region Fields
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + R'
        /// </summary>
        public string SendKeys = "R";
        
        /// <summary>
        /// Select 'c:\TestProject7\ourhighway.reg' in 'Open:' combo box
        /// </summary>
        public string UIOpenComboBoxEditableItem = "c:\\TestProject7\\ourhighway.reg";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RegressAppDate'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RegressAppDateParams
    {
        
        #region Fields
        /// <summary>
        /// Type '10/11/2011' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "10/11/2011";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RenewalAfterMTA1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RenewalAfterMTA1Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'Change of Vehicle' in 'Unknown Name' combo box
        /// </summary>
        public string UIItemComboBoxSelectedItem = "Change of Vehicle";
        
        /// <summary>
        /// Type '888888' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "888888";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RenewalCheckInvited'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RenewalCheckInvitedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals 'Invited'
        /// </summary>
        public string UIItemEditText = "Invited";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RenewalCheckStatus'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RenewalCheckStatusExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals 'REN'
        /// </summary>
        public string UIItemEditText = "REN";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RenewalLoaderRun'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RenewalLoaderRunParams
    {
        
        #region Fields
        /// <summary>
        /// Type '12/12/2012' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "12/12/2012";
        
        /// <summary>
        /// Type '22/12/2012' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText1 = "22/12/2012";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RenewalModuleDisplay'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RenewalModuleDisplayParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{End}' in 'Insur-E TAM Renewals' client
        /// </summary>
        public string UIInsurETAMRenewalsClientSendKeys = "{End}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RenewalModuleEDI'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RenewalModuleEDIParams
    {
        
        #region Fields
        /// <summary>
        /// Type '1' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RenewalModuleFilterMoto'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RenewalModuleFilterMotoParams
    {
        
        #region Fields
        /// <summary>
        /// Type '12/11/12' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "12/11/12";
        
        /// <summary>
        /// Type '12/11/12' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText1 = "12/11/12";
        
        /// <summary>
        /// Select 'Motor' in 'Unknown Name' combo box
        /// </summary>
        public string UIItemComboBoxSelectedItem = "Motor";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RenewalModuleRenew_1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RenewalModuleRenew_1Params
    {
        
        #region Fields
        /// <summary>
        /// Select '&Defer Printing?' check box
        /// </summary>
        public bool UIDeferPrintingCheckBoxChecked = true;
        
        /// <summary>
        /// Clear 'Add Activity' check box
        /// </summary>
        public bool UIAddActivityCheckBoxChecked = false;
        
        /// <summary>
        /// Select 'AG Administrator General' in 'Unknown Name' list box
        /// </summary>
        public string UIItemListSelectedItemsAsString = "AG Administrator General";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveWithoutPremium'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class SaveWithoutPremiumParams
    {
        
        #region Fields
        /// <summary>
        /// Clear 'Add Activity' check box
        /// </summary>
        public bool UIAddActivityCheckBoxChecked = false;
        
        /// <summary>
        /// Select 'ABD' in 'Unknown Name' list box
        /// </summary>
        public string UIItemListSelectedItemsAsString = "ABD";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectHomeType'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class SelectHomeTypeParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'HOME' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "HOME";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectMotoPolicy'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class SelectMotoPolicyParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'MOTO' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "MOTO";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectNextTransaction'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class SelectNextTransactionParams
    {
        
        #region Fields
        /// <summary>
        /// Select '381' in 'lvwVList' list box
        /// </summary>
        public string UILvwVListListSelectedItemsAsString = "381";
        
        /// <summary>
        /// Select '381' in 'lvwVList' list box
        /// </summary>
        public string UILvwVListListSelectedItemsAsString1 = "381";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectPolicyQuote'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class SelectPolicyQuoteParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Home}' in 'Quote Results' client
        /// </summary>
        public string UIQuoteResultsClientSendKeys = "{Home}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'testPrint'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class testPrintParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'test_print' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "test_print";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITheAgencyManagerSignWindow : WinWindow
    {
        
        public UITheAgencyManagerSignWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("The Agency Manager Signon");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        
        public UIOKWindow1 UIOKWindow1
        {
            get
            {
                if ((this.mUIOKWindow1 == null))
                {
                    this.mUIOKWindow1 = new UIOKWindow1(this);
                }
                return this.mUIOKWindow1;
            }
        }
        
        public UIOKWindow2 UIOKWindow2
        {
            get
            {
                if ((this.mUIOKWindow2 == null))
                {
                    this.mUIOKWindow2 = new UIOKWindow2(this);
                }
                return this.mUIOKWindow2;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2(this);
                }
                return this.mUIItemWindow2;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIOKWindow mUIOKWindow;
        
        private UIOKWindow1 mUIOKWindow1;
        
        private UIOKWindow2 mUIOKWindow2;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIItemWindow2 mUIItemWindow2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("The Agency Manager Signon");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("The Agency Manager Signon");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("The Agency Manager Signon");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("The Agency Manager Signon");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("The Agency Manager Signon");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("The Agency Manager Signon");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        
        private WinEdit mUIItemEdit;
        
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow1 : WinWindow
    {
        
        public UIOKWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "3";
            this.WindowTitles.Add("The Agency Manager Signon");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("The Agency Manager Signon");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow2 : WinWindow
    {
        
        public UIOKWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "3";
            this.WindowTitles.Add("The Agency Manager Signon");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("The Agency Manager Signon");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("The Agency Manager Signon");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIItemComboBox
        {
            get
            {
                if ((this.mUIItemComboBox == null))
                {
                    this.mUIItemComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIItemComboBox.WindowTitles.Add("The Agency Manager Signon");
                    #endregion
                }
                return this.mUIItemComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIItemComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("The Agency Manager Signon");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("The Agency Manager Signon");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITheAgencyManagerWindow : WinWindow
    {
        
        public UITheAgencyManagerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "The Agency Manager";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("The Agency Manager");
            #endregion
        }
        
        #region Properties
        public UICloseWindow UICloseWindow
        {
            get
            {
                if ((this.mUICloseWindow == null))
                {
                    this.mUICloseWindow = new UICloseWindow(this);
                }
                return this.mUICloseWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICloseWindow mUICloseWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICloseWindow : WinWindow
    {
        
        public UICloseWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("The Agency Manager");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("The Agency Manager");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITheAgencyManagerWindow1 : WinWindow
    {
        
        public UITheAgencyManagerWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Applied TAM 12";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("The Agency Manager");
            #endregion
        }
        
        #region Properties
        public UIClientsFilesWindow UIClientsFilesWindow
        {
            get
            {
                if ((this.mUIClientsFilesWindow == null))
                {
                    this.mUIClientsFilesWindow = new UIClientsFilesWindow(this);
                }
                return this.mUIClientsFilesWindow;
            }
        }
        
        public UITheAgencyManagerTitleBar UITheAgencyManagerTitleBar
        {
            get
            {
                if ((this.mUITheAgencyManagerTitleBar == null))
                {
                    this.mUITheAgencyManagerTitleBar = new UITheAgencyManagerTitleBar(this);
                }
                return this.mUITheAgencyManagerTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIClientsFilesWindow mUIClientsFilesWindow;
        
        private UITheAgencyManagerTitleBar mUITheAgencyManagerTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIClientsFilesWindow : WinWindow
    {
        
        public UIClientsFilesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "8";
            this.WindowTitles.Add("The Agency Manager");
            #endregion
        }
        
        #region Properties
        public WinButton UIClientsFilesButton
        {
            get
            {
                if ((this.mUIClientsFilesButton == null))
                {
                    this.mUIClientsFilesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIClientsFilesButton.SearchProperties[WinButton.PropertyNames.Name] = "Clients & Files";
                    this.mUIClientsFilesButton.WindowTitles.Add("The Agency Manager");
                    #endregion
                }
                return this.mUIClientsFilesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIClientsFilesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITheAgencyManagerTitleBar : WinTitleBar
    {
        
        public UITheAgencyManagerTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("The Agency Manager");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("The Agency Manager");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICustomertxt1tdsfsWindow : WinWindow
    {
        
        public UICustomertxt1tdsfsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6MDIForm";
            #endregion
        }
        
        #region Properties
        public UICUSTOMERSWindow UICUSTOMERSWindow
        {
            get
            {
                if ((this.mUICUSTOMERSWindow == null))
                {
                    this.mUICUSTOMERSWindow = new UICUSTOMERSWindow(this);
                }
                return this.mUICUSTOMERSWindow;
            }
        }
        
        public UIAddWindow UIAddWindow
        {
            get
            {
                if ((this.mUIAddWindow == null))
                {
                    this.mUIAddWindow = new UIAddWindow(this);
                }
                return this.mUIAddWindow;
            }
        }
        
        public UINewCustomerDetailWindow UINewCustomerDetailWindow
        {
            get
            {
                if ((this.mUINewCustomerDetailWindow == null))
                {
                    this.mUINewCustomerDetailWindow = new UINewCustomerDetailWindow(this);
                }
                return this.mUINewCustomerDetailWindow;
            }
        }
        
        public UIItemWindow5 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow5(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UINewPolicyDetailWindow UINewPolicyDetailWindow
        {
            get
            {
                if ((this.mUINewPolicyDetailWindow == null))
                {
                    this.mUINewPolicyDetailWindow = new UINewPolicyDetailWindow(this);
                }
                return this.mUINewPolicyDetailWindow;
            }
        }
        
        public UIPolicyListWindow UIPolicyListWindow
        {
            get
            {
                if ((this.mUIPolicyListWindow == null))
                {
                    this.mUIPolicyListWindow = new UIPolicyListWindow(this);
                }
                return this.mUIPolicyListWindow;
            }
        }
        
        public UIApplicationMenuBar UIApplicationMenuBar
        {
            get
            {
                if ((this.mUIApplicationMenuBar == null))
                {
                    this.mUIApplicationMenuBar = new UIApplicationMenuBar(this);
                }
                return this.mUIApplicationMenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UICUSTOMERSWindow mUICUSTOMERSWindow;
        
        private UIAddWindow mUIAddWindow;
        
        private UINewCustomerDetailWindow mUINewCustomerDetailWindow;
        
        private UIItemWindow5 mUIItemWindow;
        
        private UINewPolicyDetailWindow mUINewPolicyDetailWindow;
        
        private UIPolicyListWindow mUIPolicyListWindow;
        
        private UIApplicationMenuBar mUIApplicationMenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICUSTOMERSWindow : WinWindow
    {
        
        public UICUSTOMERSWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "32768";
            #endregion
        }
        
        #region Properties
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow3 mUIItemWindow;
        
        private UICancelWindow mUICancelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Customer: txt1 tdsfs");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIItemComboBox
        {
            get
            {
                if ((this.mUIItemComboBox == null))
                {
                    this.mUIItemComboBox = new WinComboBox(this);
                }
                return this.mUIItemComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIItemComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "5";
            this.WindowTitles.Add("Customer: autotest autotest");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Customer: autotest autotest");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAddWindow : WinWindow
    {
        
        public UIAddWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "14";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Customer: txt1 tdsfs");
            this.WindowTitles.Add("Policy: autotest autotest");
            #endregion
        }
        
        #region Properties
        public WinButton UIAddButton
        {
            get
            {
                if ((this.mUIAddButton == null))
                {
                    this.mUIAddButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAddButton.SearchProperties[WinButton.PropertyNames.Name] = "Add";
                    this.mUIAddButton.WindowTitles.Add("Customer: txt1 tdsfs");
                    this.mUIAddButton.WindowTitles.Add("Policy: autotest autotest");
                    #endregion
                }
                return this.mUIAddButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAddButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINewCustomerDetailWindow : WinWindow
    {
        
        public UINewCustomerDetailWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "32769";
            this.WindowTitles.Add("New Customer: AUTOAU1");
            this.WindowTitles.Add("Policy: autotest autotest");
            #endregion
        }
        
        #region Properties
        public UIItemWindow4 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow4(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIOKWindow3 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow3(this);
                }
                return this.mUIOKWindow;
            }
        }
        
        public UICancelWindow1 UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow1(this);
                }
                return this.mUICancelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow4 mUIItemWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UIOKWindow3 mUIOKWindow;
        
        private UICancelWindow1 mUICancelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "14";
            this.WindowTitles.Add("New Customer: AUTOAU1");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("New Customer: AUTOAU1");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "15";
            this.WindowTitles.Add("New Customer: AUTOAU1");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("New Customer: AUTOAU1");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow3 : WinWindow
    {
        
        public UIOKWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "23";
            this.WindowTitles.Add("New Customer: AUTOAU1");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("New Customer: AUTOAU1");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICancelWindow1 : WinWindow
    {
        
        public UICancelWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "8";
            this.WindowTitles.Add("Policy: autotest autotest");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Policy: autotest autotest");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow5 : WinWindow
    {
        
        public UIItemWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "32";
            this.WindowTitles.Add("Customer: autotest autotest");
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIItemButton.WindowTitles.Add("Customer: autotest autotest");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINewPolicyDetailWindow : WinWindow
    {
        
        public UINewPolicyDetailWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "32770";
            this.WindowTitles.Add("New Policy: AUTOAU1");
            this.WindowTitles.Add("Policy: autotest autotest");
            #endregion
        }
        
        #region Properties
        public UIItemWindow6 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow6(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow12 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow12(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIOKWindow4 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow4(this);
                }
                return this.mUIOKWindow;
            }
        }
        
        public UIItemWindow21 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow21(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIItemWindow111 UIItemWindow11
        {
            get
            {
                if ((this.mUIItemWindow11 == null))
                {
                    this.mUIItemWindow11 = new UIItemWindow111(this);
                }
                return this.mUIItemWindow11;
            }
        }
        
        public UICancelWindow2 UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow2(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UIItemWindow121 UIItemWindow12
        {
            get
            {
                if ((this.mUIItemWindow12 == null))
                {
                    this.mUIItemWindow12 = new UIItemWindow121(this);
                }
                return this.mUIItemWindow12;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow6 mUIItemWindow;
        
        private UIItemWindow12 mUIItemWindow1;
        
        private UIOKWindow4 mUIOKWindow;
        
        private UIItemWindow21 mUIItemWindow2;
        
        private UIItemWindow111 mUIItemWindow11;
        
        private UICancelWindow2 mUICancelWindow;
        
        private UIItemWindow121 mUIItemWindow12;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow6 : WinWindow
    {
        
        public UIItemWindow6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6UserControlDC";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "13";
            this.WindowTitles.Add("New Policy: AUTOAU1");
            #endregion
        }
        
        #region Properties
        public UIItemClient UIItemClient
        {
            get
            {
                if ((this.mUIItemClient == null))
                {
                    this.mUIItemClient = new UIItemClient(this);
                }
                return this.mUIItemClient;
            }
        }
        #endregion
        
        #region Fields
        private UIItemClient mUIItemClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemClient : WinClient
    {
        
        public UIItemClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("New Policy: AUTOAU1");
            #endregion
        }
        
        #region Properties
        public WinWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIItemWindow.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6TextBox";
                    this.mUIItemWindow.WindowTitles.Add("New Policy: AUTOAU1");
                    #endregion
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow12 : WinWindow
    {
        
        public UIItemWindow12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "15";
            this.WindowTitles.Add("New Policy: AUTOAU1");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("New Policy: AUTOAU1");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow4 : WinWindow
    {
        
        public UIOKWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "13";
            this.WindowTitles.Add("New Policy: AUTOAU1");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("New Policy: AUTOAU1");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow21 : WinWindow
    {
        
        public UIItemWindow21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "24";
            this.WindowTitles.Add("Policy: autotest autotest");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Policy: autotest autotest");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow111 : WinWindow
    {
        
        public UIItemWindow111(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "25";
            this.WindowTitles.Add("Policy: autotest autotest");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Policy: autotest autotest");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICancelWindow2 : WinWindow
    {
        
        public UICancelWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "3";
            this.WindowTitles.Add("Policy: autotest autotest");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Policy: autotest autotest");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow121 : WinWindow
    {
        
        public UIItemWindow121(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6UserControlDC";
            this.WindowTitles.Add("New Policy: AUTOAU1");
            #endregion
        }
        
        #region Properties
        public WinClient UINewPolicyDetailClient
        {
            get
            {
                if ((this.mUINewPolicyDetailClient == null))
                {
                    this.mUINewPolicyDetailClient = new WinClient(this);
                    #region Search Criteria
                    this.mUINewPolicyDetailClient.WindowTitles.Add("New Policy: AUTOAU1");
                    #endregion
                }
                return this.mUINewPolicyDetailClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUINewPolicyDetailClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPolicyListWindow : WinWindow
    {
        
        public UIPolicyListWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "32769";
            this.WindowTitles.Add("Policy: autotest autotest");
            #endregion
        }
        
        #region Properties
        public UIOptionsWindow UIOptionsWindow
        {
            get
            {
                if ((this.mUIOptionsWindow == null))
                {
                    this.mUIOptionsWindow = new UIOptionsWindow(this);
                }
                return this.mUIOptionsWindow;
            }
        }
        
        public UIDetailWindow UIDetailWindow
        {
            get
            {
                if ((this.mUIDetailWindow == null))
                {
                    this.mUIDetailWindow = new UIDetailWindow(this);
                }
                return this.mUIDetailWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOptionsWindow mUIOptionsWindow;
        
        private UIDetailWindow mUIDetailWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOptionsWindow : WinWindow
    {
        
        public UIOptionsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Policy: autotest autotest");
            #endregion
        }
        
        #region Properties
        public WinButton UIOptionsButton
        {
            get
            {
                if ((this.mUIOptionsButton == null))
                {
                    this.mUIOptionsButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOptionsButton.SearchProperties[WinButton.PropertyNames.Name] = "Options";
                    this.mUIOptionsButton.WindowTitles.Add("Policy: autotest autotest");
                    #endregion
                }
                return this.mUIOptionsButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOptionsButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDetailWindow : WinWindow
    {
        
        public UIDetailWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Policy: autotest autotest");
            #endregion
        }
        
        #region Properties
        public WinButton UIDetailButton
        {
            get
            {
                if ((this.mUIDetailButton == null))
                {
                    this.mUIDetailButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIDetailButton.SearchProperties[WinButton.PropertyNames.Name] = "Detail";
                    this.mUIDetailButton.WindowTitles.Add("Policy: autotest autotest");
                    #endregion
                }
                return this.mUIDetailButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIDetailButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIApplicationMenuBar : WinMenuBar
    {
        
        public UIApplicationMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
            this.WindowTitles.Add("Policy: autotest autotest");
            #endregion
        }
        
        #region Properties
        public UIOptionsMenuItem UIOptionsMenuItem
        {
            get
            {
                if ((this.mUIOptionsMenuItem == null))
                {
                    this.mUIOptionsMenuItem = new UIOptionsMenuItem(this);
                }
                return this.mUIOptionsMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIOptionsMenuItem mUIOptionsMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOptionsMenuItem : WinMenuItem
    {
        
        public UIOptionsMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Options";
            this.WindowTitles.Add("Policy: autotest autotest");
            #endregion
        }
        
        #region Properties
        public UILinksMenuItem UILinksMenuItem
        {
            get
            {
                if ((this.mUILinksMenuItem == null))
                {
                    this.mUILinksMenuItem = new UILinksMenuItem(this);
                }
                return this.mUILinksMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UILinksMenuItem mUILinksMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILinksMenuItem : WinMenuItem
    {
        
        public UILinksMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Links";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Policy: autotest autotest");
            #endregion
        }
        
        #region Properties
        public UIItem3rdPartyIntegratMenuItem UIItem3rdPartyIntegratMenuItem
        {
            get
            {
                if ((this.mUIItem3rdPartyIntegratMenuItem == null))
                {
                    this.mUIItem3rdPartyIntegratMenuItem = new UIItem3rdPartyIntegratMenuItem(this);
                }
                return this.mUIItem3rdPartyIntegratMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIItem3rdPartyIntegratMenuItem mUIItem3rdPartyIntegratMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItem3rdPartyIntegratMenuItem : WinMenuItem
    {
        
        public UIItem3rdPartyIntegratMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "3rd Party Integration";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Policy: autotest autotest");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIQuoteSelectListMenuItem
        {
            get
            {
                if ((this.mUIQuoteSelectListMenuItem == null))
                {
                    this.mUIQuoteSelectListMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIQuoteSelectListMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Quote Select List";
                    this.mUIQuoteSelectListMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIQuoteSelectListMenuItem.WindowTitles.Add("Policy: autotest autotest");
                    #endregion
                }
                return this.mUIQuoteSelectListMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIQuoteSelectListMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAssignClientNumberWindow : WinWindow
    {
        
        public UIAssignClientNumberWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Assign Client Number";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Assign Client Number");
            #endregion
        }
        
        #region Properties
        public UIPersonalLinesWindow UIPersonalLinesWindow
        {
            get
            {
                if ((this.mUIPersonalLinesWindow == null))
                {
                    this.mUIPersonalLinesWindow = new UIPersonalLinesWindow(this);
                }
                return this.mUIPersonalLinesWindow;
            }
        }
        
        public UIItemWindow7 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow7(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOKWindow5 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow5(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIPersonalLinesWindow mUIPersonalLinesWindow;
        
        private UIItemWindow7 mUIItemWindow;
        
        private UIOKWindow5 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPersonalLinesWindow : WinWindow
    {
        
        public UIPersonalLinesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "11";
            this.WindowTitles.Add("Assign Client Number");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UIPersonalLinesRadioButton
        {
            get
            {
                if ((this.mUIPersonalLinesRadioButton == null))
                {
                    this.mUIPersonalLinesRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIPersonalLinesRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Personal Lines";
                    this.mUIPersonalLinesRadioButton.WindowTitles.Add("Assign Client Number");
                    #endregion
                }
                return this.mUIPersonalLinesRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUIPersonalLinesRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow7 : WinWindow
    {
        
        public UIItemWindow7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "9";
            this.WindowTitles.Add("Assign Client Number");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Assign Client Number");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow5 : WinWindow
    {
        
        public UIOKWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "4";
            this.WindowTitles.Add("Assign Client Number");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Assign Client Number");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVerifyWindow : WinWindow
    {
        
        public UIVerifyWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Verify";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Verify");
            #endregion
        }
        
        #region Properties
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIYesWindow mUIYesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Verify");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Verify");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISelectaPolicyNumberWindow : WinWindow
    {
        
        public UISelectaPolicyNumberWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Select a Policy Number";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Select a Policy Number");
            #endregion
        }
        
        #region Properties
        public UIOKWindow6 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow6(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow6 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow6 : WinWindow
    {
        
        public UIOKWindow6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Select a Policy Number");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Select a Policy Number");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICurrentOrFutureWindow : WinWindow
    {
        
        public UICurrentOrFutureWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Current Or Future";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfCurrentOrFuture";
            this.WindowTitles.Add("Current Or Future");
            #endregion
        }
        
        #region Properties
        public UICurrentOrFutureClient UICurrentOrFutureClient
        {
            get
            {
                if ((this.mUICurrentOrFutureClient == null))
                {
                    this.mUICurrentOrFutureClient = new UICurrentOrFutureClient(this);
                }
                return this.mUICurrentOrFutureClient;
            }
        }
        #endregion
        
        #region Fields
        private UICurrentOrFutureClient mUICurrentOrFutureClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICurrentOrFutureClient : WinClient
    {
        
        public UICurrentOrFutureClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Current Or Future";
            this.WindowTitles.Add("Current Or Future");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "Ok";
                    this.mUIOKButton.WindowTitles.Add("Current Or Future");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIProposerTypeWindow : WinWindow
    {
        
        public UIProposerTypeWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Proposer Type";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Proposer Type");
            #endregion
        }
        
        #region Properties
        public UIOKWindow7 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow7(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow7 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow7 : WinWindow
    {
        
        public UIOKWindow7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "4";
            this.WindowTitles.Add("Proposer Type");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "Ok";
                    this.mUIOKButton.WindowTitles.Add("Proposer Type");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIProposerDetailsWindow : WinWindow
    {
        
        public UIProposerDetailsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Proposer Details";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Proposer Details");
            #endregion
        }
        
        #region Properties
        public UIItemWindow8 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow8(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow13 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow13(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow22 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow22(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIItemWindow31 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow31(this);
                }
                return this.mUIItemWindow3;
            }
        }
        
        public UILookupWindow UILookupWindow
        {
            get
            {
                if ((this.mUILookupWindow == null))
                {
                    this.mUILookupWindow = new UILookupWindow(this);
                }
                return this.mUILookupWindow;
            }
        }
        
        public UIItemWindow41 UIItemWindow4
        {
            get
            {
                if ((this.mUIItemWindow4 == null))
                {
                    this.mUIItemWindow4 = new UIItemWindow41(this);
                }
                return this.mUIItemWindow4;
            }
        }
        
        public UIItemWindow51 UIItemWindow5
        {
            get
            {
                if ((this.mUIItemWindow5 == null))
                {
                    this.mUIItemWindow5 = new UIItemWindow51(this);
                }
                return this.mUIItemWindow5;
            }
        }
        
        public UIOKWindow8 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow8(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow8 mUIItemWindow;
        
        private UIItemWindow13 mUIItemWindow1;
        
        private UIItemWindow22 mUIItemWindow2;
        
        private UIItemWindow31 mUIItemWindow3;
        
        private UILookupWindow mUILookupWindow;
        
        private UIItemWindow41 mUIItemWindow4;
        
        private UIItemWindow51 mUIItemWindow5;
        
        private UIOKWindow8 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow8 : WinWindow
    {
        
        public UIItemWindow8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Proposer Details");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Proposer Details");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow13 : WinWindow
    {
        
        public UIItemWindow13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Proposer Details");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Proposer Details");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow22 : WinWindow
    {
        
        public UIItemWindow22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("Proposer Details");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Proposer Details");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow31 : WinWindow
    {
        
        public UIItemWindow31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Proposer Details");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Proposer Details");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILookupWindow : WinWindow
    {
        
        public UILookupWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "8";
            this.WindowTitles.Add("Proposer Details");
            #endregion
        }
        
        #region Properties
        public WinButton UILookupButton
        {
            get
            {
                if ((this.mUILookupButton == null))
                {
                    this.mUILookupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILookupButton.SearchProperties[WinButton.PropertyNames.Name] = "Lookup...";
                    this.mUILookupButton.WindowTitles.Add("Proposer Details");
                    #endregion
                }
                return this.mUILookupButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILookupButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow41 : WinWindow
    {
        
        public UIItemWindow41(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Proposer Details");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Proposer Details");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow51 : WinWindow
    {
        
        public UIItemWindow51(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "5";
            this.WindowTitles.Add("Proposer Details");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Proposer Details");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow8 : WinWindow
    {
        
        public UIOKWindow8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "12";
            this.WindowTitles.Add("Proposer Details");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Proposer Details");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISearchResultForB338TWindow : WinWindow
    {
        
        public UISearchResultForB338TWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Search Result For", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            #endregion
        }
        
        #region Properties
        public UIOKWindow9 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow9(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow9 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow9 : WinWindow
    {
        
        public UIOKWindow9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "3";
            this.WindowTitles.Add("Search Result For B33 8TH");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "Ok";
                    this.mUIOKButton.WindowTitles.Add("Search Result For B33 8TH");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDriverDetailsWindow : WinWindow
    {
        
        public UIDriverDetailsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Driver Details";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Driver Details");
            #endregion
        }
        
        #region Properties
        public UIItemWindow9 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow9(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow14 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow14(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow23 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow23(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIOKWindow10 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow10(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow9 mUIItemWindow;
        
        private UIItemWindow14 mUIItemWindow1;
        
        private UIItemWindow23 mUIItemWindow2;
        
        private UIOKWindow10 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow9 : WinWindow
    {
        
        public UIItemWindow9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "19";
            this.WindowTitles.Add("Driver Details");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIItemComboBox
        {
            get
            {
                if ((this.mUIItemComboBox == null))
                {
                    this.mUIItemComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIItemComboBox.WindowTitles.Add("Driver Details");
                    #endregion
                }
                return this.mUIItemComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIItemComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow14 : WinWindow
    {
        
        public UIItemWindow14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "18";
            this.WindowTitles.Add("Driver Details");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIItemComboBox
        {
            get
            {
                if ((this.mUIItemComboBox == null))
                {
                    this.mUIItemComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIItemComboBox.WindowTitles.Add("Driver Details");
                    #endregion
                }
                return this.mUIItemComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIItemComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow23 : WinWindow
    {
        
        public UIItemWindow23(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Driver Details");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Driver Details");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow10 : WinWindow
    {
        
        public UIOKWindow10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Driver Details");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Driver Details");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIVehicleLookupWindow : WinWindow
    {
        
        public UIVehicleLookupWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Vehicle Lookup";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Vehicle Lookup");
            #endregion
        }
        
        #region Properties
        public UIItemWindow10 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow10(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIFilterWindow UIFilterWindow
        {
            get
            {
                if ((this.mUIFilterWindow == null))
                {
                    this.mUIFilterWindow = new UIFilterWindow(this);
                }
                return this.mUIFilterWindow;
            }
        }
        
        public UIOKWindow11 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow11(this);
                }
                return this.mUIOKWindow;
            }
        }
        
        public UIItemWindow15 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow15(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow112 UIItemWindow11
        {
            get
            {
                if ((this.mUIItemWindow11 == null))
                {
                    this.mUIItemWindow11 = new UIItemWindow112(this);
                }
                return this.mUIItemWindow11;
            }
        }
        
        public UIFilterWindow1 UIFilterWindow1
        {
            get
            {
                if ((this.mUIFilterWindow1 == null))
                {
                    this.mUIFilterWindow1 = new UIFilterWindow1(this);
                }
                return this.mUIFilterWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow10 mUIItemWindow;
        
        private UIFilterWindow mUIFilterWindow;
        
        private UIOKWindow11 mUIOKWindow;
        
        private UIItemWindow15 mUIItemWindow1;
        
        private UIItemWindow112 mUIItemWindow11;
        
        private UIFilterWindow1 mUIFilterWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow10 : WinWindow
    {
        
        public UIItemWindow10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "3";
            this.WindowTitles.Add("Vehicle Lookup");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Vehicle Lookup");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFilterWindow : WinWindow
    {
        
        public UIFilterWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Vehicle Lookup");
            #endregion
        }
        
        #region Properties
        public WinButton UIFilterButton
        {
            get
            {
                if ((this.mUIFilterButton == null))
                {
                    this.mUIFilterButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIFilterButton.SearchProperties[WinButton.PropertyNames.Name] = "Filter";
                    this.mUIFilterButton.WindowTitles.Add("Vehicle Lookup");
                    #endregion
                }
                return this.mUIFilterButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIFilterButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow11 : WinWindow
    {
        
        public UIOKWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "18";
            this.WindowTitles.Add("Vehicle Lookup");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Vehicle Lookup");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow15 : WinWindow
    {
        
        public UIItemWindow15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "9";
            this.WindowTitles.Add("Vehicle Lookup");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIItemComboBox
        {
            get
            {
                if ((this.mUIItemComboBox == null))
                {
                    this.mUIItemComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIItemComboBox.WindowTitles.Add("Vehicle Lookup");
                    #endregion
                }
                return this.mUIItemComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIItemComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow112 : WinWindow
    {
        
        public UIItemWindow112(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "10";
            this.WindowTitles.Add("Vehicle Lookup");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIItemComboBox
        {
            get
            {
                if ((this.mUIItemComboBox == null))
                {
                    this.mUIItemComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIItemComboBox.WindowTitles.Add("Vehicle Lookup");
                    #endregion
                }
                return this.mUIItemComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIItemComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFilterWindow1 : WinWindow
    {
        
        public UIFilterWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "8";
            this.WindowTitles.Add("Vehicle Lookup");
            #endregion
        }
        
        #region Properties
        public WinButton UIFilterButton
        {
            get
            {
                if ((this.mUIFilterButton == null))
                {
                    this.mUIFilterButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIFilterButton.SearchProperties[WinButton.PropertyNames.Name] = "Filter";
                    this.mUIFilterButton.WindowTitles.Add("Vehicle Lookup");
                    #endregion
                }
                return this.mUIFilterButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIFilterButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIInsurEtamWindow : WinWindow
    {
        
        public UIInsurEtamWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Personal Lines";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6MDIForm";
            #endregion
        }
        
        #region Properties
        public UIMotorQuotesWindow UIMotorQuotesWindow
        {
            get
            {
                if ((this.mUIMotorQuotesWindow == null))
                {
                    this.mUIMotorQuotesWindow = new UIMotorQuotesWindow(this);
                }
                return this.mUIMotorQuotesWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIMotorQuotesWindow mUIMotorQuotesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMotorQuotesWindow : WinWindow
    {
        
        public UIMotorQuotesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "32768";
            #endregion
        }
        
        #region Properties
        public UIItemWindow16 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow16(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UICalculateQuoteWindow UICalculateQuoteWindow
        {
            get
            {
                if ((this.mUICalculateQuoteWindow == null))
                {
                    this.mUICalculateQuoteWindow = new UICalculateQuoteWindow(this);
                }
                return this.mUICalculateQuoteWindow;
            }
        }
        
        public UIItemWindow17 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow17(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow24 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow24(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIItemWindow113 UIItemWindow11
        {
            get
            {
                if ((this.mUIItemWindow11 == null))
                {
                    this.mUIItemWindow11 = new UIItemWindow113(this);
                }
                return this.mUIItemWindow11;
            }
        }
        
        public UIItemWindow32 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow32(this);
                }
                return this.mUIItemWindow3;
            }
        }
        
        public UIItemWindow211 UIItemWindow21
        {
            get
            {
                if ((this.mUIItemWindow21 == null))
                {
                    this.mUIItemWindow21 = new UIItemWindow211(this);
                }
                return this.mUIItemWindow21;
            }
        }
        
        public UIItemWindow311 UIItemWindow31
        {
            get
            {
                if ((this.mUIItemWindow31 == null))
                {
                    this.mUIItemWindow31 = new UIItemWindow311(this);
                }
                return this.mUIItemWindow31;
            }
        }
        
        public UIItemWindow42 UIItemWindow4
        {
            get
            {
                if ((this.mUIItemWindow4 == null))
                {
                    this.mUIItemWindow4 = new UIItemWindow42(this);
                }
                return this.mUIItemWindow4;
            }
        }
        
        public UIItemWindow52 UIItemWindow5
        {
            get
            {
                if ((this.mUIItemWindow5 == null))
                {
                    this.mUIItemWindow5 = new UIItemWindow52(this);
                }
                return this.mUIItemWindow5;
            }
        }
        
        public UIItemWindow511 UIItemWindow51
        {
            get
            {
                if ((this.mUIItemWindow51 == null))
                {
                    this.mUIItemWindow51 = new UIItemWindow511(this);
                }
                return this.mUIItemWindow51;
            }
        }
        
        public UILookupWindow1 UILookupWindow
        {
            get
            {
                if ((this.mUILookupWindow == null))
                {
                    this.mUILookupWindow = new UILookupWindow1(this);
                }
                return this.mUILookupWindow;
            }
        }
        
        public UIItemWindow61 UIItemWindow6
        {
            get
            {
                if ((this.mUIItemWindow6 == null))
                {
                    this.mUIItemWindow6 = new UIItemWindow61(this);
                }
                return this.mUIItemWindow6;
            }
        }
        
        public UIItemWindow71 UIItemWindow7
        {
            get
            {
                if ((this.mUIItemWindow7 == null))
                {
                    this.mUIItemWindow7 = new UIItemWindow71(this);
                }
                return this.mUIItemWindow7;
            }
        }
        
        public UINextWindow UINextWindow
        {
            get
            {
                if ((this.mUINextWindow == null))
                {
                    this.mUINextWindow = new UINextWindow(this);
                }
                return this.mUINextWindow;
            }
        }
        
        public UIItemWindow81 UIItemWindow8
        {
            get
            {
                if ((this.mUIItemWindow8 == null))
                {
                    this.mUIItemWindow8 = new UIItemWindow81(this);
                }
                return this.mUIItemWindow8;
            }
        }
        
        public UINextWindow1 UINextWindow1
        {
            get
            {
                if ((this.mUINextWindow1 == null))
                {
                    this.mUINextWindow1 = new UINextWindow1(this);
                }
                return this.mUINextWindow1;
            }
        }
        
        public UINextWindow2 UINextWindow2
        {
            get
            {
                if ((this.mUINextWindow2 == null))
                {
                    this.mUINextWindow2 = new UINextWindow2(this);
                }
                return this.mUINextWindow2;
            }
        }
        
        public UINextWindow3 UINextWindow3
        {
            get
            {
                if ((this.mUINextWindow3 == null))
                {
                    this.mUINextWindow3 = new UINextWindow3(this);
                }
                return this.mUINextWindow3;
            }
        }
        
        public UIItemWindow221 UIItemWindow22
        {
            get
            {
                if ((this.mUIItemWindow22 == null))
                {
                    this.mUIItemWindow22 = new UIItemWindow221(this);
                }
                return this.mUIItemWindow22;
            }
        }
        
        public UIItemWindow321 UIItemWindow32
        {
            get
            {
                if ((this.mUIItemWindow32 == null))
                {
                    this.mUIItemWindow32 = new UIItemWindow321(this);
                }
                return this.mUIItemWindow32;
            }
        }
        
        public UINextWindow4 UINextWindow4
        {
            get
            {
                if ((this.mUINextWindow4 == null))
                {
                    this.mUINextWindow4 = new UINextWindow4(this);
                }
                return this.mUINextWindow4;
            }
        }
        
        public UIItemWindow411 UIItemWindow41
        {
            get
            {
                if ((this.mUIItemWindow41 == null))
                {
                    this.mUIItemWindow41 = new UIItemWindow411(this);
                }
                return this.mUIItemWindow41;
            }
        }
        
        public UINextWindow5 UINextWindow5
        {
            get
            {
                if ((this.mUINextWindow5 == null))
                {
                    this.mUINextWindow5 = new UINextWindow5(this);
                }
                return this.mUINextWindow5;
            }
        }
        
        public UINextWindow6 UINextWindow6
        {
            get
            {
                if ((this.mUINextWindow6 == null))
                {
                    this.mUINextWindow6 = new UINextWindow6(this);
                }
                return this.mUINextWindow6;
            }
        }
        
        public UIQuoteWindow UIQuoteWindow
        {
            get
            {
                if ((this.mUIQuoteWindow == null))
                {
                    this.mUIQuoteWindow = new UIQuoteWindow(this);
                }
                return this.mUIQuoteWindow;
            }
        }
        
        public UIExitWindow UIExitWindow
        {
            get
            {
                if ((this.mUIExitWindow == null))
                {
                    this.mUIExitWindow = new UIExitWindow(this);
                }
                return this.mUIExitWindow;
            }
        }
        
        public UIMTAWindow UIMTAWindow
        {
            get
            {
                if ((this.mUIMTAWindow == null))
                {
                    this.mUIMTAWindow = new UIMTAWindow(this);
                }
                return this.mUIMTAWindow;
            }
        }
        
        public UICancelWindow3 UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow3(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UIMTAWindow1 UIMTAWindow1
        {
            get
            {
                if ((this.mUIMTAWindow1 == null))
                {
                    this.mUIMTAWindow1 = new UIMTAWindow1(this);
                }
                return this.mUIMTAWindow1;
            }
        }
        
        public UIItemWindow91 UIItemWindow9
        {
            get
            {
                if ((this.mUIItemWindow9 == null))
                {
                    this.mUIItemWindow9 = new UIItemWindow91(this);
                }
                return this.mUIItemWindow9;
            }
        }
        
        public UIEDIMatchWindow UIEDIMatchWindow
        {
            get
            {
                if ((this.mUIEDIMatchWindow == null))
                {
                    this.mUIEDIMatchWindow = new UIEDIMatchWindow(this);
                }
                return this.mUIEDIMatchWindow;
            }
        }
        
        public UILogandClearWindow UILogandClearWindow
        {
            get
            {
                if ((this.mUILogandClearWindow == null))
                {
                    this.mUILogandClearWindow = new UILogandClearWindow(this);
                }
                return this.mUILogandClearWindow;
            }
        }
        
        public UIItemWindow101 UIItemWindow10
        {
            get
            {
                if ((this.mUIItemWindow10 == null))
                {
                    this.mUIItemWindow10 = new UIItemWindow101(this);
                }
                return this.mUIItemWindow10;
            }
        }
        
        public UIDisplayRecordWindow UIDisplayRecordWindow
        {
            get
            {
                if ((this.mUIDisplayRecordWindow == null))
                {
                    this.mUIDisplayRecordWindow = new UIDisplayRecordWindow(this);
                }
                return this.mUIDisplayRecordWindow;
            }
        }
        
        public UIFilterWindow2 UIFilterWindow
        {
            get
            {
                if ((this.mUIFilterWindow == null))
                {
                    this.mUIFilterWindow = new UIFilterWindow2(this);
                }
                return this.mUIFilterWindow;
            }
        }
        
        public UIItemWindow122 UIItemWindow12
        {
            get
            {
                if ((this.mUIItemWindow12 == null))
                {
                    this.mUIItemWindow12 = new UIItemWindow122(this);
                }
                return this.mUIItemWindow12;
            }
        }
        
        public UIExitWindow1 UIExitWindow1
        {
            get
            {
                if ((this.mUIExitWindow1 == null))
                {
                    this.mUIExitWindow1 = new UIExitWindow1(this);
                }
                return this.mUIExitWindow1;
            }
        }
        
        public UIItemWindow131 UIItemWindow13
        {
            get
            {
                if ((this.mUIItemWindow13 == null))
                {
                    this.mUIItemWindow13 = new UIItemWindow131(this);
                }
                return this.mUIItemWindow13;
            }
        }
        
        public UICancelWindow11 UICancelWindow1
        {
            get
            {
                if ((this.mUICancelWindow1 == null))
                {
                    this.mUICancelWindow1 = new UICancelWindow11(this);
                }
                return this.mUICancelWindow1;
            }
        }
        
        public UICancelWindow21 UICancelWindow2
        {
            get
            {
                if ((this.mUICancelWindow2 == null))
                {
                    this.mUICancelWindow2 = new UICancelWindow21(this);
                }
                return this.mUICancelWindow2;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow16 mUIItemWindow;
        
        private UICalculateQuoteWindow mUICalculateQuoteWindow;
        
        private UIItemWindow17 mUIItemWindow1;
        
        private UIItemWindow24 mUIItemWindow2;
        
        private UIItemWindow113 mUIItemWindow11;
        
        private UIItemWindow32 mUIItemWindow3;
        
        private UIItemWindow211 mUIItemWindow21;
        
        private UIItemWindow311 mUIItemWindow31;
        
        private UIItemWindow42 mUIItemWindow4;
        
        private UIItemWindow52 mUIItemWindow5;
        
        private UIItemWindow511 mUIItemWindow51;
        
        private UILookupWindow1 mUILookupWindow;
        
        private UIItemWindow61 mUIItemWindow6;
        
        private UIItemWindow71 mUIItemWindow7;
        
        private UINextWindow mUINextWindow;
        
        private UIItemWindow81 mUIItemWindow8;
        
        private UINextWindow1 mUINextWindow1;
        
        private UINextWindow2 mUINextWindow2;
        
        private UINextWindow3 mUINextWindow3;
        
        private UIItemWindow221 mUIItemWindow22;
        
        private UIItemWindow321 mUIItemWindow32;
        
        private UINextWindow4 mUINextWindow4;
        
        private UIItemWindow411 mUIItemWindow41;
        
        private UINextWindow5 mUINextWindow5;
        
        private UINextWindow6 mUINextWindow6;
        
        private UIQuoteWindow mUIQuoteWindow;
        
        private UIExitWindow mUIExitWindow;
        
        private UIMTAWindow mUIMTAWindow;
        
        private UICancelWindow3 mUICancelWindow;
        
        private UIMTAWindow1 mUIMTAWindow1;
        
        private UIItemWindow91 mUIItemWindow9;
        
        private UIEDIMatchWindow mUIEDIMatchWindow;
        
        private UILogandClearWindow mUILogandClearWindow;
        
        private UIItemWindow101 mUIItemWindow10;
        
        private UIDisplayRecordWindow mUIDisplayRecordWindow;
        
        private UIFilterWindow2 mUIFilterWindow;
        
        private UIItemWindow122 mUIItemWindow12;
        
        private UIExitWindow1 mUIExitWindow1;
        
        private UIItemWindow131 mUIItemWindow13;
        
        private UICancelWindow11 mUICancelWindow1;
        
        private UICancelWindow21 mUICancelWindow2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow16 : WinWindow
    {
        
        public UIItemWindow16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICalculateQuoteWindow : WinWindow
    {
        
        public UICalculateQuoteWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "21";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinButton UICalculateQuoteButton
        {
            get
            {
                if ((this.mUICalculateQuoteButton == null))
                {
                    this.mUICalculateQuoteButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICalculateQuoteButton.SearchProperties[WinButton.PropertyNames.Name] = "Calculate Quote";
                    this.mUICalculateQuoteButton.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUICalculateQuoteButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICalculateQuoteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow17 : WinWindow
    {
        
        public UIItemWindow17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "32";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow24 : WinWindow
    {
        
        public UIItemWindow24(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "102";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow113 : WinWindow
    {
        
        public UIItemWindow113(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "101";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow32 : WinWindow
    {
        
        public UIItemWindow32(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "102";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow211 : WinWindow
    {
        
        public UIItemWindow211(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "96";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIItemComboBox
        {
            get
            {
                if ((this.mUIItemComboBox == null))
                {
                    this.mUIItemComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIItemComboBox.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUIItemComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIItemComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow311 : WinWindow
    {
        
        public UIItemWindow311(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "95";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIItemComboBox
        {
            get
            {
                if ((this.mUIItemComboBox == null))
                {
                    this.mUIItemComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIItemComboBox.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUIItemComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIItemComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow42 : WinWindow
    {
        
        public UIItemWindow42(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow52 : WinWindow
    {
        
        public UIItemWindow52(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow511 : WinWindow
    {
        
        public UIItemWindow511(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILookupWindow1 : WinWindow
    {
        
        public UILookupWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "8";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinButton UILookupButton
        {
            get
            {
                if ((this.mUILookupButton == null))
                {
                    this.mUILookupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILookupButton.SearchProperties[WinButton.PropertyNames.Name] = "Lookup...";
                    this.mUILookupButton.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUILookupButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILookupButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow61 : WinWindow
    {
        
        public UIItemWindow61(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow71 : WinWindow
    {
        
        public UIItemWindow71(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "5";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINextWindow : WinWindow
    {
        
        public UINextWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "82";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinButton UINextButton
        {
            get
            {
                if ((this.mUINextButton == null))
                {
                    this.mUINextButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINextButton.SearchProperties[WinButton.PropertyNames.Name] = "Next >";
                    this.mUINextButton.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUINextButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINextButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow81 : WinWindow
    {
        
        public UIItemWindow81(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINextWindow1 : WinWindow
    {
        
        public UINextWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "136";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinButton UINextButton
        {
            get
            {
                if ((this.mUINextButton == null))
                {
                    this.mUINextButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINextButton.SearchProperties[WinButton.PropertyNames.Name] = "Next >";
                    this.mUINextButton.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUINextButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINextButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINextWindow2 : WinWindow
    {
        
        public UINextWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "135";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinButton UINextButton
        {
            get
            {
                if ((this.mUINextButton == null))
                {
                    this.mUINextButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINextButton.SearchProperties[WinButton.PropertyNames.Name] = "Next >";
                    this.mUINextButton.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUINextButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINextButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINextWindow3 : WinWindow
    {
        
        public UINextWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "117";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinButton UINextButton
        {
            get
            {
                if ((this.mUINextButton == null))
                {
                    this.mUINextButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINextButton.SearchProperties[WinButton.PropertyNames.Name] = "Next >";
                    this.mUINextButton.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUINextButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINextButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow221 : WinWindow
    {
        
        public UIItemWindow221(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "6";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow321 : WinWindow
    {
        
        public UIItemWindow321(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINextWindow4 : WinWindow
    {
        
        public UINextWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "110";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinButton UINextButton
        {
            get
            {
                if ((this.mUINextButton == null))
                {
                    this.mUINextButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINextButton.SearchProperties[WinButton.PropertyNames.Name] = "Next >";
                    this.mUINextButton.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUINextButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINextButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow411 : WinWindow
    {
        
        public UIItemWindow411(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "8";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINextWindow5 : WinWindow
    {
        
        public UINextWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "77";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinButton UINextButton
        {
            get
            {
                if ((this.mUINextButton == null))
                {
                    this.mUINextButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINextButton.SearchProperties[WinButton.PropertyNames.Name] = "Next >";
                    this.mUINextButton.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUINextButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINextButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINextWindow6 : WinWindow
    {
        
        public UINextWindow6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "78";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinButton UINextButton
        {
            get
            {
                if ((this.mUINextButton == null))
                {
                    this.mUINextButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINextButton.SearchProperties[WinButton.PropertyNames.Name] = "Next >";
                    this.mUINextButton.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUINextButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINextButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIQuoteWindow : WinWindow
    {
        
        public UIQuoteWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "12";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinButton UIQuoteButton
        {
            get
            {
                if ((this.mUIQuoteButton == null))
                {
                    this.mUIQuoteButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIQuoteButton.SearchProperties[WinButton.PropertyNames.Name] = "Quote";
                    this.mUIQuoteButton.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUIQuoteButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIQuoteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIExitWindow : WinWindow
    {
        
        public UIExitWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "22";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinButton UIExitButton
        {
            get
            {
                if ((this.mUIExitButton == null))
                {
                    this.mUIExitButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIExitButton.SearchProperties[WinButton.PropertyNames.Name] = "Exit";
                    this.mUIExitButton.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUIExitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIExitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMTAWindow : WinWindow
    {
        
        public UIMTAWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "48";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinButton UIMTAButton
        {
            get
            {
                if ((this.mUIMTAButton == null))
                {
                    this.mUIMTAButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMTAButton.SearchProperties[WinButton.PropertyNames.Name] = "MTA...";
                    this.mUIMTAButton.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUIMTAButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIMTAButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICancelWindow3 : WinWindow
    {
        
        public UICancelWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "83";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMTAWindow1 : WinWindow
    {
        
        public UIMTAWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "81";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinButton UIMTAButton
        {
            get
            {
                if ((this.mUIMTAButton == null))
                {
                    this.mUIMTAButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMTAButton.SearchProperties[WinButton.PropertyNames.Name] = "MTA";
                    this.mUIMTAButton.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUIMTAButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIMTAButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow91 : WinWindow
    {
        
        public UIItemWindow91(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "SSTabCtlWndClass";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinClient UIHouseholdQuoteClient
        {
            get
            {
                if ((this.mUIHouseholdQuoteClient == null))
                {
                    this.mUIHouseholdQuoteClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIHouseholdQuoteClient.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUIHouseholdQuoteClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIHouseholdQuoteClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIEDIMatchWindow : WinWindow
    {
        
        public UIEDIMatchWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinButton UIEDIMatchButton
        {
            get
            {
                if ((this.mUIEDIMatchButton == null))
                {
                    this.mUIEDIMatchButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIEDIMatchButton.SearchProperties[WinButton.PropertyNames.Name] = "EDI Match...";
                    this.mUIEDIMatchButton.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUIEDIMatchButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIEDIMatchButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILogandClearWindow : WinWindow
    {
        
        public UILogandClearWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "5";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinButton UILogandClearButton
        {
            get
            {
                if ((this.mUILogandClearButton == null))
                {
                    this.mUILogandClearButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILogandClearButton.SearchProperties[WinButton.PropertyNames.Name] = "Log and Clear";
                    this.mUILogandClearButton.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUILogandClearButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILogandClearButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow101 : WinWindow
    {
        
        public UIItemWindow101(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ListView20WndClass";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinClient UIInsurETAMRenewalsClient
        {
            get
            {
                if ((this.mUIInsurETAMRenewalsClient == null))
                {
                    this.mUIInsurETAMRenewalsClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIInsurETAMRenewalsClient.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUIInsurETAMRenewalsClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIInsurETAMRenewalsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDisplayRecordWindow : WinWindow
    {
        
        public UIDisplayRecordWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "3";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinButton UIDisplayRecordButton
        {
            get
            {
                if ((this.mUIDisplayRecordButton == null))
                {
                    this.mUIDisplayRecordButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIDisplayRecordButton.SearchProperties[WinButton.PropertyNames.Name] = "Display Record...";
                    this.mUIDisplayRecordButton.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUIDisplayRecordButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIDisplayRecordButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFilterWindow2 : WinWindow
    {
        
        public UIFilterWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "9";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinButton UIFilterButton
        {
            get
            {
                if ((this.mUIFilterButton == null))
                {
                    this.mUIFilterButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIFilterButton.SearchProperties[WinButton.PropertyNames.Name] = "Filter...";
                    this.mUIFilterButton.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUIFilterButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIFilterButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow122 : WinWindow
    {
        
        public UIItemWindow122(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "msvb_lib_header";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinClient UIInsurETAMRenewalsClient
        {
            get
            {
                if ((this.mUIInsurETAMRenewalsClient == null))
                {
                    this.mUIInsurETAMRenewalsClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIInsurETAMRenewalsClient.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUIInsurETAMRenewalsClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIInsurETAMRenewalsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIExitWindow1 : WinWindow
    {
        
        public UIExitWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "10";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinButton UIExitButton
        {
            get
            {
                if ((this.mUIExitButton == null))
                {
                    this.mUIExitButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIExitButton.SearchProperties[WinButton.PropertyNames.Name] = "Exit";
                    this.mUIExitButton.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUIExitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIExitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow131 : WinWindow
    {
        
        public UIItemWindow131(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICancelWindow11 : WinWindow
    {
        
        public UICancelWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "83";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICancelWindow21 : WinWindow
    {
        
        public UICancelWindow21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "11";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICreditCheckWindow : WinWindow
    {
        
        public UICreditCheckWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Credit Check", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Credit Check");
            #endregion
        }
        
        #region Properties
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINOWindow mUINOWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Credit Check");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Credit Check");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIQuoteResultsWindow : WinWindow
    {
        
        public UIQuoteResultsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Quote Results";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Quote Results");
            #endregion
        }
        
        #region Properties
        public UIItemWindow18 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow18(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIAcceptWindow UIAcceptWindow
        {
            get
            {
                if ((this.mUIAcceptWindow == null))
                {
                    this.mUIAcceptWindow = new UIAcceptWindow(this);
                }
                return this.mUIAcceptWindow;
            }
        }
        
        public WinTitleBar UIQuoteResultsTitleBar
        {
            get
            {
                if ((this.mUIQuoteResultsTitleBar == null))
                {
                    this.mUIQuoteResultsTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIQuoteResultsTitleBar.WindowTitles.Add("Quote Results");
                    #endregion
                }
                return this.mUIQuoteResultsTitleBar;
            }
        }
        
        public WinClient UIQuoteResultsClient
        {
            get
            {
                if ((this.mUIQuoteResultsClient == null))
                {
                    this.mUIQuoteResultsClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIQuoteResultsClient.SearchProperties[WinControl.PropertyNames.Name] = "Quote Results";
                    this.mUIQuoteResultsClient.WindowTitles.Add("Quote Results");
                    #endregion
                }
                return this.mUIQuoteResultsClient;
            }
        }
        
        public UIExitWindow2 UIExitWindow
        {
            get
            {
                if ((this.mUIExitWindow == null))
                {
                    this.mUIExitWindow = new UIExitWindow2(this);
                }
                return this.mUIExitWindow;
            }
        }
        
        public UIQuoteDetailsWindow UIQuoteDetailsWindow
        {
            get
            {
                if ((this.mUIQuoteDetailsWindow == null))
                {
                    this.mUIQuoteDetailsWindow = new UIQuoteDetailsWindow(this);
                }
                return this.mUIQuoteDetailsWindow;
            }
        }
        
        public UIPrintQuoteWindow UIPrintQuoteWindow
        {
            get
            {
                if ((this.mUIPrintQuoteWindow == null))
                {
                    this.mUIPrintQuoteWindow = new UIPrintQuoteWindow(this);
                }
                return this.mUIPrintQuoteWindow;
            }
        }
        
        public UIDemandsNeedsWindow UIDemandsNeedsWindow
        {
            get
            {
                if ((this.mUIDemandsNeedsWindow == null))
                {
                    this.mUIDemandsNeedsWindow = new UIDemandsNeedsWindow(this);
                }
                return this.mUIDemandsNeedsWindow;
            }
        }
        
        public UIPolicySummaryWindow UIPolicySummaryWindow
        {
            get
            {
                if ((this.mUIPolicySummaryWindow == null))
                {
                    this.mUIPolicySummaryWindow = new UIPolicySummaryWindow(this);
                }
                return this.mUIPolicySummaryWindow;
            }
        }
        
        public UIComprehensiveWindow UIComprehensiveWindow
        {
            get
            {
                if ((this.mUIComprehensiveWindow == null))
                {
                    this.mUIComprehensiveWindow = new UIComprehensiveWindow(this);
                }
                return this.mUIComprehensiveWindow;
            }
        }
        
        public UIItemWindow19 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow19(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIAWAPWindow UIAWAPWindow
        {
            get
            {
                if ((this.mUIAWAPWindow == null))
                {
                    this.mUIAWAPWindow = new UIAWAPWindow(this);
                }
                return this.mUIAWAPWindow;
            }
        }
        
        public UIPremiumWindow UIPremiumWindow
        {
            get
            {
                if ((this.mUIPremiumWindow == null))
                {
                    this.mUIPremiumWindow = new UIPremiumWindow(this);
                }
                return this.mUIPremiumWindow;
            }
        }
        
        public UIItemWindow25 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow25(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIItemWindow33 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow33(this);
                }
                return this.mUIItemWindow3;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow18 mUIItemWindow;
        
        private UIAcceptWindow mUIAcceptWindow;
        
        private WinTitleBar mUIQuoteResultsTitleBar;
        
        private WinClient mUIQuoteResultsClient;
        
        private UIExitWindow2 mUIExitWindow;
        
        private UIQuoteDetailsWindow mUIQuoteDetailsWindow;
        
        private UIPrintQuoteWindow mUIPrintQuoteWindow;
        
        private UIDemandsNeedsWindow mUIDemandsNeedsWindow;
        
        private UIPolicySummaryWindow mUIPolicySummaryWindow;
        
        private UIComprehensiveWindow mUIComprehensiveWindow;
        
        private UIItemWindow19 mUIItemWindow1;
        
        private UIAWAPWindow mUIAWAPWindow;
        
        private UIPremiumWindow mUIPremiumWindow;
        
        private UIItemWindow25 mUIItemWindow2;
        
        private UIItemWindow33 mUIItemWindow3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow18 : WinWindow
    {
        
        public UIItemWindow18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ListView20WndClass";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "11";
            this.WindowTitles.Add("Quote Results");
            #endregion
        }
        
        #region Properties
        public WinClient UIQuoteResultsClient
        {
            get
            {
                if ((this.mUIQuoteResultsClient == null))
                {
                    this.mUIQuoteResultsClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIQuoteResultsClient.WindowTitles.Add("Quote Results");
                    #endregion
                }
                return this.mUIQuoteResultsClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIQuoteResultsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAcceptWindow : WinWindow
    {
        
        public UIAcceptWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "5";
            this.WindowTitles.Add("Quote Results");
            #endregion
        }
        
        #region Properties
        public WinButton UIAcceptButton
        {
            get
            {
                if ((this.mUIAcceptButton == null))
                {
                    this.mUIAcceptButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAcceptButton.SearchProperties[WinButton.PropertyNames.Name] = "Accept";
                    this.mUIAcceptButton.WindowTitles.Add("Quote Results");
                    #endregion
                }
                return this.mUIAcceptButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAcceptButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIExitWindow2 : WinWindow
    {
        
        public UIExitWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "4";
            this.WindowTitles.Add("Quote Results");
            #endregion
        }
        
        #region Properties
        public WinButton UIExitButton
        {
            get
            {
                if ((this.mUIExitButton == null))
                {
                    this.mUIExitButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIExitButton.SearchProperties[WinButton.PropertyNames.Name] = "Exit";
                    this.mUIExitButton.WindowTitles.Add("Quote Results");
                    #endregion
                }
                return this.mUIExitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIExitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIQuoteDetailsWindow : WinWindow
    {
        
        public UIQuoteDetailsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Quote Results");
            #endregion
        }
        
        #region Properties
        public WinGroup UIQuoteDetailsGroup
        {
            get
            {
                if ((this.mUIQuoteDetailsGroup == null))
                {
                    this.mUIQuoteDetailsGroup = new WinGroup(this);
                    #region Search Criteria
                    this.mUIQuoteDetailsGroup.SearchProperties[WinControl.PropertyNames.Name] = "Quote Details";
                    this.mUIQuoteDetailsGroup.WindowTitles.Add("Quote Results");
                    #endregion
                }
                return this.mUIQuoteDetailsGroup;
            }
        }
        #endregion
        
        #region Fields
        private WinGroup mUIQuoteDetailsGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPrintQuoteWindow : WinWindow
    {
        
        public UIPrintQuoteWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Quote Results");
            #endregion
        }
        
        #region Properties
        public WinButton UIPrintQuoteButton
        {
            get
            {
                if ((this.mUIPrintQuoteButton == null))
                {
                    this.mUIPrintQuoteButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPrintQuoteButton.SearchProperties[WinButton.PropertyNames.Name] = "Print Quote...";
                    this.mUIPrintQuoteButton.WindowTitles.Add("Quote Results");
                    #endregion
                }
                return this.mUIPrintQuoteButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIPrintQuoteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDemandsNeedsWindow : WinWindow
    {
        
        public UIDemandsNeedsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "8";
            this.WindowTitles.Add("Quote Results");
            #endregion
        }
        
        #region Properties
        public WinButton UIDemandsNeedsButton
        {
            get
            {
                if ((this.mUIDemandsNeedsButton == null))
                {
                    this.mUIDemandsNeedsButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIDemandsNeedsButton.SearchProperties[WinButton.PropertyNames.Name] = "Demands & Needs";
                    this.mUIDemandsNeedsButton.WindowTitles.Add("Quote Results");
                    #endregion
                }
                return this.mUIDemandsNeedsButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIDemandsNeedsButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPolicySummaryWindow : WinWindow
    {
        
        public UIPolicySummaryWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "9";
            this.WindowTitles.Add("Quote Results");
            #endregion
        }
        
        #region Properties
        public WinButton UIPolicySummaryButton
        {
            get
            {
                if ((this.mUIPolicySummaryButton == null))
                {
                    this.mUIPolicySummaryButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPolicySummaryButton.SearchProperties[WinButton.PropertyNames.Name] = "Policy Summary";
                    this.mUIPolicySummaryButton.WindowTitles.Add("Quote Results");
                    #endregion
                }
                return this.mUIPolicySummaryButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIPolicySummaryButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIComprehensiveWindow : WinWindow
    {
        
        public UIComprehensiveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "23";
            this.WindowTitles.Add("Quote Results");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UIComprehensiveRadioButton
        {
            get
            {
                if ((this.mUIComprehensiveRadioButton == null))
                {
                    this.mUIComprehensiveRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIComprehensiveRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Comprehensive";
                    this.mUIComprehensiveRadioButton.WindowTitles.Add("Quote Results");
                    #endregion
                }
                return this.mUIComprehensiveRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUIComprehensiveRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow19 : WinWindow
    {
        
        public UIItemWindow19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "SSTabCtlWndClass";
            this.WindowTitles.Add("Quote Results");
            #endregion
        }
        
        #region Properties
        public WinClient UIQuoteResultsClient
        {
            get
            {
                if ((this.mUIQuoteResultsClient == null))
                {
                    this.mUIQuoteResultsClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIQuoteResultsClient.WindowTitles.Add("Quote Results");
                    #endregion
                }
                return this.mUIQuoteResultsClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIQuoteResultsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAWAPWindow : WinWindow
    {
        
        public UIAWAPWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "3";
            this.WindowTitles.Add("Quote Results");
            #endregion
        }
        
        #region Properties
        public WinButton UIAWAPButton
        {
            get
            {
                if ((this.mUIAWAPButton == null))
                {
                    this.mUIAWAPButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAWAPButton.SearchProperties[WinButton.PropertyNames.Name] = "AWAP";
                    this.mUIAWAPButton.WindowTitles.Add("Quote Results");
                    #endregion
                }
                return this.mUIAWAPButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAWAPButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPremiumWindow : WinWindow
    {
        
        public UIPremiumWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "15";
            this.WindowTitles.Add("Quote Results");
            #endregion
        }
        
        #region Properties
        public WinButton UIPremiumButton
        {
            get
            {
                if ((this.mUIPremiumButton == null))
                {
                    this.mUIPremiumButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPremiumButton.SearchProperties[WinButton.PropertyNames.Name] = "Premium";
                    this.mUIPremiumButton.WindowTitles.Add("Quote Results");
                    #endregion
                }
                return this.mUIPremiumButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIPremiumButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow25 : WinWindow
    {
        
        public UIItemWindow25(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ListView20WndClass";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "10";
            this.WindowTitles.Add("Quote Results");
            #endregion
        }
        
        #region Properties
        public WinClient UIQuoteResultsClient
        {
            get
            {
                if ((this.mUIQuoteResultsClient == null))
                {
                    this.mUIQuoteResultsClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIQuoteResultsClient.WindowTitles.Add("Quote Results");
                    #endregion
                }
                return this.mUIQuoteResultsClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIQuoteResultsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow33 : WinWindow
    {
        
        public UIItemWindow33(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ListView20WndClass";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "10";
            this.WindowTitles.Add("Quote Results");
            #endregion
        }
        
        #region Properties
        public WinClient UIQuoteResultsClient
        {
            get
            {
                if ((this.mUIQuoteResultsClient == null))
                {
                    this.mUIQuoteResultsClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIQuoteResultsClient.WindowTitles.Add("Quote Results");
                    #endregion
                }
                return this.mUIQuoteResultsClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIQuoteResultsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIInsurEtamWindow1 : WinWindow
    {
        
        public UIInsurEtamWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Personal Lines";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public UIAcceptthisquoteNotOvWindow UIAcceptthisquoteNotOvWindow
        {
            get
            {
                if ((this.mUIAcceptthisquoteNotOvWindow == null))
                {
                    this.mUIAcceptthisquoteNotOvWindow = new UIAcceptthisquoteNotOvWindow(this);
                }
                return this.mUIAcceptthisquoteNotOvWindow;
            }
        }
        
        public UIYesWindow1 UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow1(this);
                }
                return this.mUIYesWindow;
            }
        }
        
        public UIOKWindow12 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow12(this);
                }
                return this.mUIOKWindow;
            }
        }
        
        public UINOWindow1 UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow1(this);
                }
                return this.mUINOWindow;
            }
        }
        
        public WinControl UIInsurEtamDialog
        {
            get
            {
                if ((this.mUIInsurEtamDialog == null))
                {
                    this.mUIInsurEtamDialog = new WinControl(this);
                    #region Search Criteria
                    this.mUIInsurEtamDialog.SearchProperties[UITestControl.PropertyNames.Name] = "insur-E.tam";
                    this.mUIInsurEtamDialog.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
                    this.mUIInsurEtamDialog.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUIInsurEtamDialog;
            }
        }
        
        public UIOKWindow13 UIOKWindow1
        {
            get
            {
                if ((this.mUIOKWindow1 == null))
                {
                    this.mUIOKWindow1 = new UIOKWindow13(this);
                }
                return this.mUIOKWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIAcceptthisquoteNotOvWindow mUIAcceptthisquoteNotOvWindow;
        
        private UIYesWindow1 mUIYesWindow;
        
        private UIOKWindow12 mUIOKWindow;
        
        private UINOWindow1 mUINOWindow;
        
        private WinControl mUIInsurEtamDialog;
        
        private UIOKWindow13 mUIOKWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAcceptthisquoteNotOvWindow : WinWindow
    {
        
        public UIAcceptthisquoteNotOvWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinText UIAcceptthisquoteNotOvText
        {
            get
            {
                if ((this.mUIAcceptthisquoteNotOvText == null))
                {
                    this.mUIAcceptthisquoteNotOvText = new WinText(this);
                    #region Search Criteria
                    this.mUIAcceptthisquoteNotOvText.SearchProperties[WinText.PropertyNames.Name] = "Accept this quote (Not Overridden) -  £3007.16, RA002050?  This is a TEST Account" +
                        ", NO EDI message will be sent";
                    this.mUIAcceptthisquoteNotOvText.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUIAcceptthisquoteNotOvText;
            }
        }
        
        public WinText UICoverCantBeBackDatedText
        {
            get
            {
                if ((this.mUICoverCantBeBackDatedText == null))
                {
                    this.mUICoverCantBeBackDatedText = new WinText(this);
                    #region Search Criteria
                    this.mUICoverCantBeBackDatedText.SearchProperties[WinText.PropertyNames.Name] = "Cover Cant Be Back Dated - Please enter Adjustment Date.";
                    this.mUICoverCantBeBackDatedText.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUICoverCantBeBackDatedText;
            }
        }
        
        public WinText UIDateBeforeCurrentMTAText
        {
            get
            {
                if ((this.mUIDateBeforeCurrentMTAText == null))
                {
                    this.mUIDateBeforeCurrentMTAText = new WinText(this);
                    #region Search Criteria
                    this.mUIDateBeforeCurrentMTAText.SearchProperties[WinText.PropertyNames.Name] = "Date Before Current MTA Effective Date - Please enter Adjustment Date.";
                    this.mUIDateBeforeCurrentMTAText.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUIDateBeforeCurrentMTAText;
            }
        }
        
        public WinText UIAdjustmentdatetimecaText
        {
            get
            {
                if ((this.mUIAdjustmentdatetimecaText == null))
                {
                    this.mUIAdjustmentdatetimecaText = new WinText(this);
                    #region Search Criteria
                    this.mUIAdjustmentdatetimecaText.SearchProperties.Add(new PropertyExpression(WinText.PropertyNames.Name, "Adjustment date/time cannot be after the policy effective end date/time", PropertyExpressionOperator.Contains));
                    this.mUIAdjustmentdatetimecaText.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUIAdjustmentdatetimecaText;
            }
        }
        
        public WinText UIDateBeforeInceptionDText
        {
            get
            {
                if ((this.mUIDateBeforeInceptionDText == null))
                {
                    this.mUIDateBeforeInceptionDText = new WinText(this);
                    #region Search Criteria
                    this.mUIDateBeforeInceptionDText.SearchProperties[WinText.PropertyNames.Name] = "Date Before Inception Date - Please enter Adjustment Date.";
                    this.mUIDateBeforeInceptionDText.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUIDateBeforeInceptionDText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIAcceptthisquoteNotOvText;
        
        private WinText mUICoverCantBeBackDatedText;
        
        private WinText mUIDateBeforeCurrentMTAText;
        
        private WinText mUIAdjustmentdatetimecaText;
        
        private WinText mUIDateBeforeInceptionDText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIYesWindow1 : WinWindow
    {
        
        public UIYesWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow12 : WinWindow
    {
        
        public UIOKWindow12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINOWindow1 : WinWindow
    {
        
        public UINOWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow13 : WinWindow
    {
        
        public UIOKWindow13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("insur-E.tam");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("insur-E.tam");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPaymentMethodsWindow : WinWindow
    {
        
        public UIPaymentMethodsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Payment Methods";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Payment Methods");
            #endregion
        }
        
        #region Properties
        public UIOKWindow14 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow14(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow14 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow14 : WinWindow
    {
        
        public UIOKWindow14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Payment Methods");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "Ok";
                    this.mUIOKButton.WindowTitles.Add("Payment Methods");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIConfirmDocumentsWindow : WinWindow
    {
        
        public UIConfirmDocumentsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Documents";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Confirm Documents");
            #endregion
        }
        
        #region Properties
        public UIOKWindow15 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow15(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow15 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow15 : WinWindow
    {
        
        public UIOKWindow15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Confirm Documents");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "Ok";
                    this.mUIOKButton.WindowTitles.Add("Confirm Documents");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPolicyDateTimeWindow : WinWindow
    {
        
        public UIPolicyDateTimeWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Policy Date / Time";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Policy Date / Time");
            #endregion
        }
        
        #region Properties
        public UIConfirmWindow UIConfirmWindow
        {
            get
            {
                if ((this.mUIConfirmWindow == null))
                {
                    this.mUIConfirmWindow = new UIConfirmWindow(this);
                }
                return this.mUIConfirmWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIConfirmWindow mUIConfirmWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIConfirmWindow : WinWindow
    {
        
        public UIConfirmWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "5";
            this.WindowTitles.Add("Policy Date / Time");
            #endregion
        }
        
        #region Properties
        public WinButton UIConfirmButton
        {
            get
            {
                if ((this.mUIConfirmButton == null))
                {
                    this.mUIConfirmButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIConfirmButton.SearchProperties[WinButton.PropertyNames.Name] = "Confirm";
                    this.mUIConfirmButton.WindowTitles.Add("Policy Date / Time");
                    #endregion
                }
                return this.mUIConfirmButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIConfirmButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISavethefileasWindow : WinWindow
    {
        
        public UISavethefileasWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save the file as";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save the file as");
            #endregion
        }
        
        #region Properties
        public UICancelWindow4 UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow4(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UIItemWindow20 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow20(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        #endregion
        
        #region Fields
        private UICancelWindow4 mUICancelWindow;
        
        private UIItemWindow20 mUIItemWindow;
        
        private UISaveWindow mUISaveWindow;
        
        private UIDetailsPanePane mUIDetailsPanePane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICancelWindow4 : WinWindow
    {
        
        public UICancelWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Save the file as");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Save the file as");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow20 : WinWindow
    {
        
        public UIItemWindow20(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Save the file as");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Save the file as");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save the file as");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save the file as");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save the file as");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save the file as");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPointOfSaleWindow : WinWindow
    {
        
        public UIPointOfSaleWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Point Of Sale";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Point Of Sale");
            #endregion
        }
        
        #region Properties
        public UIDeferPrintingWindow UIDeferPrintingWindow
        {
            get
            {
                if ((this.mUIDeferPrintingWindow == null))
                {
                    this.mUIDeferPrintingWindow = new UIDeferPrintingWindow(this);
                }
                return this.mUIDeferPrintingWindow;
            }
        }
        
        public UIOKWindow16 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow16(this);
                }
                return this.mUIOKWindow;
            }
        }
        
        public WinClient UIPointOfSaleClient
        {
            get
            {
                if ((this.mUIPointOfSaleClient == null))
                {
                    this.mUIPointOfSaleClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIPointOfSaleClient.SearchProperties[WinControl.PropertyNames.Name] = "Point Of Sale";
                    this.mUIPointOfSaleClient.WindowTitles.Add("Point Of Sale");
                    #endregion
                }
                return this.mUIPointOfSaleClient;
            }
        }
        #endregion
        
        #region Fields
        private UIDeferPrintingWindow mUIDeferPrintingWindow;
        
        private UIOKWindow16 mUIOKWindow;
        
        private WinClient mUIPointOfSaleClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDeferPrintingWindow : WinWindow
    {
        
        public UIDeferPrintingWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "3";
            this.WindowTitles.Add("Point Of Sale");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIDeferPrintingCheckBox
        {
            get
            {
                if ((this.mUIDeferPrintingCheckBox == null))
                {
                    this.mUIDeferPrintingCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIDeferPrintingCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Defer Printing?";
                    this.mUIDeferPrintingCheckBox.WindowTitles.Add("Point Of Sale");
                    #endregion
                }
                return this.mUIDeferPrintingCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIDeferPrintingCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow16 : WinWindow
    {
        
        public UIOKWindow16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Point Of Sale");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "Ok";
                    this.mUIOKButton.WindowTitles.Add("Point Of Sale");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIImporttoTAMWindow : WinWindow
    {
        
        public UIImporttoTAMWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Import to TAM";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfImportToTam";
            this.WindowTitles.Add("Import to TAM");
            #endregion
        }
        
        #region Properties
        public UIImportOptionsClient UIImportOptionsClient
        {
            get
            {
                if ((this.mUIImportOptionsClient == null))
                {
                    this.mUIImportOptionsClient = new UIImportOptionsClient(this);
                }
                return this.mUIImportOptionsClient;
            }
        }
        
        public UIImporttoTAMClient UIImporttoTAMClient
        {
            get
            {
                if ((this.mUIImporttoTAMClient == null))
                {
                    this.mUIImporttoTAMClient = new UIImporttoTAMClient(this);
                }
                return this.mUIImporttoTAMClient;
            }
        }
        
        public UIPanel1Client UIPanel1Client
        {
            get
            {
                if ((this.mUIPanel1Client == null))
                {
                    this.mUIPanel1Client = new UIPanel1Client(this);
                }
                return this.mUIPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private UIImportOptionsClient mUIImportOptionsClient;
        
        private UIImporttoTAMClient mUIImporttoTAMClient;
        
        private UIPanel1Client mUIPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIImportOptionsClient : WinClient
    {
        
        public UIImportOptionsClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Import Options";
            this.WindowTitles.Add("Import to TAM");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIAddActivityCheckBox
        {
            get
            {
                if ((this.mUIAddActivityCheckBox == null))
                {
                    this.mUIAddActivityCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIAddActivityCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Add Activity";
                    this.mUIAddActivityCheckBox.WindowTitles.Add("Import to TAM");
                    #endregion
                }
                return this.mUIAddActivityCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIAddActivityCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIImporttoTAMClient : WinClient
    {
        
        public UIImporttoTAMClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Import to TAM";
            this.WindowTitles.Add("Import to TAM");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "Ok";
                    this.mUIOKButton.WindowTitles.Add("Import to TAM");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPanel1Client : WinClient
    {
        
        public UIPanel1Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Panel1";
            this.WindowTitles.Add("Import to TAM");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "Ok";
                    this.mUIOKButton.WindowTitles.Add("Import to TAM");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITransactiontoinsertWindow : WinWindow
    {
        
        public UITransactiontoinsertWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Transaction to insert";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfSelectItem";
            this.WindowTitles.Add("Transaction to insert");
            #endregion
        }
        
        #region Properties
        public UIItemWindow26 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow26(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow26 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow26 : WinWindow
    {
        
        public UIItemWindow26(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TPanel";
            this.WindowTitles.Add("Transaction to insert");
            #endregion
        }
        
        #region Properties
        public UITransactiontoinsertClient UITransactiontoinsertClient
        {
            get
            {
                if ((this.mUITransactiontoinsertClient == null))
                {
                    this.mUITransactiontoinsertClient = new UITransactiontoinsertClient(this);
                }
                return this.mUITransactiontoinsertClient;
            }
        }
        #endregion
        
        #region Fields
        private UITransactiontoinsertClient mUITransactiontoinsertClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITransactiontoinsertClient : WinClient
    {
        
        public UITransactiontoinsertClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Transaction to insert");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "Ok";
                    this.mUIOKButton.WindowTitles.Add("Transaction to insert");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITamxml7Window : WinWindow
    {
        
        public UITamxml7Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Tamxml7";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TMessageForm";
            this.WindowTitles.Add("Tamxml7");
            #endregion
        }
        
        #region Properties
        public UITamxml7Client UITamxml7Client
        {
            get
            {
                if ((this.mUITamxml7Client == null))
                {
                    this.mUITamxml7Client = new UITamxml7Client(this);
                }
                return this.mUITamxml7Client;
            }
        }
        #endregion
        
        #region Fields
        private UITamxml7Client mUITamxml7Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITamxml7Client : WinClient
    {
        
        public UITamxml7Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Tamxml7";
            this.WindowTitles.Add("Tamxml7");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Tamxml7");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPolicyrtyertWindow : WinWindow
    {
        
        public UIPolicyrtyertWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Policy: rty ert";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6MDIForm";
            this.WindowTitles.Add("Policy: rty ert");
            #endregion
        }
        
        #region Properties
        public UIBillingScreenMOTOTESWindow UIBillingScreenMOTOTESWindow
        {
            get
            {
                if ((this.mUIBillingScreenMOTOTESWindow == null))
                {
                    this.mUIBillingScreenMOTOTESWindow = new UIBillingScreenMOTOTESWindow(this);
                }
                return this.mUIBillingScreenMOTOTESWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIBillingScreenMOTOTESWindow mUIBillingScreenMOTOTESWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIBillingScreenMOTOTESWindow : WinWindow
    {
        
        public UIBillingScreenMOTOTESWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "32770";
            this.WindowTitles.Add("Policy: rty ert");
            #endregion
        }
        
        #region Properties
        public UIItemWindow27 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow27(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow27 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow27 : WinWindow
    {
        
        public UIItemWindow27(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "25";
            this.WindowTitles.Add("Policy: rty ert");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Policy: rty ert");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISelectTaminsurerforiWindow : WinWindow
    {
        
        public UISelectTaminsurerforiWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Select Tam insurer for insurer code ";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfSelectItem";
            this.WindowTitles.Add("Select Tam insurer for insurer code ");
            #endregion
        }
        
        #region Properties
        public UIItemWindow28 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow28(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow110 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow110(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow28 mUIItemWindow;
        
        private UIItemWindow110 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow28 : WinWindow
    {
        
        public UIItemWindow28(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TListView";
            this.WindowTitles.Add("Select Tam insurer for insurer code ");
            #endregion
        }
        
        #region Properties
        public WinList UIItemList
        {
            get
            {
                if ((this.mUIItemList == null))
                {
                    this.mUIItemList = new WinList(this);
                    #region Search Criteria
                    this.mUIItemList.WindowTitles.Add("Select Tam insurer for insurer code ");
                    #endregion
                }
                return this.mUIItemList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIItemList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow110 : WinWindow
    {
        
        public UIItemWindow110(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TPanel";
            this.WindowTitles.Add("Select Tam insurer for insurer code ");
            #endregion
        }
        
        #region Properties
        public UISelectTaminsurerforiClient UISelectTaminsurerforiClient
        {
            get
            {
                if ((this.mUISelectTaminsurerforiClient == null))
                {
                    this.mUISelectTaminsurerforiClient = new UISelectTaminsurerforiClient(this);
                }
                return this.mUISelectTaminsurerforiClient;
            }
        }
        #endregion
        
        #region Fields
        private UISelectTaminsurerforiClient mUISelectTaminsurerforiClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISelectTaminsurerforiClient : WinClient
    {
        
        public UISelectTaminsurerforiClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Select Tam insurer for insurer code ");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "Ok";
                    this.mUIOKButton.WindowTitles.Add("Select Tam insurer for insurer code ");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPolicyautotestWindow : WinWindow
    {
        
        public UIPolicyautotestWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6MDIForm";
            #endregion
        }
        
        #region Properties
        public UIPolicyListWindow1 UIPolicyListWindow
        {
            get
            {
                if ((this.mUIPolicyListWindow == null))
                {
                    this.mUIPolicyListWindow = new UIPolicyListWindow1(this);
                }
                return this.mUIPolicyListWindow;
            }
        }
        
        public UIItemWindow30 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow30(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIPolicyListWindow11 UIPolicyListWindow1
        {
            get
            {
                if ((this.mUIPolicyListWindow1 == null))
                {
                    this.mUIPolicyListWindow1 = new UIPolicyListWindow11(this);
                }
                return this.mUIPolicyListWindow1;
            }
        }
        
        public UIBillingScreenMOTOWindow UIBillingScreenMOTOWindow
        {
            get
            {
                if ((this.mUIBillingScreenMOTOWindow == null))
                {
                    this.mUIBillingScreenMOTOWindow = new UIBillingScreenMOTOWindow(this);
                }
                return this.mUIBillingScreenMOTOWindow;
            }
        }
        
        public UIApplicationMenuBar1 UIApplicationMenuBar
        {
            get
            {
                if ((this.mUIApplicationMenuBar == null))
                {
                    this.mUIApplicationMenuBar = new UIApplicationMenuBar1(this);
                }
                return this.mUIApplicationMenuBar;
            }
        }
        
        public WinTitleBar UIPolicyautotestTitleBar
        {
            get
            {
                if ((this.mUIPolicyautotestTitleBar == null))
                {
                    this.mUIPolicyautotestTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIPolicyautotestTitleBar.WindowTitles.Add("Policy: autotest");
                    #endregion
                }
                return this.mUIPolicyautotestTitleBar;
            }
        }
        
        public UIWorkspaceClient UIWorkspaceClient
        {
            get
            {
                if ((this.mUIWorkspaceClient == null))
                {
                    this.mUIWorkspaceClient = new UIWorkspaceClient(this);
                }
                return this.mUIWorkspaceClient;
            }
        }
        
        public UIBillingScreenHOMEWindow1 UIBillingScreenHOMEWindow1
        {
            get
            {
                if ((this.mUIBillingScreenHOMEWindow1 == null))
                {
                    this.mUIBillingScreenHOMEWindow1 = new UIBillingScreenHOMEWindow1(this);
                }
                return this.mUIBillingScreenHOMEWindow1;
            }
        }
        
        public UIItemWindow115 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow115(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UICUSTOMERSWindow1 UICUSTOMERSWindow
        {
            get
            {
                if ((this.mUICUSTOMERSWindow == null))
                {
                    this.mUICUSTOMERSWindow = new UICUSTOMERSWindow1(this);
                }
                return this.mUICUSTOMERSWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIPolicyListWindow1 mUIPolicyListWindow;
        
        private UIItemWindow30 mUIItemWindow;
        
        private UIPolicyListWindow11 mUIPolicyListWindow1;
        
        private UIBillingScreenMOTOWindow mUIBillingScreenMOTOWindow;
        
        private UIApplicationMenuBar1 mUIApplicationMenuBar;
        
        private WinTitleBar mUIPolicyautotestTitleBar;
        
        private UIWorkspaceClient mUIWorkspaceClient;
        
        private UIBillingScreenHOMEWindow1 mUIBillingScreenHOMEWindow1;
        
        private UIItemWindow115 mUIItemWindow1;
        
        private UICUSTOMERSWindow1 mUICUSTOMERSWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPolicyListWindow1 : WinWindow
    {
        
        public UIPolicyListWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "32769";
            this.WindowTitles.Add("Policy: autotest");
            #endregion
        }
        
        #region Properties
        public UICancelWindow5 UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow5(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UIOptionsWindow1 UIOptionsWindow
        {
            get
            {
                if ((this.mUIOptionsWindow == null))
                {
                    this.mUIOptionsWindow = new UIOptionsWindow1(this);
                }
                return this.mUIOptionsWindow;
            }
        }
        
        public UIItemWindow29 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow29(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIDetailWindow1 UIDetailWindow
        {
            get
            {
                if ((this.mUIDetailWindow == null))
                {
                    this.mUIDetailWindow = new UIDetailWindow1(this);
                }
                return this.mUIDetailWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICancelWindow5 mUICancelWindow;
        
        private UIOptionsWindow1 mUIOptionsWindow;
        
        private UIItemWindow29 mUIItemWindow;
        
        private UIDetailWindow1 mUIDetailWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICancelWindow5 : WinWindow
    {
        
        public UICancelWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "8";
            this.WindowTitles.Add("Policy: autotest");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Policy: autotest");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOptionsWindow1 : WinWindow
    {
        
        public UIOptionsWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Policy: autotest");
            #endregion
        }
        
        #region Properties
        public WinButton UIOptionsButton
        {
            get
            {
                if ((this.mUIOptionsButton == null))
                {
                    this.mUIOptionsButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOptionsButton.SearchProperties[WinButton.PropertyNames.Name] = "Options";
                    this.mUIOptionsButton.WindowTitles.Add("Policy: autotest");
                    #endregion
                }
                return this.mUIOptionsButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOptionsButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow29 : WinWindow
    {
        
        public UIItemWindow29(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Policy: autotest");
            #endregion
        }
        
        #region Properties
        public WinClient UIItemClient
        {
            get
            {
                if ((this.mUIItemClient == null))
                {
                    this.mUIItemClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIItemClient.WindowTitles.Add("Policy: autotest");
                    #endregion
                }
                return this.mUIItemClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIItemClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDetailWindow1 : WinWindow
    {
        
        public UIDetailWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Policy: autotest");
            #endregion
        }
        
        #region Properties
        public WinButton UIDetailButton
        {
            get
            {
                if ((this.mUIDetailButton == null))
                {
                    this.mUIDetailButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIDetailButton.SearchProperties[WinButton.PropertyNames.Name] = "Detail";
                    this.mUIDetailButton.WindowTitles.Add("Policy: autotest");
                    #endregion
                }
                return this.mUIDetailButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIDetailButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow30 : WinWindow
    {
        
        public UIItemWindow30(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "32";
            this.WindowTitles.Add("Customer: autotest");
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIItemButton.WindowTitles.Add("Customer: autotest");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPolicyListWindow11 : WinWindow
    {
        
        public UIPolicyListWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "32769";
            this.WindowTitles.Add("Policy: autotest");
            #endregion
        }
        
        #region Properties
        public UIDetailWindow2 UIDetailWindow
        {
            get
            {
                if ((this.mUIDetailWindow == null))
                {
                    this.mUIDetailWindow = new UIDetailWindow2(this);
                }
                return this.mUIDetailWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDetailWindow2 mUIDetailWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDetailWindow2 : WinWindow
    {
        
        public UIDetailWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Policy: autotest");
            #endregion
        }
        
        #region Properties
        public WinButton UIDetailButton
        {
            get
            {
                if ((this.mUIDetailButton == null))
                {
                    this.mUIDetailButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIDetailButton.SearchProperties[WinButton.PropertyNames.Name] = "Detail";
                    this.mUIDetailButton.WindowTitles.Add("Policy: autotest");
                    #endregion
                }
                return this.mUIDetailButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIDetailButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIBillingScreenMOTOWindow : WinWindow
    {
        
        public UIBillingScreenMOTOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "32770";
            this.WindowTitles.Add("Policy: autotest");
            this.WindowTitles.Add("Transaction: autotest");
            #endregion
        }
        
        #region Properties
        public UICancelWindow6 UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow6(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UIItemWindow34 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow34(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UICancelWindow12 UICancelWindow1
        {
            get
            {
                if ((this.mUICancelWindow1 == null))
                {
                    this.mUICancelWindow1 = new UICancelWindow12(this);
                }
                return this.mUICancelWindow1;
            }
        }
        
        public UIItemWindow114 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow114(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow210 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow210(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIItemWindow35 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow35(this);
                }
                return this.mUIItemWindow3;
            }
        }
        
        public UIOKWindow17 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow17(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICancelWindow6 mUICancelWindow;
        
        private UIItemWindow34 mUIItemWindow;
        
        private UICancelWindow12 mUICancelWindow1;
        
        private UIItemWindow114 mUIItemWindow1;
        
        private UIItemWindow210 mUIItemWindow2;
        
        private UIItemWindow35 mUIItemWindow3;
        
        private UIOKWindow17 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICancelWindow6 : WinWindow
    {
        
        public UICancelWindow6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "3";
            this.WindowTitles.Add("Policy: autotest");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Policy: autotest");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow34 : WinWindow
    {
        
        public UIItemWindow34(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "25";
            this.WindowTitles.Add("Policy: autotest");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Policy: autotest");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICancelWindow12 : WinWindow
    {
        
        public UICancelWindow12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "8";
            this.WindowTitles.Add("Transaction: autotest");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Transaction: autotest");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow114 : WinWindow
    {
        
        public UIItemWindow114(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "13";
            this.WindowTitles.Add("Policy: autotest");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Policy: autotest");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow210 : WinWindow
    {
        
        public UIItemWindow210(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "18";
            this.WindowTitles.Add("Policy: autotest");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Policy: autotest");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow35 : WinWindow
    {
        
        public UIItemWindow35(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Policy: autotest");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Policy: autotest");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow17 : WinWindow
    {
        
        public UIOKWindow17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "13";
            this.WindowTitles.Add("Policy: autotest");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Policy: autotest");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIApplicationMenuBar1 : WinMenuBar
    {
        
        public UIApplicationMenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
            this.WindowTitles.Add("Policy: autotest");
            #endregion
        }
        
        #region Properties
        public UIOptionsMenuItem1 UIOptionsMenuItem
        {
            get
            {
                if ((this.mUIOptionsMenuItem == null))
                {
                    this.mUIOptionsMenuItem = new UIOptionsMenuItem1(this);
                }
                return this.mUIOptionsMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIOptionsMenuItem1 mUIOptionsMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOptionsMenuItem1 : WinMenuItem
    {
        
        public UIOptionsMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Options";
            this.WindowTitles.Add("Policy: autotest");
            #endregion
        }
        
        #region Properties
        public UILinksMenuItem1 UILinksMenuItem
        {
            get
            {
                if ((this.mUILinksMenuItem == null))
                {
                    this.mUILinksMenuItem = new UILinksMenuItem1(this);
                }
                return this.mUILinksMenuItem;
            }
        }
        
        public WinMenuItem UIPrintaBarcodeMenuItem
        {
            get
            {
                if ((this.mUIPrintaBarcodeMenuItem == null))
                {
                    this.mUIPrintaBarcodeMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIPrintaBarcodeMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Print a Barcode";
                    this.mUIPrintaBarcodeMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIPrintaBarcodeMenuItem.WindowTitles.Add("Policy: autotest");
                    #endregion
                }
                return this.mUIPrintaBarcodeMenuItem;
            }
        }
        
        public UILinksMenuItem11 UILinksMenuItem1
        {
            get
            {
                if ((this.mUILinksMenuItem1 == null))
                {
                    this.mUILinksMenuItem1 = new UILinksMenuItem11(this);
                }
                return this.mUILinksMenuItem1;
            }
        }
        
        public UILinksMenuItem2 UILinksMenuItem2
        {
            get
            {
                if ((this.mUILinksMenuItem2 == null))
                {
                    this.mUILinksMenuItem2 = new UILinksMenuItem2(this);
                }
                return this.mUILinksMenuItem2;
            }
        }
        #endregion
        
        #region Fields
        private UILinksMenuItem1 mUILinksMenuItem;
        
        private WinMenuItem mUIPrintaBarcodeMenuItem;
        
        private UILinksMenuItem11 mUILinksMenuItem1;
        
        private UILinksMenuItem2 mUILinksMenuItem2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILinksMenuItem1 : WinMenuItem
    {
        
        public UILinksMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Links";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Policy: autotest");
            #endregion
        }
        
        #region Properties
        public UIItem3rdPartyIntegratMenuItem1 UIItem3rdPartyIntegratMenuItem
        {
            get
            {
                if ((this.mUIItem3rdPartyIntegratMenuItem == null))
                {
                    this.mUIItem3rdPartyIntegratMenuItem = new UIItem3rdPartyIntegratMenuItem1(this);
                }
                return this.mUIItem3rdPartyIntegratMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIItem3rdPartyIntegratMenuItem1 mUIItem3rdPartyIntegratMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItem3rdPartyIntegratMenuItem1 : WinMenuItem
    {
        
        public UIItem3rdPartyIntegratMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "3rd Party Integration";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Policy: autotest");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIQuoteSelectListMenuItem
        {
            get
            {
                if ((this.mUIQuoteSelectListMenuItem == null))
                {
                    this.mUIQuoteSelectListMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIQuoteSelectListMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Quote Select List";
                    this.mUIQuoteSelectListMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIQuoteSelectListMenuItem.WindowTitles.Add("Policy: autotest");
                    #endregion
                }
                return this.mUIQuoteSelectListMenuItem;
            }
        }
        
        public WinMenuItem UICopyRiskMenuItem
        {
            get
            {
                if ((this.mUICopyRiskMenuItem == null))
                {
                    this.mUICopyRiskMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICopyRiskMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Copy Risk";
                    this.mUICopyRiskMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICopyRiskMenuItem.WindowTitles.Add("Policy: autotest");
                    #endregion
                }
                return this.mUICopyRiskMenuItem;
            }
        }
        
        public WinMenuItem UIRenewalsLoaderMenuItem
        {
            get
            {
                if ((this.mUIRenewalsLoaderMenuItem == null))
                {
                    this.mUIRenewalsLoaderMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIRenewalsLoaderMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Renewals Loader";
                    this.mUIRenewalsLoaderMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIRenewalsLoaderMenuItem.WindowTitles.Add("Policy: autotest");
                    #endregion
                }
                return this.mUIRenewalsLoaderMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIQuoteSelectListMenuItem;
        
        private WinMenuItem mUICopyRiskMenuItem;
        
        private WinMenuItem mUIRenewalsLoaderMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILinksMenuItem11 : WinMenuItem
    {
        
        public UILinksMenuItem11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Links";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Policy: autotest");
            #endregion
        }
        
        #region Properties
        public UIItem3rdPartyIntegratMenuItem2 UIItem3rdPartyIntegratMenuItem
        {
            get
            {
                if ((this.mUIItem3rdPartyIntegratMenuItem == null))
                {
                    this.mUIItem3rdPartyIntegratMenuItem = new UIItem3rdPartyIntegratMenuItem2(this);
                }
                return this.mUIItem3rdPartyIntegratMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIItem3rdPartyIntegratMenuItem2 mUIItem3rdPartyIntegratMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItem3rdPartyIntegratMenuItem2 : WinMenuItem
    {
        
        public UIItem3rdPartyIntegratMenuItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "3rd Party Integration";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Policy: autotest");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIQuoteSelectListMenuItem
        {
            get
            {
                if ((this.mUIQuoteSelectListMenuItem == null))
                {
                    this.mUIQuoteSelectListMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIQuoteSelectListMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Quote Select List";
                    this.mUIQuoteSelectListMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIQuoteSelectListMenuItem.WindowTitles.Add("Policy: autotest");
                    #endregion
                }
                return this.mUIQuoteSelectListMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIQuoteSelectListMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILinksMenuItem2 : WinMenuItem
    {
        
        public UILinksMenuItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Links";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Policy: autotest");
            #endregion
        }
        
        #region Properties
        public UIItem3rdPartyIntegratMenuItem3 UIItem3rdPartyIntegratMenuItem
        {
            get
            {
                if ((this.mUIItem3rdPartyIntegratMenuItem == null))
                {
                    this.mUIItem3rdPartyIntegratMenuItem = new UIItem3rdPartyIntegratMenuItem3(this);
                }
                return this.mUIItem3rdPartyIntegratMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIItem3rdPartyIntegratMenuItem3 mUIItem3rdPartyIntegratMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItem3rdPartyIntegratMenuItem3 : WinMenuItem
    {
        
        public UIItem3rdPartyIntegratMenuItem3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "3rd Party Integration";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Policy: autotest");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIQuoteSelectListMenuItem
        {
            get
            {
                if ((this.mUIQuoteSelectListMenuItem == null))
                {
                    this.mUIQuoteSelectListMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIQuoteSelectListMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Quote Select List";
                    this.mUIQuoteSelectListMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIQuoteSelectListMenuItem.WindowTitles.Add("Policy: autotest");
                    #endregion
                }
                return this.mUIQuoteSelectListMenuItem;
            }
        }
        
        public WinMenuItem UIRenewalsModuleMenuItem
        {
            get
            {
                if ((this.mUIRenewalsModuleMenuItem == null))
                {
                    this.mUIRenewalsModuleMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIRenewalsModuleMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Renewals Module";
                    this.mUIRenewalsModuleMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIRenewalsModuleMenuItem.WindowTitles.Add("Policy: autotest");
                    #endregion
                }
                return this.mUIRenewalsModuleMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIQuoteSelectListMenuItem;
        
        private WinMenuItem mUIRenewalsModuleMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIWorkspaceClient : WinClient
    {
        
        public UIWorkspaceClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Workspace";
            this.WindowTitles.Add("Policy: autotest");
            #endregion
        }
        
        #region Properties
        public WinWindow UIBillingScreenMOTOTESWindow
        {
            get
            {
                if ((this.mUIBillingScreenMOTOTESWindow == null))
                {
                    this.mUIBillingScreenMOTOTESWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIBillingScreenMOTOTESWindow.SearchProperties[WinWindow.PropertyNames.Name] = "Billing Screen: MOTO-TESTPOLICYNUMBER";
                    this.mUIBillingScreenMOTOTESWindow.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
                    this.mUIBillingScreenMOTOTESWindow.WindowTitles.Add("Policy: autotest");
                    #endregion
                }
                return this.mUIBillingScreenMOTOTESWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUIBillingScreenMOTOTESWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIBillingScreenHOMEWindow1 : WinWindow
    {
        
        public UIBillingScreenHOMEWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "32770";
            this.WindowTitles.Add("Policy: autotest");
            this.WindowTitles.Add("Transaction: autotest");
            #endregion
        }
        
        #region Properties
        public UIItemWindow36 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow36(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIDetailWindow3 UIDetailWindow
        {
            get
            {
                if ((this.mUIDetailWindow == null))
                {
                    this.mUIDetailWindow = new UIDetailWindow3(this);
                }
                return this.mUIDetailWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow36 mUIItemWindow;
        
        private UIDetailWindow3 mUIDetailWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow36 : WinWindow
    {
        
        public UIItemWindow36(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "25";
            this.WindowTitles.Add("Policy: autotest");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Policy: autotest");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDetailWindow3 : WinWindow
    {
        
        public UIDetailWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Transaction: autotest");
            #endregion
        }
        
        #region Properties
        public WinButton UIDetailButton
        {
            get
            {
                if ((this.mUIDetailButton == null))
                {
                    this.mUIDetailButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIDetailButton.SearchProperties[WinButton.PropertyNames.Name] = "Detail";
                    this.mUIDetailButton.WindowTitles.Add("Transaction: autotest");
                    #endregion
                }
                return this.mUIDetailButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIDetailButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow115 : WinWindow
    {
        
        public UIItemWindow115(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "26";
            this.WindowTitles.Add("Policy: autotest");
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIItemButton.WindowTitles.Add("Policy: autotest");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICUSTOMERSWindow1 : WinWindow
    {
        
        public UICUSTOMERSWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "32768";
            #endregion
        }
        
        #region Properties
        public UIItemWindow37 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow37(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow116 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow116(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow37 mUIItemWindow;
        
        private UIItemWindow116 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow37 : WinWindow
    {
        
        public UIItemWindow37(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "17";
            this.WindowTitles.Add("Customer: autotest");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Customer: autotest");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow116 : WinWindow
    {
        
        public UIItemWindow116(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ListView20WndClass";
            #endregion
        }
        
        #region Properties
        public WinClient UICUSTOMERSClient
        {
            get
            {
                if ((this.mUICUSTOMERSClient == null))
                {
                    this.mUICUSTOMERSClient = new WinClient(this);
                }
                return this.mUICUSTOMERSClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUICUSTOMERSClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIViewQuoteDetailsWindow : WinWindow
    {
        
        public UIViewQuoteDetailsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "View Quote Details";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("View Quote Details");
            #endregion
        }
        
        #region Properties
        public UIItemClient1 UIItemClient
        {
            get
            {
                if ((this.mUIItemClient == null))
                {
                    this.mUIItemClient = new UIItemClient1(this);
                }
                return this.mUIItemClient;
            }
        }
        
        public UIOKWindow18 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow18(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemClient1 mUIItemClient;
        
        private UIOKWindow18 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemClient1 : WinClient
    {
        
        public UIItemClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.ClassName] = "Internet Explorer_Server";
            this.WindowTitles.Add("View Quote Details");
            #endregion
        }
        
        #region Properties
        public UIFileJAPPSIEOfficeDatDocument UIFileJAPPSIEOfficeDatDocument
        {
            get
            {
                if ((this.mUIFileJAPPSIEOfficeDatDocument == null))
                {
                    this.mUIFileJAPPSIEOfficeDatDocument = new UIFileJAPPSIEOfficeDatDocument(this);
                }
                return this.mUIFileJAPPSIEOfficeDatDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIFileJAPPSIEOfficeDatDocument mUIFileJAPPSIEOfficeDatDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFileJAPPSIEOfficeDatDocument : HtmlDocument
    {
        
        public UIFileJAPPSIEOfficeDatDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "J:/APPS/IEOffice/Data/Xsl/QuoteDetails.htm";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "file://J:\\APPS\\IEOffice\\Data\\Xsl\\QuoteDetails.htm";
            this.WindowTitles.Add("View Quote Details");
            #endregion
        }
        
        #region Properties
        public UIItemTable UIItemTable
        {
            get
            {
                if ((this.mUIItemTable == null))
                {
                    this.mUIItemTable = new UIItemTable(this);
                }
                return this.mUIItemTable;
            }
        }
        
        public UIItemTable1 UIItemTable1
        {
            get
            {
                if ((this.mUIItemTable1 == null))
                {
                    this.mUIItemTable1 = new UIItemTable1(this);
                }
                return this.mUIItemTable1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTable mUIItemTable;
        
        private UIItemTable1 mUIItemTable1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemTable : HtmlTable
    {
        
        public UIItemTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlTable.PropertyNames.Id] = null;
            this.SearchProperties[HtmlTable.PropertyNames.Name] = null;
            this.FilterProperties[HtmlTable.PropertyNames.InnerText] = "Quote ID:949B625E-41E8-DB84-9983-0E83C10";
            this.FilterProperties[HtmlTable.PropertyNames.ControlDefinition] = null;
            this.FilterProperties[HtmlTable.PropertyNames.RowCount] = "29";
            this.FilterProperties[HtmlTable.PropertyNames.ColumnCount] = "2";
            this.FilterProperties[HtmlTable.PropertyNames.Class] = null;
            this.FilterProperties[HtmlTable.PropertyNames.TagInstance] = "2";
            this.WindowTitles.Add("View Quote Details");
            #endregion
        }
        
        #region Properties
        public HtmlCell UIFORDFIESTABLACK16V13Cell
        {
            get
            {
                if ((this.mUIFORDFIESTABLACK16V13Cell == null))
                {
                    this.mUIFORDFIESTABLACK16V13Cell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUIFORDFIESTABLACK16V13Cell.SearchProperties[HtmlCell.PropertyNames.Id] = null;
                    this.mUIFORDFIESTABLACK16V13Cell.SearchProperties[HtmlCell.PropertyNames.Name] = null;
                    this.mUIFORDFIESTABLACK16V13Cell.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUIFORDFIESTABLACK16V13Cell.FilterProperties[HtmlCell.PropertyNames.InnerText] = "FORD FIESTA BLACK 16V (1388cc) 2003-2003";
                    this.mUIFORDFIESTABLACK16V13Cell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = null;
                    this.mUIFORDFIESTABLACK16V13Cell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "7";
                    this.mUIFORDFIESTABLACK16V13Cell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "1";
                    this.mUIFORDFIESTABLACK16V13Cell.FilterProperties[HtmlCell.PropertyNames.Class] = null;
                    this.mUIFORDFIESTABLACK16V13Cell.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "16";
                    this.mUIFORDFIESTABLACK16V13Cell.WindowTitles.Add("View Quote Details");
                    #endregion
                }
                return this.mUIFORDFIESTABLACK16V13Cell;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCell mUIFORDFIESTABLACK16V13Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemTable1 : HtmlTable
    {
        
        public UIItemTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlTable.PropertyNames.Id] = null;
            this.SearchProperties[HtmlTable.PropertyNames.Name] = null;
            this.FilterProperties[HtmlTable.PropertyNames.InnerText] = "\r\n\r\ninsurE-com Household Quotation For R";
            this.FilterProperties[HtmlTable.PropertyNames.ControlDefinition] = "border=0 width=\"95%\"";
            this.FilterProperties[HtmlTable.PropertyNames.RowCount] = "104";
            this.FilterProperties[HtmlTable.PropertyNames.ColumnCount] = "2";
            this.FilterProperties[HtmlTable.PropertyNames.Class] = null;
            this.FilterProperties[HtmlTable.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("View Quote Details");
            #endregion
        }
        
        #region Properties
        public HtmlCell UIItem1989Cell
        {
            get
            {
                if ((this.mUIItem1989Cell == null))
                {
                    this.mUIItem1989Cell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUIItem1989Cell.SearchProperties[HtmlCell.PropertyNames.Id] = null;
                    this.mUIItem1989Cell.SearchProperties[HtmlCell.PropertyNames.Name] = null;
                    this.mUIItem1989Cell.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUIItem1989Cell.FilterProperties[HtmlCell.PropertyNames.InnerText] = "1989";
                    this.mUIItem1989Cell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = null;
                    this.mUIItem1989Cell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "14";
                    this.mUIItem1989Cell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "1";
                    this.mUIItem1989Cell.FilterProperties[HtmlCell.PropertyNames.Class] = null;
                    this.mUIItem1989Cell.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "28";
                    this.mUIItem1989Cell.WindowTitles.Add("View Quote Details");
                    #endregion
                }
                return this.mUIItem1989Cell;
            }
        }
        
        public HtmlCell UIMrTestTestCell
        {
            get
            {
                if ((this.mUIMrTestTestCell == null))
                {
                    this.mUIMrTestTestCell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUIMrTestTestCell.SearchProperties[HtmlCell.PropertyNames.Id] = null;
                    this.mUIMrTestTestCell.SearchProperties[HtmlCell.PropertyNames.Name] = null;
                    this.mUIMrTestTestCell.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUIMrTestTestCell.FilterProperties[HtmlCell.PropertyNames.InnerText] = "Mr Test Test";
                    this.mUIMrTestTestCell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = null;
                    this.mUIMrTestTestCell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "7";
                    this.mUIMrTestTestCell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "1";
                    this.mUIMrTestTestCell.FilterProperties[HtmlCell.PropertyNames.Class] = null;
                    this.mUIMrTestTestCell.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "14";
                    this.mUIMrTestTestCell.WindowTitles.Add("View Quote Details");
                    #endregion
                }
                return this.mUIMrTestTestCell;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCell mUIItem1989Cell;
        
        private HtmlCell mUIMrTestTestCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow18 : WinWindow
    {
        
        public UIOKWindow18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "5";
            this.WindowTitles.Add("View Quote Details");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "Ok";
                    this.mUIOKButton.WindowTitles.Add("View Quote Details");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDemandsNeedsMotorComWindow : WinWindow
    {
        
        public UIDemandsNeedsMotorComWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Demands&Needs(", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "OpusApp";
            #endregion
        }
        
        #region Properties
        public WinClient UIDemandsNeedsMotorComClient
        {
            get
            {
                if ((this.mUIDemandsNeedsMotorComClient == null))
                {
                    this.mUIDemandsNeedsMotorComClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIDemandsNeedsMotorComClient.SearchProperties.Add(new PropertyExpression(WinControl.PropertyNames.Name, "Demands&Needs(", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIDemandsNeedsMotorComClient;
            }
        }
        
        public UIItemWindow38 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow38(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIDemandsNeedsMotorComClient;
        
        private UIItemWindow38 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow38 : WinWindow
    {
        
        public UIItemWindow38(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Ribbon";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "NetUIHWND";
            this.WindowTitles.Add("Demands&Needs(Motor) [Compatibility Mode] - Microsoft Word");
            #endregion
        }
        
        #region Properties
        public UIRibbonPropertyPage UIRibbonPropertyPage
        {
            get
            {
                if ((this.mUIRibbonPropertyPage == null))
                {
                    this.mUIRibbonPropertyPage = new UIRibbonPropertyPage(this);
                }
                return this.mUIRibbonPropertyPage;
            }
        }
        #endregion
        
        #region Fields
        private UIRibbonPropertyPage mUIRibbonPropertyPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRibbonPropertyPage : WinControl
    {
        
        public UIRibbonPropertyPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Ribbon";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "PropertyPage";
            this.WindowTitles.Add("Demands&Needs(Motor) [Compatibility Mode] - Microsoft Word");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Demands&Needs(Motor) [Compatibility Mode] - Microsoft Word");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow39 : WinWindow
    {
        
        public UIItemWindow39()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public WinClient UIItemClient
        {
            get
            {
                if ((this.mUIItemClient == null))
                {
                    this.mUIItemClient = new WinClient(this);
                }
                return this.mUIItemClient;
            }
        }
        
        public WinCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new WinCustom(this);
                }
                return this.mUIItemCustom;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIItemClient;
        
        private WinCustom mUIItemCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow117 : WinWindow
    {
        
        public UIItemWindow117()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            #endregion
        }
        
        #region Properties
        public UIItemWindow40 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow40(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow40 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow40 : WinWindow
    {
        
        public UIItemWindow40(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinTitleBar UIItemTitleBar
        {
            get
            {
                if ((this.mUIItemTitleBar == null))
                {
                    this.mUIItemTitleBar = new WinTitleBar(this);
                }
                return this.mUIItemTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUIItemTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIConfirmSaveAsWindow : WinWindow
    {
        
        public UIConfirmSaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public UIConfirmSaveAsPane UIConfirmSaveAsPane
        {
            get
            {
                if ((this.mUIConfirmSaveAsPane == null))
                {
                    this.mUIConfirmSaveAsPane = new UIConfirmSaveAsPane(this);
                }
                return this.mUIConfirmSaveAsPane;
            }
        }
        
        public UIConfirmSaveAsDialog UIConfirmSaveAsDialog
        {
            get
            {
                if ((this.mUIConfirmSaveAsDialog == null))
                {
                    this.mUIConfirmSaveAsDialog = new UIConfirmSaveAsDialog(this);
                }
                return this.mUIConfirmSaveAsDialog;
            }
        }
        #endregion
        
        #region Fields
        private UIConfirmSaveAsPane mUIConfirmSaveAsPane;
        
        private UIConfirmSaveAsDialog mUIConfirmSaveAsDialog;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIConfirmSaveAsPane : WinPane
    {
        
        public UIConfirmSaveAsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Confirm Save As";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIConfirmSaveAsDialog : WinControl
    {
        
        public UIConfirmSaveAsDialog(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Confirm Save As";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public WinPane UIConfirmSaveAsPane
        {
            get
            {
                if ((this.mUIConfirmSaveAsPane == null))
                {
                    this.mUIConfirmSaveAsPane = new WinPane(this);
                    #region Search Criteria
                    this.mUIConfirmSaveAsPane.SearchProperties[WinControl.PropertyNames.Name] = "Confirm Save As";
                    this.mUIConfirmSaveAsPane.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUIConfirmSaveAsPane;
            }
        }
        #endregion
        
        #region Fields
        private WinPane mUIConfirmSaveAsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIQuotesResultsWindow : WinWindow
    {
        
        public UIQuotesResultsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Quotes Results";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Quotes Results");
            #endregion
        }
        
        #region Properties
        public UIItemWindow43 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow43(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIAcceptWindow1 UIAcceptWindow
        {
            get
            {
                if ((this.mUIAcceptWindow == null))
                {
                    this.mUIAcceptWindow = new UIAcceptWindow1(this);
                }
                return this.mUIAcceptWindow;
            }
        }
        
        public UIExitWindow3 UIExitWindow
        {
            get
            {
                if ((this.mUIExitWindow == null))
                {
                    this.mUIExitWindow = new UIExitWindow3(this);
                }
                return this.mUIExitWindow;
            }
        }
        
        public UIPrintQuoteWindow1 UIPrintQuoteWindow
        {
            get
            {
                if ((this.mUIPrintQuoteWindow == null))
                {
                    this.mUIPrintQuoteWindow = new UIPrintQuoteWindow1(this);
                }
                return this.mUIPrintQuoteWindow;
            }
        }
        
        public UIDemandsNeedsWindow1 UIDemandsNeedsWindow
        {
            get
            {
                if ((this.mUIDemandsNeedsWindow == null))
                {
                    this.mUIDemandsNeedsWindow = new UIDemandsNeedsWindow1(this);
                }
                return this.mUIDemandsNeedsWindow;
            }
        }
        
        public UIPremiumWindow1 UIPremiumWindow
        {
            get
            {
                if ((this.mUIPremiumWindow == null))
                {
                    this.mUIPremiumWindow = new UIPremiumWindow1(this);
                }
                return this.mUIPremiumWindow;
            }
        }
        
        public UIItemWindow118 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow118(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow212 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow212(this);
                }
                return this.mUIItemWindow2;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow43 mUIItemWindow;
        
        private UIAcceptWindow1 mUIAcceptWindow;
        
        private UIExitWindow3 mUIExitWindow;
        
        private UIPrintQuoteWindow1 mUIPrintQuoteWindow;
        
        private UIDemandsNeedsWindow1 mUIDemandsNeedsWindow;
        
        private UIPremiumWindow1 mUIPremiumWindow;
        
        private UIItemWindow118 mUIItemWindow1;
        
        private UIItemWindow212 mUIItemWindow2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow43 : WinWindow
    {
        
        public UIItemWindow43(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ListView20WndClass";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Quotes Results");
            #endregion
        }
        
        #region Properties
        public WinClient UIQuotesResultsClient
        {
            get
            {
                if ((this.mUIQuotesResultsClient == null))
                {
                    this.mUIQuotesResultsClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIQuotesResultsClient.WindowTitles.Add("Quotes Results");
                    #endregion
                }
                return this.mUIQuotesResultsClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIQuotesResultsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAcceptWindow1 : WinWindow
    {
        
        public UIAcceptWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Quotes Results");
            #endregion
        }
        
        #region Properties
        public WinButton UIAcceptButton
        {
            get
            {
                if ((this.mUIAcceptButton == null))
                {
                    this.mUIAcceptButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAcceptButton.SearchProperties[WinButton.PropertyNames.Name] = "Accept";
                    this.mUIAcceptButton.WindowTitles.Add("Quotes Results");
                    #endregion
                }
                return this.mUIAcceptButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAcceptButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIExitWindow3 : WinWindow
    {
        
        public UIExitWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Quotes Results");
            #endregion
        }
        
        #region Properties
        public WinButton UIExitButton
        {
            get
            {
                if ((this.mUIExitButton == null))
                {
                    this.mUIExitButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIExitButton.SearchProperties[WinButton.PropertyNames.Name] = "Exit";
                    this.mUIExitButton.WindowTitles.Add("Quotes Results");
                    #endregion
                }
                return this.mUIExitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIExitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPrintQuoteWindow1 : WinWindow
    {
        
        public UIPrintQuoteWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "4";
            this.WindowTitles.Add("Quotes Results");
            #endregion
        }
        
        #region Properties
        public WinButton UIPrintQuoteButton
        {
            get
            {
                if ((this.mUIPrintQuoteButton == null))
                {
                    this.mUIPrintQuoteButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPrintQuoteButton.SearchProperties[WinButton.PropertyNames.Name] = "Print Quote..";
                    this.mUIPrintQuoteButton.WindowTitles.Add("Quotes Results");
                    #endregion
                }
                return this.mUIPrintQuoteButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIPrintQuoteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDemandsNeedsWindow1 : WinWindow
    {
        
        public UIDemandsNeedsWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "8";
            this.WindowTitles.Add("Quotes Results");
            #endregion
        }
        
        #region Properties
        public WinButton UIDemandsNeedsButton
        {
            get
            {
                if ((this.mUIDemandsNeedsButton == null))
                {
                    this.mUIDemandsNeedsButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIDemandsNeedsButton.SearchProperties[WinButton.PropertyNames.Name] = "Demands & Needs";
                    this.mUIDemandsNeedsButton.WindowTitles.Add("Quotes Results");
                    #endregion
                }
                return this.mUIDemandsNeedsButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIDemandsNeedsButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPremiumWindow1 : WinWindow
    {
        
        public UIPremiumWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "16";
            this.WindowTitles.Add("Quotes Results");
            #endregion
        }
        
        #region Properties
        public WinButton UIPremiumButton
        {
            get
            {
                if ((this.mUIPremiumButton == null))
                {
                    this.mUIPremiumButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPremiumButton.SearchProperties[WinButton.PropertyNames.Name] = "Premium...";
                    this.mUIPremiumButton.WindowTitles.Add("Quotes Results");
                    #endregion
                }
                return this.mUIPremiumButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIPremiumButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow118 : WinWindow
    {
        
        public UIItemWindow118(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ListView20WndClass";
            this.WindowTitles.Add("Quotes Results");
            #endregion
        }
        
        #region Properties
        public WinClient UIQuotesResultsClient
        {
            get
            {
                if ((this.mUIQuotesResultsClient == null))
                {
                    this.mUIQuotesResultsClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIQuotesResultsClient.WindowTitles.Add("Quotes Results");
                    #endregion
                }
                return this.mUIQuotesResultsClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIQuotesResultsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow212 : WinWindow
    {
        
        public UIItemWindow212(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ListView20WndClass";
            this.WindowTitles.Add("Quotes Results");
            #endregion
        }
        
        #region Properties
        public WinClient UIQuotesResultsClient
        {
            get
            {
                if ((this.mUIQuotesResultsClient == null))
                {
                    this.mUIQuotesResultsClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIQuotesResultsClient.WindowTitles.Add("Quotes Results");
                    #endregion
                }
                return this.mUIQuotesResultsClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIQuotesResultsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIBrokerAddonsWindow : WinWindow
    {
        
        public UIBrokerAddonsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Broker Add-ons";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Broker Add-ons");
            #endregion
        }
        
        #region Properties
        public UIOKWindow19 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow19(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow19 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow19 : WinWindow
    {
        
        public UIOKWindow19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "4";
            this.WindowTitles.Add("Broker Add-ons");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "Ok";
                    this.mUIOKButton.WindowTitles.Add("Broker Add-ons");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPolicyDetailConfirmaWindow : WinWindow
    {
        
        public UIPolicyDetailConfirmaWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Policy Detail Confirmation";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Policy Detail Confirmation");
            #endregion
        }
        
        #region Properties
        public UIItemWindow44 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow44(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UILookupWindow2 UILookupWindow
        {
            get
            {
                if ((this.mUILookupWindow == null))
                {
                    this.mUILookupWindow = new UILookupWindow2(this);
                }
                return this.mUILookupWindow;
            }
        }
        
        public UIConfirmWindow1 UIConfirmWindow
        {
            get
            {
                if ((this.mUIConfirmWindow == null))
                {
                    this.mUIConfirmWindow = new UIConfirmWindow1(this);
                }
                return this.mUIConfirmWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow44 mUIItemWindow;
        
        private UILookupWindow2 mUILookupWindow;
        
        private UIConfirmWindow1 mUIConfirmWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow44 : WinWindow
    {
        
        public UIItemWindow44(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Policy Detail Confirmation");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Policy Detail Confirmation");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILookupWindow2 : WinWindow
    {
        
        public UILookupWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "8";
            this.WindowTitles.Add("Policy Detail Confirmation");
            #endregion
        }
        
        #region Properties
        public WinButton UILookupButton
        {
            get
            {
                if ((this.mUILookupButton == null))
                {
                    this.mUILookupButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILookupButton.SearchProperties[WinButton.PropertyNames.Name] = "Lookup...";
                    this.mUILookupButton.WindowTitles.Add("Policy Detail Confirmation");
                    #endregion
                }
                return this.mUILookupButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILookupButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIConfirmWindow1 : WinWindow
    {
        
        public UIConfirmWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "5";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Policy Detail Confirmation");
            #endregion
        }
        
        #region Properties
        public WinButton UIConfirmButton
        {
            get
            {
                if ((this.mUIConfirmButton == null))
                {
                    this.mUIConfirmButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIConfirmButton.SearchProperties[WinButton.PropertyNames.Name] = "Confirm";
                    this.mUIConfirmButton.WindowTitles.Add("Policy Detail Confirmation");
                    #endregion
                }
                return this.mUIConfirmButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIConfirmButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIKV31Window : WinWindow
    {
        
        public UIKV31Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "KV31";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TConversationForm";
            this.WindowTitles.Add("KV31");
            #endregion
        }
        
        #region Properties
        public UIItemWindow45 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow45(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow45 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow45 : WinWindow
    {
        
        public UIItemWindow45(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TChatEntryControl";
            this.WindowTitles.Add("KV31");
            #endregion
        }
        
        #region Properties
        public UIKV31Client UIKV31Client
        {
            get
            {
                if ((this.mUIKV31Client == null))
                {
                    this.mUIKV31Client = new UIKV31Client(this);
                }
                return this.mUIKV31Client;
            }
        }
        #endregion
        
        #region Fields
        private UIKV31Client mUIKV31Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIKV31Client : WinClient
    {
        
        public UIKV31Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("KV31");
            #endregion
        }
        
        #region Properties
        public WinClient UIЗапоClient
        {
            get
            {
                if ((this.mUIЗапоClient == null))
                {
                    this.mUIЗапоClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIЗапоClient.SearchProperties[WinControl.PropertyNames.Name] = "запо";
                    this.mUIЗапоClient.WindowTitles.Add("KV31");
                    #endregion
                }
                return this.mUIЗапоClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIЗапоClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIBarcodePrinterWindow : WinWindow
    {
        
        public UIBarcodePrinterWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Barcode Printer";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Barcode Printer");
            #endregion
        }
        
        #region Properties
        public UICancelWindow7 UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow7(this);
                }
                return this.mUICancelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICancelWindow7 mUICancelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICancelWindow7 : WinWindow
    {
        
        public UICancelWindow7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cmdCancel";
            this.WindowTitles.Add("Barcode Printer");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Barcode Printer");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDemandsNeedsHouseholWindow : WinWindow
    {
        
        public UIDemandsNeedsHouseholWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Demands&Needs(HouseholdBuildings&Contents) [Compatibility Mode] - Microsoft Word";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "OpusApp";
            this.WindowTitles.Add("Demands&Needs(HouseholdBuildings&Contents) [Compatibility Mode] - Microsoft Word");
            #endregion
        }
        
        #region Properties
        public WinClient UIDemandsNeedsHouseholClient
        {
            get
            {
                if ((this.mUIDemandsNeedsHouseholClient == null))
                {
                    this.mUIDemandsNeedsHouseholClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIDemandsNeedsHouseholClient.SearchProperties[WinControl.PropertyNames.Name] = "DemandsNeeds(HouseholdBuildings&Contents) [Compatibility Mode] - Microsoft Word";
                    this.mUIDemandsNeedsHouseholClient.WindowTitles.Add("Demands&Needs(HouseholdBuildings&Contents) [Compatibility Mode] - Microsoft Word");
                    #endregion
                }
                return this.mUIDemandsNeedsHouseholClient;
            }
        }
        
        public UIItemWindow46 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow46(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIDemandsNeedsHouseholClient;
        
        private UIItemWindow46 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow46 : WinWindow
    {
        
        public UIItemWindow46(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Ribbon";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "NetUIHWND";
            this.WindowTitles.Add("Demands&Needs(HouseholdBuildings&Contents) [Compatibility Mode] - Microsoft Word");
            #endregion
        }
        
        #region Properties
        public UIRibbonPropertyPage1 UIRibbonPropertyPage
        {
            get
            {
                if ((this.mUIRibbonPropertyPage == null))
                {
                    this.mUIRibbonPropertyPage = new UIRibbonPropertyPage1(this);
                }
                return this.mUIRibbonPropertyPage;
            }
        }
        #endregion
        
        #region Fields
        private UIRibbonPropertyPage1 mUIRibbonPropertyPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRibbonPropertyPage1 : WinControl
    {
        
        public UIRibbonPropertyPage1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Ribbon";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "PropertyPage";
            this.WindowTitles.Add("Demands&Needs(HouseholdBuildings&Contents) [Compatibility Mode] - Microsoft Word");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Demands&Needs(HouseholdBuildings&Contents) [Compatibility Mode] - Microsoft Word");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPolicyWindow : WinWindow
    {
        
        public UIPolicyWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Policy";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Policy");
            #endregion
        }
        
        #region Properties
        public UIYesWindow2 UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow2(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIYesWindow2 mUIYesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIYesWindow2 : WinWindow
    {
        
        public UIYesWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Policy");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Policy");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAcceptWithAnotherProWindow : WinWindow
    {
        
        public UIAcceptWithAnotherProWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Accept With Another Product";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Accept With Another Product");
            #endregion
        }
        
        #region Properties
        public UIItemWindow47 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow47(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow119 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow119(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow213 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow213(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIItemWindow310 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow310(this);
                }
                return this.mUIItemWindow3;
            }
        }
        
        public UIItemWindow48 UIItemWindow4
        {
            get
            {
                if ((this.mUIItemWindow4 == null))
                {
                    this.mUIItemWindow4 = new UIItemWindow48(this);
                }
                return this.mUIItemWindow4;
            }
        }
        
        public UIOKWindow20 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow20(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow47 mUIItemWindow;
        
        private UIItemWindow119 mUIItemWindow1;
        
        private UIItemWindow213 mUIItemWindow2;
        
        private UIItemWindow310 mUIItemWindow3;
        
        private UIItemWindow48 mUIItemWindow4;
        
        private UIOKWindow20 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow47 : WinWindow
    {
        
        public UIItemWindow47(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Accept With Another Product");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIItemComboBox
        {
            get
            {
                if ((this.mUIItemComboBox == null))
                {
                    this.mUIItemComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIItemComboBox.WindowTitles.Add("Accept With Another Product");
                    #endregion
                }
                return this.mUIItemComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIItemComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow119 : WinWindow
    {
        
        public UIItemWindow119(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "3";
            this.WindowTitles.Add("Accept With Another Product");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Accept With Another Product");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow213 : WinWindow
    {
        
        public UIItemWindow213(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Accept With Another Product");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Accept With Another Product");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow310 : WinWindow
    {
        
        public UIItemWindow310(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Accept With Another Product");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Accept With Another Product");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow48 : WinWindow
    {
        
        public UIItemWindow48(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Accept With Another Product");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Accept With Another Product");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow20 : WinWindow
    {
        
        public UIOKWindow20(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "5";
            this.WindowTitles.Add("Accept With Another Product");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Accept With Another Product");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIQuoteSelectListWindow : WinWindow
    {
        
        public UIQuoteSelectListWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Quote Select List";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Quote Select List");
            #endregion
        }
        
        #region Properties
        public UICancelWindow8 UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow8(this);
                }
                return this.mUICancelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICancelWindow8 mUICancelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICancelWindow8 : WinWindow
    {
        
        public UICancelWindow8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Quote Select List");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Quote Select List");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIUpdateGeneralTransacWindow : WinWindow
    {
        
        public UIUpdateGeneralTransacWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Update General Transactions";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Update General Transactions");
            #endregion
        }
        
        #region Properties
        public UICancelWindow9 UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow9(this);
                }
                return this.mUICancelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICancelWindow9 mUICancelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICancelWindow9 : WinWindow
    {
        
        public UICancelWindow9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnCancel";
            this.WindowTitles.Add("Update General Transactions");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Update General Transactions");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITransactionListWindow : WinWindow
    {
        
        public UITransactionListWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Transaction List";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Transaction List");
            #endregion
        }
        
        #region Properties
        public UILblBalanceWindow UILblBalanceWindow
        {
            get
            {
                if ((this.mUILblBalanceWindow == null))
                {
                    this.mUILblBalanceWindow = new UILblBalanceWindow(this);
                }
                return this.mUILblBalanceWindow;
            }
        }
        
        public UILvwVListWindow UILvwVListWindow
        {
            get
            {
                if ((this.mUILvwVListWindow == null))
                {
                    this.mUILvwVListWindow = new UILvwVListWindow(this);
                }
                return this.mUILvwVListWindow;
            }
        }
        
        public UICloseWindow1 UICloseWindow
        {
            get
            {
                if ((this.mUICloseWindow == null))
                {
                    this.mUICloseWindow = new UICloseWindow1(this);
                }
                return this.mUICloseWindow;
            }
        }
        #endregion
        
        #region Fields
        private UILblBalanceWindow mUILblBalanceWindow;
        
        private UILvwVListWindow mUILvwVListWindow;
        
        private UICloseWindow1 mUICloseWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILblBalanceWindow : WinWindow
    {
        
        public UILblBalanceWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lblBalance";
            this.WindowTitles.Add("Transaction List");
            #endregion
        }
        
        #region Properties
        public WinEdit UILblBalanceEdit
        {
            get
            {
                if ((this.mUILblBalanceEdit == null))
                {
                    this.mUILblBalanceEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUILblBalanceEdit.WindowTitles.Add("Transaction List");
                    #endregion
                }
                return this.mUILblBalanceEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUILblBalanceEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILvwVListWindow : WinWindow
    {
        
        public UILvwVListWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "lvwVList";
            this.WindowTitles.Add("Transaction List");
            #endregion
        }
        
        #region Properties
        public WinList UILvwVListList
        {
            get
            {
                if ((this.mUILvwVListList == null))
                {
                    this.mUILvwVListList = new WinList(this);
                    #region Search Criteria
                    this.mUILvwVListList.SearchProperties[WinList.PropertyNames.Name] = "Enter Code";
                    this.mUILvwVListList.WindowTitles.Add("Transaction List");
                    #endregion
                }
                return this.mUILvwVListList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUILvwVListList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICloseWindow1 : WinWindow
    {
        
        public UICloseWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnExit";
            this.WindowTitles.Add("Transaction List");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Transaction List");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOverridePremiumWindow : WinWindow
    {
        
        public UIOverridePremiumWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Override Premium";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Override Premium");
            #endregion
        }
        
        #region Properties
        public UIItemWindow49 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow49(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOKWindow21 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow21(this);
                }
                return this.mUIOKWindow;
            }
        }
        
        public UIItemWindow120 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow120(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow49 mUIItemWindow;
        
        private UIOKWindow21 mUIOKWindow;
        
        private UIItemWindow120 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow49 : WinWindow
    {
        
        public UIItemWindow49(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "3";
            this.WindowTitles.Add("Override Premium");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Override Premium");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow21 : WinWindow
    {
        
        public UIOKWindow21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "4";
            this.WindowTitles.Add("Override Premium");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Override Premium");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow120 : WinWindow
    {
        
        public UIItemWindow120(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Override Premium");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Override Premium");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIWhichpolicywouldyoulWindow : WinWindow
    {
        
        public UIWhichpolicywouldyoulWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Which policy would you like to take the risk details from?";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfSelectItem";
            this.WindowTitles.Add("Which policy would you like to take the risk details from?");
            #endregion
        }
        
        #region Properties
        public UIItemWindow50 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow50(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow50 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow50 : WinWindow
    {
        
        public UIItemWindow50(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TPanel";
            this.WindowTitles.Add("Which policy would you like to take the risk details from?");
            #endregion
        }
        
        #region Properties
        public UIWhichpolicywouldyoulClient UIWhichpolicywouldyoulClient
        {
            get
            {
                if ((this.mUIWhichpolicywouldyoulClient == null))
                {
                    this.mUIWhichpolicywouldyoulClient = new UIWhichpolicywouldyoulClient(this);
                }
                return this.mUIWhichpolicywouldyoulClient;
            }
        }
        #endregion
        
        #region Fields
        private UIWhichpolicywouldyoulClient mUIWhichpolicywouldyoulClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIWhichpolicywouldyoulClient : WinClient
    {
        
        public UIWhichpolicywouldyoulClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Which policy would you like to take the risk details from?");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "Ok";
                    this.mUIOKButton.WindowTitles.Add("Which policy would you like to take the risk details from?");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIProductSelectionWindow : WinWindow
    {
        
        public UIProductSelectionWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Product Selection";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Product Selection");
            #endregion
        }
        
        #region Properties
        public UIOKWindow22 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow22(this);
                }
                return this.mUIOKWindow;
            }
        }
        
        public UIHouseholdWindow UIHouseholdWindow
        {
            get
            {
                if ((this.mUIHouseholdWindow == null))
                {
                    this.mUIHouseholdWindow = new UIHouseholdWindow(this);
                }
                return this.mUIHouseholdWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow22 mUIOKWindow;
        
        private UIHouseholdWindow mUIHouseholdWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow22 : WinWindow
    {
        
        public UIOKWindow22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Product Selection");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Product Selection");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHouseholdWindow : WinWindow
    {
        
        public UIHouseholdWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Product Selection");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UIHouseholdRadioButton
        {
            get
            {
                if ((this.mUIHouseholdRadioButton == null))
                {
                    this.mUIHouseholdRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIHouseholdRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Household";
                    this.mUIHouseholdRadioButton.WindowTitles.Add("Product Selection");
                    #endregion
                }
                return this.mUIHouseholdRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUIHouseholdRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITamXMLImportCustomerWindow : WinWindow
    {
        
        public UITamXMLImportCustomerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "TamXML Import Customer";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfImport";
            this.WindowTitles.Add("TamXML Import Customer");
            #endregion
        }
        
        #region Properties
        public UIItemWindow53 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow53(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow53 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow53 : WinWindow
    {
        
        public UIItemWindow53(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TPanel";
            this.WindowTitles.Add("TamXML Import Customer");
            #endregion
        }
        
        #region Properties
        public UITamXMLImportCustomerClient UITamXMLImportCustomerClient
        {
            get
            {
                if ((this.mUITamXMLImportCustomerClient == null))
                {
                    this.mUITamXMLImportCustomerClient = new UITamXMLImportCustomerClient(this);
                }
                return this.mUITamXMLImportCustomerClient;
            }
        }
        #endregion
        
        #region Fields
        private UITamXMLImportCustomerClient mUITamXMLImportCustomerClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITamXMLImportCustomerClient : WinClient
    {
        
        public UITamXMLImportCustomerClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("TamXML Import Customer");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "Ok";
                    this.mUIOKButton.WindowTitles.Add("TamXML Import Customer");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPleaseselectWHOtofolWindow : WinWindow
    {
        
        public UIPleaseselectWHOtofolWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Please select WHO to follow up";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfSelectItem";
            this.WindowTitles.Add("Please select WHO to follow up");
            #endregion
        }
        
        #region Properties
        public UIItemWindow54 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow54(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow123 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow123(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow54 mUIItemWindow;
        
        private UIItemWindow123 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow54 : WinWindow
    {
        
        public UIItemWindow54(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TPanel";
            this.WindowTitles.Add("Please select WHO to follow up");
            #endregion
        }
        
        #region Properties
        public UIPleaseselectWHOtofolClient UIPleaseselectWHOtofolClient
        {
            get
            {
                if ((this.mUIPleaseselectWHOtofolClient == null))
                {
                    this.mUIPleaseselectWHOtofolClient = new UIPleaseselectWHOtofolClient(this);
                }
                return this.mUIPleaseselectWHOtofolClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPleaseselectWHOtofolClient mUIPleaseselectWHOtofolClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPleaseselectWHOtofolClient : WinClient
    {
        
        public UIPleaseselectWHOtofolClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Please select WHO to follow up");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "Ok";
                    this.mUIOKButton.WindowTitles.Add("Please select WHO to follow up");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow123 : WinWindow
    {
        
        public UIItemWindow123(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TListBox";
            this.WindowTitles.Add("Please select WHO to follow up");
            #endregion
        }
        
        #region Properties
        public WinList UIItemList
        {
            get
            {
                if ((this.mUIItemList == null))
                {
                    this.mUIItemList = new WinList(this);
                    #region Search Criteria
                    this.mUIItemList.WindowTitles.Add("Please select WHO to follow up");
                    #endregion
                }
                return this.mUIItemList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIItemList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMidTermAdjustmentsWindow : WinWindow
    {
        
        public UIMidTermAdjustmentsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Mid Term Adjustments ";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Mid Term Adjustments ");
            #endregion
        }
        
        #region Properties
        public UIItemWindow55 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow55(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOKWindow23 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow23(this);
                }
                return this.mUIOKWindow;
            }
        }
        
        public UIOKWindow110 UIOKWindow1
        {
            get
            {
                if ((this.mUIOKWindow1 == null))
                {
                    this.mUIOKWindow1 = new UIOKWindow110(this);
                }
                return this.mUIOKWindow1;
            }
        }
        
        public UIItemWindow124 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow124(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow55 mUIItemWindow;
        
        private UIOKWindow23 mUIOKWindow;
        
        private UIOKWindow110 mUIOKWindow1;
        
        private UIItemWindow124 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow55 : WinWindow
    {
        
        public UIItemWindow55(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Mid Term Adjustments ");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIItemComboBox
        {
            get
            {
                if ((this.mUIItemComboBox == null))
                {
                    this.mUIItemComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIItemComboBox.WindowTitles.Add("Mid Term Adjustments ");
                    #endregion
                }
                return this.mUIItemComboBox;
            }
        }
        
        public WinButton UIBeforeButton
        {
            get
            {
                if ((this.mUIBeforeButton == null))
                {
                    this.mUIBeforeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIBeforeButton.SearchProperties[WinButton.PropertyNames.Name] = "Before";
                    this.mUIBeforeButton.WindowTitles.Add("Mid Term Adjustments ");
                    #endregion
                }
                return this.mUIBeforeButton;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIItemComboBox;
        
        private WinButton mUIBeforeButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow23 : WinWindow
    {
        
        public UIOKWindow23(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Mid Term Adjustments ");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Mid Term Adjustments ");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        
        public WinButton UIAfterButton
        {
            get
            {
                if ((this.mUIAfterButton == null))
                {
                    this.mUIAfterButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAfterButton.SearchProperties[WinButton.PropertyNames.Name] = "After";
                    this.mUIAfterButton.WindowTitles.Add("Mid Term Adjustments ");
                    #endregion
                }
                return this.mUIAfterButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        
        private WinButton mUIAfterButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow110 : WinWindow
    {
        
        public UIOKWindow110(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Mid Term Adjustments ");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Mid Term Adjustments ");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow124 : WinWindow
    {
        
        public UIItemWindow124(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Mid Term Adjustments ");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIItemComboBox
        {
            get
            {
                if ((this.mUIItemComboBox == null))
                {
                    this.mUIItemComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIItemComboBox.WindowTitles.Add("Mid Term Adjustments ");
                    #endregion
                }
                return this.mUIItemComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIItemComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMTAEffectiveDatesWindow : WinWindow
    {
        
        public UIMTAEffectiveDatesWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "MTA Effective Dates ";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("MTA Effective Dates ");
            #endregion
        }
        
        #region Properties
        public UIOKWindow24 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow24(this);
                }
                return this.mUIOKWindow;
            }
        }
        
        public UIItemWindow56 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow56(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UICancelWindow10 UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow10(this);
                }
                return this.mUICancelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow24 mUIOKWindow;
        
        private UIItemWindow56 mUIItemWindow;
        
        private UICancelWindow10 mUICancelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow24 : WinWindow
    {
        
        public UIOKWindow24(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("MTA Effective Dates ");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("MTA Effective Dates ");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow56 : WinWindow
    {
        
        public UIItemWindow56(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("MTA Effective Dates ");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("MTA Effective Dates ");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICancelWindow10 : WinWindow
    {
        
        public UICancelWindow10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("MTA Effective Dates ");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("MTA Effective Dates ");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPolicygdfhdfdfghgdfWindow : WinWindow
    {
        
        public UIPolicygdfhdfdfghgdfWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Policy: gdfhdf dfghgdf";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6MDIForm";
            this.WindowTitles.Add("Policy: gdfhdf dfghgdf");
            #endregion
        }
        
        #region Properties
        public UIBillingScreenHOMETESWindow UIBillingScreenHOMETESWindow
        {
            get
            {
                if ((this.mUIBillingScreenHOMETESWindow == null))
                {
                    this.mUIBillingScreenHOMETESWindow = new UIBillingScreenHOMETESWindow(this);
                }
                return this.mUIBillingScreenHOMETESWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIBillingScreenHOMETESWindow mUIBillingScreenHOMETESWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIBillingScreenHOMETESWindow : WinWindow
    {
        
        public UIBillingScreenHOMETESWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "32770";
            this.WindowTitles.Add("Policy: gdfhdf dfghgdf");
            #endregion
        }
        
        #region Properties
        public UIItemWindow57 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow57(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow57 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow57 : WinWindow
    {
        
        public UIItemWindow57(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "25";
            this.WindowTitles.Add("Policy: gdfhdf dfghgdf");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Policy: gdfhdf dfghgdf");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIConfirmMTAWindow : WinWindow
    {
        
        public UIConfirmMTAWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm MTA";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm MTA");
            #endregion
        }
        
        #region Properties
        public UIOKWindow25 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow25(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow25 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow25 : WinWindow
    {
        
        public UIOKWindow25(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Confirm MTA");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Confirm MTA");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIClaimsWindow : WinWindow
    {
        
        public UIClaimsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Claims";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Claims");
            #endregion
        }
        
        #region Properties
        public UINOWindow2 UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow2(this);
                }
                return this.mUINOWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINOWindow2 mUINOWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINOWindow2 : WinWindow
    {
        
        public UINOWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Claims");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Claims");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UICancelWindow13 UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow13(this);
                }
                return this.mUICancelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICancelWindow13 mUICancelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICancelWindow13 : WinWindow
    {
        
        public UICancelWindow13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITestProject7Window : WinWindow
    {
        
        public UITestProject7Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "TestProject7";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("TestProject7");
            #endregion
        }
        
        #region Properties
        public UIItemWindow58 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow58(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow58 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow58 : WinWindow
    {
        
        public UIItemWindow58(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("TestProject7");
            #endregion
        }
        
        #region Properties
        public UIOurhighwayListItem UIOurhighwayListItem
        {
            get
            {
                if ((this.mUIOurhighwayListItem == null))
                {
                    this.mUIOurhighwayListItem = new UIOurhighwayListItem(this);
                }
                return this.mUIOurhighwayListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIOurhighwayListItem mUIOurhighwayListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOurhighwayListItem : WinListItem
    {
        
        public UIOurhighwayListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "ourhighway";
            this.WindowTitles.Add("TestProject7");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("TestProject7");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRegistryEditorWindow : WinWindow
    {
        
        public UIRegistryEditorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Registry Editor";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Registry Editor");
            #endregion
        }
        
        #region Properties
        public UIRegistryEditorPane UIRegistryEditorPane
        {
            get
            {
                if ((this.mUIRegistryEditorPane == null))
                {
                    this.mUIRegistryEditorPane = new UIRegistryEditorPane(this);
                }
                return this.mUIRegistryEditorPane;
            }
        }
        
        public UIRegistryEditorDialog UIRegistryEditorDialog
        {
            get
            {
                if ((this.mUIRegistryEditorDialog == null))
                {
                    this.mUIRegistryEditorDialog = new UIRegistryEditorDialog(this);
                }
                return this.mUIRegistryEditorDialog;
            }
        }
        #endregion
        
        #region Fields
        private UIRegistryEditorPane mUIRegistryEditorPane;
        
        private UIRegistryEditorDialog mUIRegistryEditorDialog;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRegistryEditorPane : WinPane
    {
        
        public UIRegistryEditorPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Registry Editor";
            this.WindowTitles.Add("Registry Editor");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Registry Editor");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Registry Editor");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRegistryEditorDialog : WinControl
    {
        
        public UIRegistryEditorDialog(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Registry Editor";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
            this.WindowTitles.Add("Registry Editor");
            #endregion
        }
        
        #region Properties
        public WinPane UIRegistryEditorPane
        {
            get
            {
                if ((this.mUIRegistryEditorPane == null))
                {
                    this.mUIRegistryEditorPane = new WinPane(this);
                    #region Search Criteria
                    this.mUIRegistryEditorPane.SearchProperties[WinControl.PropertyNames.Name] = "Registry Editor";
                    this.mUIRegistryEditorPane.WindowTitles.Add("Registry Editor");
                    #endregion
                }
                return this.mUIRegistryEditorPane;
            }
        }
        #endregion
        
        #region Fields
        private WinPane mUIRegistryEditorPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIBlankPageMicrosoftInWindow : BrowserWindow
    {
        
        public UIBlankPageMicrosoftInWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIBlankPageWindowsInteTitleBar UIBlankPageWindowsInteTitleBar
        {
            get
            {
                if ((this.mUIBlankPageWindowsInteTitleBar == null))
                {
                    this.mUIBlankPageWindowsInteTitleBar = new UIBlankPageWindowsInteTitleBar(this);
                }
                return this.mUIBlankPageWindowsInteTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIBlankPageWindowsInteTitleBar mUIBlankPageWindowsInteTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIBlankPageWindowsInteTitleBar : WinTitleBar
    {
        
        public UIBlankPageWindowsInteTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIWindowsSecurityWindow : WinWindow
    {
        
        public UIWindowsSecurityWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Windows Security";
            this.WindowTitles.Add("Windows Security");
            #endregion
        }
        
        #region Properties
        public UIItemListItem UIItemListItem
        {
            get
            {
                if ((this.mUIItemListItem == null))
                {
                    this.mUIItemListItem = new UIItemListItem(this);
                }
                return this.mUIItemListItem;
            }
        }
        
        public UIWindowsSecurityPane UIWindowsSecurityPane
        {
            get
            {
                if ((this.mUIWindowsSecurityPane == null))
                {
                    this.mUIWindowsSecurityPane = new UIWindowsSecurityPane(this);
                }
                return this.mUIWindowsSecurityPane;
            }
        }
        #endregion
        
        #region Fields
        private UIItemListItem mUIItemListItem;
        
        private UIWindowsSecurityPane mUIWindowsSecurityPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemListItem : WinListItem
    {
        
        public UIItemListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Windows Security");
            #endregion
        }
        
        #region Properties
        public WinEdit UIUsernameEdit
        {
            get
            {
                if ((this.mUIUsernameEdit == null))
                {
                    this.mUIUsernameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIUsernameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "User name";
                    this.mUIUsernameEdit.WindowTitles.Add("Windows Security");
                    #endregion
                }
                return this.mUIUsernameEdit;
            }
        }
        
        public WinWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUIItemWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "User name";
                    this.mUIItemWindow.SearchProperties[WinWindow.PropertyNames.ClassName] = "Edit";
                    this.mUIItemWindow.WindowTitles.Add("Windows Security");
                    #endregion
                }
                return this.mUIItemWindow;
            }
        }
        
        public WinEdit UIPasswordEdit
        {
            get
            {
                if ((this.mUIPasswordEdit == null))
                {
                    this.mUIPasswordEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIPasswordEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Password";
                    this.mUIPasswordEdit.WindowTitles.Add("Windows Security");
                    #endregion
                }
                return this.mUIPasswordEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIUsernameEdit;
        
        private WinWindow mUIItemWindow;
        
        private WinEdit mUIPasswordEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIWindowsSecurityPane : WinPane
    {
        
        public UIWindowsSecurityPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Windows Security";
            this.WindowTitles.Add("Windows Security");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Windows Security");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIInsurEcomSystemMaintWindow : BrowserWindow
    {
        
        public UIInsurEcomSystemMaintWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "insurE-com System Maintenance";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("insurE-com System Maintenance");
            this.WindowTitles.Add("Blank Page");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UILeftbarFrame UILeftbarFrame
        {
            get
            {
                if ((this.mUILeftbarFrame == null))
                {
                    this.mUILeftbarFrame = new UILeftbarFrame(this);
                }
                return this.mUILeftbarFrame;
            }
        }
        
        public UIContentFrame UIContentFrame
        {
            get
            {
                if ((this.mUIContentFrame == null))
                {
                    this.mUIContentFrame = new UIContentFrame(this);
                }
                return this.mUIContentFrame;
            }
        }
        
        public UIInsurEcomSystemMaintTitleBar UIInsurEcomSystemMaintTitleBar
        {
            get
            {
                if ((this.mUIInsurEcomSystemMaintTitleBar == null))
                {
                    this.mUIInsurEcomSystemMaintTitleBar = new UIInsurEcomSystemMaintTitleBar(this);
                }
                return this.mUIInsurEcomSystemMaintTitleBar;
            }
        }
        
        public UIItemWindow59 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow59(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UILeftbarFrame mUILeftbarFrame;
        
        private UIContentFrame mUIContentFrame;
        
        private UIInsurEcomSystemMaintTitleBar mUIInsurEcomSystemMaintTitleBar;
        
        private UIItemWindow59 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILeftbarFrame : HtmlFrame
    {
        
        public UILeftbarFrame(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlFrame.PropertyNames.Id] = null;
            this.SearchProperties[HtmlFrame.PropertyNames.Name] = "leftbar";
            this.FilterProperties[HtmlFrame.PropertyNames.AbsolutePath] = null;
            this.FilterProperties[HtmlFrame.PropertyNames.PageUrl] = "content/leftbar.asp";
            this.FilterProperties[HtmlFrame.PropertyNames.Title] = null;
            this.FilterProperties[HtmlFrame.PropertyNames.Class] = null;
            this.FilterProperties[HtmlFrame.PropertyNames.ControlDefinition] = "noResize src=\"content/leftbar.asp\" name=";
            this.FilterProperties[HtmlFrame.PropertyNames.TagInstance] = "2";
            this.WindowTitles.Add("insurE-com System Maintenance");
            #endregion
        }
        
        #region Properties
        public UIInsurEcomLeftbarDocument UIInsurEcomLeftbarDocument
        {
            get
            {
                if ((this.mUIInsurEcomLeftbarDocument == null))
                {
                    this.mUIInsurEcomLeftbarDocument = new UIInsurEcomLeftbarDocument(this);
                }
                return this.mUIInsurEcomLeftbarDocument;
            }
        }
        
        public UIInsurEcomLeftbarDocument1 UIInsurEcomLeftbarDocument1
        {
            get
            {
                if ((this.mUIInsurEcomLeftbarDocument1 == null))
                {
                    this.mUIInsurEcomLeftbarDocument1 = new UIInsurEcomLeftbarDocument1(this);
                }
                return this.mUIInsurEcomLeftbarDocument1;
            }
        }
        #endregion
        
        #region Fields
        private UIInsurEcomLeftbarDocument mUIInsurEcomLeftbarDocument;
        
        private UIInsurEcomLeftbarDocument1 mUIInsurEcomLeftbarDocument1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIInsurEcomLeftbarDocument : HtmlDocument
    {
        
        public UIInsurEcomLeftbarDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "True";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "insurE-com - Left bar";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/sysmaint/content/leftbar.asp";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://www.insur-econnect.com/sysmaint/content/leftbar.asp";
            this.WindowTitles.Add("insurE-com System Maintenance");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIRenewalsMaintenanceHyperlink
        {
            get
            {
                if ((this.mUIRenewalsMaintenanceHyperlink == null))
                {
                    this.mUIRenewalsMaintenanceHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIRenewalsMaintenanceHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIRenewalsMaintenanceHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIRenewalsMaintenanceHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIRenewalsMaintenanceHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Renewals Maintenance";
                    this.mUIRenewalsMaintenanceHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/sysmaint/content/leftbar.asp";
                    this.mUIRenewalsMaintenanceHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIRenewalsMaintenanceHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://www.insur-econnect.com/sysmaint/content/leftbar.asp#";
                    this.mUIRenewalsMaintenanceHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIRenewalsMaintenanceHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "style=\"COLOR: white\" href=\"#\"";
                    this.mUIRenewalsMaintenanceHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "39";
                    this.mUIRenewalsMaintenanceHyperlink.WindowTitles.Add("insurE-com System Maintenance");
                    #endregion
                }
                return this.mUIRenewalsMaintenanceHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIRenewalsMaintenanceHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIInsurEcomLeftbarDocument1 : HtmlDocument
    {
        
        public UIInsurEcomLeftbarDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "True";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "insurE-com - Left bar";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/sysmaint/content/leftbar.asp";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://www.insur-econnect.com/sysmaint/content/leftbar.asp#";
            this.WindowTitles.Add("insurE-com System Maintenance");
            #endregion
        }
        
        #region Properties
        public UIDivRenewalsPane UIDivRenewalsPane
        {
            get
            {
                if ((this.mUIDivRenewalsPane == null))
                {
                    this.mUIDivRenewalsPane = new UIDivRenewalsPane(this);
                }
                return this.mUIDivRenewalsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIDivRenewalsPane mUIDivRenewalsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDivRenewalsPane : HtmlDiv
    {
        
        public UIDivRenewalsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "divRenewals";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Create a Motor Test Renewal Invitation\r\n";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=divRenewals";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "14";
            this.WindowTitles.Add("insurE-com System Maintenance");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UICreateaMotorTestReneHyperlink
        {
            get
            {
                if ((this.mUICreateaMotorTestReneHyperlink == null))
                {
                    this.mUICreateaMotorTestReneHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUICreateaMotorTestReneHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUICreateaMotorTestReneHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUICreateaMotorTestReneHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = "content";
                    this.mUICreateaMotorTestReneHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Create a Motor Test Renewal Invitation";
                    this.mUICreateaMotorTestReneHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/sysmaint/content/AddTestRenewalNotice.asp";
                    this.mUICreateaMotorTestReneHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUICreateaMotorTestReneHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://www.insur-econnect.com/sysmaint/content/AddTestRenewalNotice.asp";
                    this.mUICreateaMotorTestReneHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "itemlink";
                    this.mUICreateaMotorTestReneHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=itemlink href=\"AddTestRenewalNotic";
                    this.mUICreateaMotorTestReneHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "1";
                    this.mUICreateaMotorTestReneHyperlink.WindowTitles.Add("insurE-com System Maintenance");
                    #endregion
                }
                return this.mUICreateaMotorTestReneHyperlink;
            }
        }
        
        public HtmlHyperlink UICreateaHouseholdTestHyperlink
        {
            get
            {
                if ((this.mUICreateaHouseholdTestHyperlink == null))
                {
                    this.mUICreateaHouseholdTestHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUICreateaHouseholdTestHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUICreateaHouseholdTestHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUICreateaHouseholdTestHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = "content";
                    this.mUICreateaHouseholdTestHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Create a Household Test Renewal Invitation";
                    this.mUICreateaHouseholdTestHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/sysmaint/content/AddHouseholdTestRenewalNotice.asp";
                    this.mUICreateaHouseholdTestHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUICreateaHouseholdTestHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://www.insur-econnect.com/sysmaint/content/AddHouseholdTestRenewalNotice.asp" +
                        "";
                    this.mUICreateaHouseholdTestHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "itemlink";
                    this.mUICreateaHouseholdTestHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=itemlink href=\"AddHouseholdTestRen";
                    this.mUICreateaHouseholdTestHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUICreateaHouseholdTestHyperlink.WindowTitles.Add("insurE-com System Maintenance");
                    #endregion
                }
                return this.mUICreateaHouseholdTestHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUICreateaMotorTestReneHyperlink;
        
        private HtmlHyperlink mUICreateaHouseholdTestHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIContentFrame : HtmlFrame
    {
        
        public UIContentFrame(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlFrame.PropertyNames.Id] = null;
            this.SearchProperties[HtmlFrame.PropertyNames.Name] = "content";
            this.FilterProperties[HtmlFrame.PropertyNames.AbsolutePath] = "content/home.asp";
            this.FilterProperties[HtmlFrame.PropertyNames.PageUrl] = "content/home.asp?store=";
            this.FilterProperties[HtmlFrame.PropertyNames.Title] = null;
            this.FilterProperties[HtmlFrame.PropertyNames.Class] = null;
            this.FilterProperties[HtmlFrame.PropertyNames.ControlDefinition] = "noResize marginHeight=0 src=\"content/hom";
            this.FilterProperties[HtmlFrame.PropertyNames.TagInstance] = "3";
            this.WindowTitles.Add("insurE-com System Maintenance");
            #endregion
        }
        
        #region Properties
        public UIInsurEcomMainPageDocument UIInsurEcomMainPageDocument
        {
            get
            {
                if ((this.mUIInsurEcomMainPageDocument == null))
                {
                    this.mUIInsurEcomMainPageDocument = new UIInsurEcomMainPageDocument(this);
                }
                return this.mUIInsurEcomMainPageDocument;
            }
        }
        
        public UIInsurEcomMainPageDocument1 UIInsurEcomMainPageDocument1
        {
            get
            {
                if ((this.mUIInsurEcomMainPageDocument1 == null))
                {
                    this.mUIInsurEcomMainPageDocument1 = new UIInsurEcomMainPageDocument1(this);
                }
                return this.mUIInsurEcomMainPageDocument1;
            }
        }
        #endregion
        
        #region Fields
        private UIInsurEcomMainPageDocument mUIInsurEcomMainPageDocument;
        
        private UIInsurEcomMainPageDocument1 mUIInsurEcomMainPageDocument1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIInsurEcomMainPageDocument : HtmlDocument
    {
        
        public UIInsurEcomMainPageDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "True";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "insurE-com - Main Page";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/sysmaint/content/AddTestRenewalNotice.asp";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://www.insur-econnect.com/sysmaint/content/AddTestRenewalNotice.asp";
            this.WindowTitles.Add("insurE-com System Maintenance");
            #endregion
        }
        
        #region Properties
        public HtmlComboBox UIInsurerIDComboBox
        {
            get
            {
                if ((this.mUIInsurerIDComboBox == null))
                {
                    this.mUIInsurerIDComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIInsurerIDComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "InsurerID";
                    this.mUIInsurerIDComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "InsurerID";
                    this.mUIInsurerIDComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIInsurerIDComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = null;
                    this.mUIInsurerIDComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIInsurerIDComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "54";
                    this.mUIInsurerIDComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = null;
                    this.mUIInsurerIDComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "id=InsurerID onchange=selectInsurer() na";
                    this.mUIInsurerIDComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "1";
                    this.mUIInsurerIDComboBox.WindowTitles.Add("insurE-com System Maintenance");
                    #endregion
                }
                return this.mUIInsurerIDComboBox;
            }
        }
        
        public HtmlEdit UITxtPolicyNumberEdit
        {
            get
            {
                if ((this.mUITxtPolicyNumberEdit == null))
                {
                    this.mUITxtPolicyNumberEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUITxtPolicyNumberEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = null;
                    this.mUITxtPolicyNumberEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "txtPolicyNumber";
                    this.mUITxtPolicyNumberEdit.SearchProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUITxtPolicyNumberEdit.SearchProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUITxtPolicyNumberEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUITxtPolicyNumberEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUITxtPolicyNumberEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=txtPolicyNumber align=left size=15";
                    this.mUITxtPolicyNumberEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "1";
                    this.mUITxtPolicyNumberEdit.WindowTitles.Add("insurE-com System Maintenance");
                    #endregion
                }
                return this.mUITxtPolicyNumberEdit;
            }
        }
        
        public HtmlEdit UITxtAutoLapseDateEdit1
        {
            get
            {
                if ((this.mUITxtAutoLapseDateEdit1 == null))
                {
                    this.mUITxtAutoLapseDateEdit1 = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUITxtAutoLapseDateEdit1.SearchProperties[HtmlEdit.PropertyNames.Id] = null;
                    this.mUITxtAutoLapseDateEdit1.SearchProperties[HtmlEdit.PropertyNames.Name] = "txtAutoLapseDate";
                    this.mUITxtAutoLapseDateEdit1.SearchProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUITxtAutoLapseDateEdit1.SearchProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUITxtAutoLapseDateEdit1.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUITxtAutoLapseDateEdit1.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUITxtAutoLapseDateEdit1.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=txtAutoLapseDate maxLength=10 value";
                    this.mUITxtAutoLapseDateEdit1.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "8";
                    this.mUITxtAutoLapseDateEdit1.WindowTitles.Add("insurE-com System Maintenance");
                    #endregion
                }
                return this.mUITxtAutoLapseDateEdit1;
            }
        }
        
        public HtmlInputButton UICreateRecordButton
        {
            get
            {
                if ((this.mUICreateRecordButton == null))
                {
                    this.mUICreateRecordButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUICreateRecordButton.SearchProperties[HtmlButton.PropertyNames.Id] = "buttonCreate";
                    this.mUICreateRecordButton.SearchProperties[HtmlButton.PropertyNames.Name] = "buttonCreate";
                    this.mUICreateRecordButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = "  Create Record  ";
                    this.mUICreateRecordButton.FilterProperties[HtmlButton.PropertyNames.Type] = "button";
                    this.mUICreateRecordButton.FilterProperties[HtmlButton.PropertyNames.Title] = "Click to create the new record";
                    this.mUICreateRecordButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUICreateRecordButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "id=buttonCreate title=\"Click to create t";
                    this.mUICreateRecordButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "10";
                    this.mUICreateRecordButton.WindowTitles.Add("insurE-com System Maintenance");
                    #endregion
                }
                return this.mUICreateRecordButton;
            }
        }
        
        public HtmlEdit UITxtRenewalDateEdit
        {
            get
            {
                if ((this.mUITxtRenewalDateEdit == null))
                {
                    this.mUITxtRenewalDateEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUITxtRenewalDateEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = null;
                    this.mUITxtRenewalDateEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "txtRenewalDate";
                    this.mUITxtRenewalDateEdit.SearchProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUITxtRenewalDateEdit.SearchProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUITxtRenewalDateEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUITxtRenewalDateEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUITxtRenewalDateEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=txtRenewalDate value=12/11/2012 siz";
                    this.mUITxtRenewalDateEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "6";
                    this.mUITxtRenewalDateEdit.WindowTitles.Add("insurE-com System Maintenance");
                    #endregion
                }
                return this.mUITxtRenewalDateEdit;
            }
        }
        #endregion
        
        #region Fields
        private HtmlComboBox mUIInsurerIDComboBox;
        
        private HtmlEdit mUITxtPolicyNumberEdit;
        
        private HtmlEdit mUITxtAutoLapseDateEdit1;
        
        private HtmlInputButton mUICreateRecordButton;
        
        private HtmlEdit mUITxtRenewalDateEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIInsurEcomMainPageDocument1 : HtmlDocument
    {
        
        public UIInsurEcomMainPageDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "True";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "insurE-com - Main Page";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/sysmaint/content/AddHouseholdTestRenewalNotice.asp";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://www.insur-econnect.com/sysmaint/content/AddHouseholdTestRenewalNotice.asp" +
                "";
            this.WindowTitles.Add("insurE-com System Maintenance");
            #endregion
        }
        
        #region Properties
        public HtmlComboBox UIInsurerIDComboBox
        {
            get
            {
                if ((this.mUIInsurerIDComboBox == null))
                {
                    this.mUIInsurerIDComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIInsurerIDComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "InsurerID";
                    this.mUIInsurerIDComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "InsurerID";
                    this.mUIInsurerIDComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIInsurerIDComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = null;
                    this.mUIInsurerIDComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIInsurerIDComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "54";
                    this.mUIInsurerIDComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = null;
                    this.mUIInsurerIDComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "id=InsurerID onchange=selectInsurer() na";
                    this.mUIInsurerIDComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "1";
                    this.mUIInsurerIDComboBox.WindowTitles.Add("insurE-com System Maintenance");
                    #endregion
                }
                return this.mUIInsurerIDComboBox;
            }
        }
        
        public HtmlEdit UITxtPolicyNumberEdit
        {
            get
            {
                if ((this.mUITxtPolicyNumberEdit == null))
                {
                    this.mUITxtPolicyNumberEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUITxtPolicyNumberEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = null;
                    this.mUITxtPolicyNumberEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "txtPolicyNumber";
                    this.mUITxtPolicyNumberEdit.SearchProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUITxtPolicyNumberEdit.SearchProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUITxtPolicyNumberEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUITxtPolicyNumberEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUITxtPolicyNumberEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "onchange=enableButtons() name=txtPolicyN";
                    this.mUITxtPolicyNumberEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "1";
                    this.mUITxtPolicyNumberEdit.WindowTitles.Add("insurE-com System Maintenance");
                    #endregion
                }
                return this.mUITxtPolicyNumberEdit;
            }
        }
        
        public HtmlTextArea UITxtClientXmlEdit
        {
            get
            {
                if ((this.mUITxtClientXmlEdit == null))
                {
                    this.mUITxtClientXmlEdit = new HtmlTextArea(this);
                    #region Search Criteria
                    this.mUITxtClientXmlEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = null;
                    this.mUITxtClientXmlEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "txtClientXml";
                    this.mUITxtClientXmlEdit.SearchProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUITxtClientXmlEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUITxtClientXmlEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUITxtClientXmlEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "onchange=enableButtons() wrap=off cols=5";
                    this.mUITxtClientXmlEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "1";
                    this.mUITxtClientXmlEdit.WindowTitles.Add("insurE-com System Maintenance");
                    #endregion
                }
                return this.mUITxtClientXmlEdit;
            }
        }
        
        public HtmlInputButton UIGetXMLfromServerButton
        {
            get
            {
                if ((this.mUIGetXMLfromServerButton == null))
                {
                    this.mUIGetXMLfromServerButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIGetXMLfromServerButton.SearchProperties[HtmlButton.PropertyNames.Id] = "getXmlButton";
                    this.mUIGetXMLfromServerButton.SearchProperties[HtmlButton.PropertyNames.Name] = "getXmlButton";
                    this.mUIGetXMLfromServerButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = "Get XML from Server";
                    this.mUIGetXMLfromServerButton.FilterProperties[HtmlButton.PropertyNames.Type] = "button";
                    this.mUIGetXMLfromServerButton.FilterProperties[HtmlButton.PropertyNames.Title] = "Click to get xml from server";
                    this.mUIGetXMLfromServerButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUIGetXMLfromServerButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "id=getXmlButton title=\"Click to get xml ";
                    this.mUIGetXMLfromServerButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "5";
                    this.mUIGetXMLfromServerButton.WindowTitles.Add("insurE-com System Maintenance");
                    #endregion
                }
                return this.mUIGetXMLfromServerButton;
            }
        }
        
        public HtmlInputButton UICreateRecordButton
        {
            get
            {
                if ((this.mUICreateRecordButton == null))
                {
                    this.mUICreateRecordButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUICreateRecordButton.SearchProperties[HtmlButton.PropertyNames.Id] = "buttonCreate";
                    this.mUICreateRecordButton.SearchProperties[HtmlButton.PropertyNames.Name] = "buttonCreate";
                    this.mUICreateRecordButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = "  Create Record  ";
                    this.mUICreateRecordButton.FilterProperties[HtmlButton.PropertyNames.Type] = "button";
                    this.mUICreateRecordButton.FilterProperties[HtmlButton.PropertyNames.Title] = "Click to create the new record";
                    this.mUICreateRecordButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUICreateRecordButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "id=buttonCreate title=\"Click to create t";
                    this.mUICreateRecordButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "6";
                    this.mUICreateRecordButton.WindowTitles.Add("insurE-com System Maintenance");
                    #endregion
                }
                return this.mUICreateRecordButton;
            }
        }
        
        public HtmlEdit UITxtRenewalDateEdit
        {
            get
            {
                if ((this.mUITxtRenewalDateEdit == null))
                {
                    this.mUITxtRenewalDateEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUITxtRenewalDateEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = null;
                    this.mUITxtRenewalDateEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "txtRenewalDate";
                    this.mUITxtRenewalDateEdit.SearchProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUITxtRenewalDateEdit.SearchProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUITxtRenewalDateEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUITxtRenewalDateEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUITxtRenewalDateEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "onchange=enableButtons() name=txtRenewal";
                    this.mUITxtRenewalDateEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "2";
                    this.mUITxtRenewalDateEdit.WindowTitles.Add("insurE-com System Maintenance");
                    #endregion
                }
                return this.mUITxtRenewalDateEdit;
            }
        }
        
        public HtmlEdit UITxtAutoLapseDateEdit
        {
            get
            {
                if ((this.mUITxtAutoLapseDateEdit == null))
                {
                    this.mUITxtAutoLapseDateEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUITxtAutoLapseDateEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = null;
                    this.mUITxtAutoLapseDateEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "txtAutoLapseDate";
                    this.mUITxtAutoLapseDateEdit.SearchProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUITxtAutoLapseDateEdit.SearchProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUITxtAutoLapseDateEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUITxtAutoLapseDateEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUITxtAutoLapseDateEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "onchange=enableButtons() name=txtAutoLap";
                    this.mUITxtAutoLapseDateEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "4";
                    this.mUITxtAutoLapseDateEdit.WindowTitles.Add("insurE-com System Maintenance");
                    #endregion
                }
                return this.mUITxtAutoLapseDateEdit;
            }
        }
        #endregion
        
        #region Fields
        private HtmlComboBox mUIInsurerIDComboBox;
        
        private HtmlEdit mUITxtPolicyNumberEdit;
        
        private HtmlTextArea mUITxtClientXmlEdit;
        
        private HtmlInputButton mUIGetXMLfromServerButton;
        
        private HtmlInputButton mUICreateRecordButton;
        
        private HtmlEdit mUITxtRenewalDateEdit;
        
        private HtmlEdit mUITxtAutoLapseDateEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIInsurEcomSystemMaintTitleBar : WinTitleBar
    {
        
        public UIInsurEcomSystemMaintTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("insurE-com System Maintenance");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("insurE-com System Maintenance");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow59 : WinWindow
    {
        
        public UIItemWindow59(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "41477";
            this.WindowTitles.Add("Blank Page");
            #endregion
        }
        
        #region Properties
        public WinEdit UIAddressandsearchusinEdit
        {
            get
            {
                if ((this.mUIAddressandsearchusinEdit == null))
                {
                    this.mUIAddressandsearchusinEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIAddressandsearchusinEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Address and search using Bing";
                    this.mUIAddressandsearchusinEdit.WindowTitles.Add("Blank Page");
                    #endregion
                }
                return this.mUIAddressandsearchusinEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIAddressandsearchusinEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISearchResultForBN16BWindow : WinWindow
    {
        
        public UISearchResultForBN16BWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Search Result For BN1 6BN";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Search Result For BN1 6BN");
            #endregion
        }
        
        #region Properties
        public UIOKWindow26 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow26(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow26 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow26 : WinWindow
    {
        
        public UIOKWindow26(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "3";
            this.WindowTitles.Add("Search Result For BN1 6BN");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "Ok";
                    this.mUIOKButton.WindowTitles.Add("Search Result For BN1 6BN");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRunWindow : WinWindow
    {
        
        public UIRunWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Run";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Run");
            #endregion
        }
        
        #region Properties
        public UIItemWindow60 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow60(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOKWindow27 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow27(this);
                }
                return this.mUIOKWindow;
            }
        }
        
        public UIItemWindow125 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow125(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow60 mUIItemWindow;
        
        private UIOKWindow27 mUIOKWindow;
        
        private UIItemWindow125 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow60 : WinWindow
    {
        
        public UIItemWindow60(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Run");
            #endregion
        }
        
        #region Properties
        public WinEdit UIOpenEdit
        {
            get
            {
                if ((this.mUIOpenEdit == null))
                {
                    this.mUIOpenEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIOpenEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Open:";
                    this.mUIOpenEdit.WindowTitles.Add("Run");
                    #endregion
                }
                return this.mUIOpenEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIOpenEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow27 : WinWindow
    {
        
        public UIOKWindow27(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Run");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Run");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow125 : WinWindow
    {
        
        public UIItemWindow125(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "12298";
            this.WindowTitles.Add("Run");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIOpenComboBox
        {
            get
            {
                if ((this.mUIOpenComboBox == null))
                {
                    this.mUIOpenComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIOpenComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Open:";
                    this.mUIOpenComboBox.WindowTitles.Add("Run");
                    #endregion
                }
                return this.mUIOpenComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIOpenComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRegressIETamPolicyWindow : WinWindow
    {
        
        public UIRegressIETamPolicyWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Regress IETam Policy";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Regress IETam Policy");
            #endregion
        }
        
        #region Properties
        public UIItemWindow62 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow62(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow214 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow214(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIRegressWindow UIRegressWindow
        {
            get
            {
                if ((this.mUIRegressWindow == null))
                {
                    this.mUIRegressWindow = new UIRegressWindow(this);
                }
                return this.mUIRegressWindow;
            }
        }
        
        public UIItemWindow126 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow126(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIExitWindow4 UIExitWindow
        {
            get
            {
                if ((this.mUIExitWindow == null))
                {
                    this.mUIExitWindow = new UIExitWindow4(this);
                }
                return this.mUIExitWindow;
            }
        }
        
        public UIItemWindow312 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow312(this);
                }
                return this.mUIItemWindow3;
            }
        }
        
        public UIItemWindow410 UIItemWindow4
        {
            get
            {
                if ((this.mUIItemWindow4 == null))
                {
                    this.mUIItemWindow4 = new UIItemWindow410(this);
                }
                return this.mUIItemWindow4;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow62 mUIItemWindow;
        
        private UIItemWindow214 mUIItemWindow2;
        
        private UIRegressWindow mUIRegressWindow;
        
        private UIItemWindow126 mUIItemWindow1;
        
        private UIExitWindow4 mUIExitWindow;
        
        private UIItemWindow312 mUIItemWindow3;
        
        private UIItemWindow410 mUIItemWindow4;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow62 : WinWindow
    {
        
        public UIItemWindow62(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "8";
            this.WindowTitles.Add("Regress IETam Policy");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Regress IETam Policy");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow214 : WinWindow
    {
        
        public UIItemWindow214(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "11";
            this.WindowTitles.Add("Regress IETam Policy");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Regress IETam Policy");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRegressWindow : WinWindow
    {
        
        public UIRegressWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "10";
            this.WindowTitles.Add("Regress IETam Policy");
            #endregion
        }
        
        #region Properties
        public WinButton UIRegressButton
        {
            get
            {
                if ((this.mUIRegressButton == null))
                {
                    this.mUIRegressButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIRegressButton.SearchProperties[WinButton.PropertyNames.Name] = "Regress";
                    this.mUIRegressButton.WindowTitles.Add("Regress IETam Policy");
                    #endregion
                }
                return this.mUIRegressButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIRegressButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow126 : WinWindow
    {
        
        public UIItemWindow126(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Regress IETam Policy");
            #endregion
        }
        
        #region Properties
        public WinMenuBar UISystemMenuBar
        {
            get
            {
                if ((this.mUISystemMenuBar == null))
                {
                    this.mUISystemMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUISystemMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "System";
                    this.mUISystemMenuBar.WindowTitles.Add("Regress IETam Policy");
                    #endregion
                }
                return this.mUISystemMenuBar;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUISystemMenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIExitWindow4 : WinWindow
    {
        
        public UIExitWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "12";
            this.WindowTitles.Add("Regress IETam Policy");
            #endregion
        }
        
        #region Properties
        public WinButton UIExitButton
        {
            get
            {
                if ((this.mUIExitButton == null))
                {
                    this.mUIExitButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIExitButton.SearchProperties[WinButton.PropertyNames.Name] = "Exit";
                    this.mUIExitButton.WindowTitles.Add("Regress IETam Policy");
                    #endregion
                }
                return this.mUIExitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIExitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow312 : WinWindow
    {
        
        public UIItemWindow312(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "9";
            this.WindowTitles.Add("Regress IETam Policy");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Regress IETam Policy");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow410 : WinWindow
    {
        
        public UIItemWindow410(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "3";
            this.WindowTitles.Add("Regress IETam Policy");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIItemComboBox
        {
            get
            {
                if ((this.mUIItemComboBox == null))
                {
                    this.mUIItemComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIItemComboBox.WindowTitles.Add("Regress IETam Policy");
                    #endregion
                }
                return this.mUIItemComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIItemComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRenewalLoaderWindow : WinWindow
    {
        
        public UIRenewalLoaderWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Renewal Loader";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TfUIMain";
            this.WindowTitles.Add("Renewal Loader");
            #endregion
        }
        
        #region Properties
        public UIItem17112012Window UIItem17112012Window
        {
            get
            {
                if ((this.mUIItem17112012Window == null))
                {
                    this.mUIItem17112012Window = new UIItem17112012Window(this);
                }
                return this.mUIItem17112012Window;
            }
        }
        
        public UIRenewalLoaderClient UIRenewalLoaderClient
        {
            get
            {
                if ((this.mUIRenewalLoaderClient == null))
                {
                    this.mUIRenewalLoaderClient = new UIRenewalLoaderClient(this);
                }
                return this.mUIRenewalLoaderClient;
            }
        }
        
        public UIRenewalLoaderTitleBar UIRenewalLoaderTitleBar
        {
            get
            {
                if ((this.mUIRenewalLoaderTitleBar == null))
                {
                    this.mUIRenewalLoaderTitleBar = new UIRenewalLoaderTitleBar(this);
                }
                return this.mUIRenewalLoaderTitleBar;
            }
        }
        
        public UIItem19112012Window UIItem19112012Window
        {
            get
            {
                if ((this.mUIItem19112012Window == null))
                {
                    this.mUIItem19112012Window = new UIItem19112012Window(this);
                }
                return this.mUIItem19112012Window;
            }
        }
        
        public UIItem23112012Window UIItem23112012Window
        {
            get
            {
                if ((this.mUIItem23112012Window == null))
                {
                    this.mUIItem23112012Window = new UIItem23112012Window(this);
                }
                return this.mUIItem23112012Window;
            }
        }
        
        public UIItem25112012Window UIItem25112012Window
        {
            get
            {
                if ((this.mUIItem25112012Window == null))
                {
                    this.mUIItem25112012Window = new UIItem25112012Window(this);
                }
                return this.mUIItem25112012Window;
            }
        }
        
        public UIItem27112012Window UIItem27112012Window
        {
            get
            {
                if ((this.mUIItem27112012Window == null))
                {
                    this.mUIItem27112012Window = new UIItem27112012Window(this);
                }
                return this.mUIItem27112012Window;
            }
        }
        
        public UIItem29112012Window UIItem29112012Window
        {
            get
            {
                if ((this.mUIItem29112012Window == null))
                {
                    this.mUIItem29112012Window = new UIItem29112012Window(this);
                }
                return this.mUIItem29112012Window;
            }
        }
        
        public UIItem01122012Window UIItem01122012Window
        {
            get
            {
                if ((this.mUIItem01122012Window == null))
                {
                    this.mUIItem01122012Window = new UIItem01122012Window(this);
                }
                return this.mUIItem01122012Window;
            }
        }
        
        public UIItem03122012Window UIItem03122012Window
        {
            get
            {
                if ((this.mUIItem03122012Window == null))
                {
                    this.mUIItem03122012Window = new UIItem03122012Window(this);
                }
                return this.mUIItem03122012Window;
            }
        }
        
        public UIItem05122012Window UIItem05122012Window
        {
            get
            {
                if ((this.mUIItem05122012Window == null))
                {
                    this.mUIItem05122012Window = new UIItem05122012Window(this);
                }
                return this.mUIItem05122012Window;
            }
        }
        
        public UIItem1Window UIItem1Window
        {
            get
            {
                if ((this.mUIItem1Window == null))
                {
                    this.mUIItem1Window = new UIItem1Window(this);
                }
                return this.mUIItem1Window;
            }
        }
        
        public UIItem06122012Window UIItem06122012Window
        {
            get
            {
                if ((this.mUIItem06122012Window == null))
                {
                    this.mUIItem06122012Window = new UIItem06122012Window(this);
                }
                return this.mUIItem06122012Window;
            }
        }
        
        public UIItem12122012Window UIItem12122012Window
        {
            get
            {
                if ((this.mUIItem12122012Window == null))
                {
                    this.mUIItem12122012Window = new UIItem12122012Window(this);
                }
                return this.mUIItem12122012Window;
            }
        }
        
        public UIItem13122012Window UIItem13122012Window
        {
            get
            {
                if ((this.mUIItem13122012Window == null))
                {
                    this.mUIItem13122012Window = new UIItem13122012Window(this);
                }
                return this.mUIItem13122012Window;
            }
        }
        #endregion
        
        #region Fields
        private UIItem17112012Window mUIItem17112012Window;
        
        private UIRenewalLoaderClient mUIRenewalLoaderClient;
        
        private UIRenewalLoaderTitleBar mUIRenewalLoaderTitleBar;
        
        private UIItem19112012Window mUIItem19112012Window;
        
        private UIItem23112012Window mUIItem23112012Window;
        
        private UIItem25112012Window mUIItem25112012Window;
        
        private UIItem27112012Window mUIItem27112012Window;
        
        private UIItem29112012Window mUIItem29112012Window;
        
        private UIItem01122012Window mUIItem01122012Window;
        
        private UIItem03122012Window mUIItem03122012Window;
        
        private UIItem05122012Window mUIItem05122012Window;
        
        private UIItem1Window mUIItem1Window;
        
        private UIItem06122012Window mUIItem06122012Window;
        
        private UIItem12122012Window mUIItem12122012Window;
        
        private UIItem13122012Window mUIItem13122012Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItem17112012Window : WinWindow
    {
        
        public UIItem17112012Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "17/11/2012";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TEdit";
            this.WindowTitles.Add("Renewal Loader");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Renewal Loader");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRenewalLoaderClient : WinClient
    {
        
        public UIRenewalLoaderClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Renewal Loader";
            this.WindowTitles.Add("Renewal Loader");
            #endregion
        }
        
        #region Properties
        public WinButton UIRunButton
        {
            get
            {
                if ((this.mUIRunButton == null))
                {
                    this.mUIRunButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIRunButton.SearchProperties[WinButton.PropertyNames.Name] = "Run";
                    this.mUIRunButton.WindowTitles.Add("Renewal Loader");
                    #endregion
                }
                return this.mUIRunButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIRunButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRenewalLoaderTitleBar : WinTitleBar
    {
        
        public UIRenewalLoaderTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Renewal Loader");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Renewal Loader");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItem19112012Window : WinWindow
    {
        
        public UIItem19112012Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "19/11/2012";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TEdit";
            this.WindowTitles.Add("Renewal Loader");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Renewal Loader");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItem23112012Window : WinWindow
    {
        
        public UIItem23112012Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "23/11/2012";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TEdit";
            this.WindowTitles.Add("Renewal Loader");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Renewal Loader");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItem25112012Window : WinWindow
    {
        
        public UIItem25112012Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "25/11/2012";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TEdit";
            this.WindowTitles.Add("Renewal Loader");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Renewal Loader");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItem27112012Window : WinWindow
    {
        
        public UIItem27112012Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "27/11/2012";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TEdit";
            this.WindowTitles.Add("Renewal Loader");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Renewal Loader");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItem29112012Window : WinWindow
    {
        
        public UIItem29112012Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "29/11/2012";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TEdit";
            this.WindowTitles.Add("Renewal Loader");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Renewal Loader");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItem01122012Window : WinWindow
    {
        
        public UIItem01122012Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "01/12/2012";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TEdit";
            this.WindowTitles.Add("Renewal Loader");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Renewal Loader");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItem03122012Window : WinWindow
    {
        
        public UIItem03122012Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "03/12/2012";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TEdit";
            this.WindowTitles.Add("Renewal Loader");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Renewal Loader");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItem05122012Window : WinWindow
    {
        
        public UIItem05122012Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TEdit";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Renewal Loader");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Renewal Loader");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItem1Window : WinWindow
    {
        
        public UIItem1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "1";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TEdit";
            this.WindowTitles.Add("Renewal Loader");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Renewal Loader");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItem06122012Window : WinWindow
    {
        
        public UIItem06122012Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "06/12/2012";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TEdit";
            this.WindowTitles.Add("Renewal Loader");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Renewal Loader");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItem12122012Window : WinWindow
    {
        
        public UIItem12122012Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TEdit";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Renewal Loader");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Renewal Loader");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItem13122012Window : WinWindow
    {
        
        public UIItem13122012Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "TEdit";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Renewal Loader");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Renewal Loader");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIIETAMRenewalsWindow : WinWindow
    {
        
        public UIIETAMRenewalsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Personal Lines Renewals";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("IETAM Renewals");
            #endregion
        }
        
        #region Properties
        public UIItemWindow63 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow63(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOKWindow28 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow28(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow63 mUIItemWindow;
        
        private UIOKWindow28 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow63 : WinWindow
    {
        
        public UIItemWindow63(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "3";
            this.WindowTitles.Add("IETAM Renewals");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("IETAM Renewals");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow28 : WinWindow
    {
        
        public UIOKWindow28(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("IETAM Renewals");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "Ok";
                    this.mUIOKButton.WindowTitles.Add("IETAM Renewals");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPoliciesAutoRenewedAWindow : WinWindow
    {
        
        public UIPoliciesAutoRenewedAWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Policies Auto-Renewed & Auto-Lapsed";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Policies Auto-Renewed & Auto-Lapsed");
            #endregion
        }
        
        #region Properties
        public UIExitWindow5 UIExitWindow
        {
            get
            {
                if ((this.mUIExitWindow == null))
                {
                    this.mUIExitWindow = new UIExitWindow5(this);
                }
                return this.mUIExitWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIExitWindow5 mUIExitWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIExitWindow5 : WinWindow
    {
        
        public UIExitWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Policies Auto-Renewed & Auto-Lapsed");
            #endregion
        }
        
        #region Properties
        public WinButton UIExitButton
        {
            get
            {
                if ((this.mUIExitButton == null))
                {
                    this.mUIExitButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIExitButton.SearchProperties[WinButton.PropertyNames.Name] = "Exit";
                    this.mUIExitButton.WindowTitles.Add("Policies Auto-Renewed & Auto-Lapsed");
                    #endregion
                }
                return this.mUIExitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIExitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRenewalSearchWindow : WinWindow
    {
        
        public UIRenewalSearchWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Renewal Search";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Renewal Search");
            #endregion
        }
        
        #region Properties
        public UIOKWindow29 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow29(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow29 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow29 : WinWindow
    {
        
        public UIOKWindow29(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Renewal Search");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "Ok";
                    this.mUIOKButton.WindowTitles.Add("Renewal Search");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICustomerggggggggggggWindow : WinWindow
    {
        
        public UICustomerggggggggggggWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Customer: ggggg gggggggg";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6MDIForm";
            this.WindowTitles.Add("Customer: ggggg gggggggg");
            #endregion
        }
        
        #region Properties
        public UICUSTOMERSWindow2 UICUSTOMERSWindow
        {
            get
            {
                if ((this.mUICUSTOMERSWindow == null))
                {
                    this.mUICUSTOMERSWindow = new UICUSTOMERSWindow2(this);
                }
                return this.mUICUSTOMERSWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICUSTOMERSWindow2 mUICUSTOMERSWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICUSTOMERSWindow2 : WinWindow
    {
        
        public UICUSTOMERSWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "32768";
            this.WindowTitles.Add("Customer: ggggg gggggggg");
            #endregion
        }
        
        #region Properties
        public UIItemWindow64 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow64(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow64 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow64 : WinWindow
    {
        
        public UIItemWindow64(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ListView20WndClass";
            this.WindowTitles.Add("Customer: ggggg gggggggg");
            #endregion
        }
        
        #region Properties
        public WinClient UICUSTOMERSClient
        {
            get
            {
                if ((this.mUICUSTOMERSClient == null))
                {
                    this.mUICUSTOMERSClient = new WinClient(this);
                    #region Search Criteria
                    this.mUICUSTOMERSClient.WindowTitles.Add("Customer: ggggg gggggggg");
                    #endregion
                }
                return this.mUICUSTOMERSClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUICUSTOMERSClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFilterRenewalRecordsWindow : WinWindow
    {
        
        public UIFilterRenewalRecordsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Filter Renewal Records";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Filter Renewal Records");
            #endregion
        }
        
        #region Properties
        public UIItemWindow65 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow65(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow127 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow127(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow215 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow215(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIOKWindow30 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow30(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow65 mUIItemWindow;
        
        private UIItemWindow127 mUIItemWindow1;
        
        private UIItemWindow215 mUIItemWindow2;
        
        private UIOKWindow30 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow65 : WinWindow
    {
        
        public UIItemWindow65(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Filter Renewal Records");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Filter Renewal Records");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow127 : WinWindow
    {
        
        public UIItemWindow127(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Filter Renewal Records");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Filter Renewal Records");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow215 : WinWindow
    {
        
        public UIItemWindow215(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "16";
            this.WindowTitles.Add("Filter Renewal Records");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIItemComboBox
        {
            get
            {
                if ((this.mUIItemComboBox == null))
                {
                    this.mUIItemComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIItemComboBox.WindowTitles.Add("Filter Renewal Records");
                    #endregion
                }
                return this.mUIItemComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIItemComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow30 : WinWindow
    {
        
        public UIOKWindow30(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Filter Renewal Records");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "Ok";
                    this.mUIOKButton.WindowTitles.Add("Filter Renewal Records");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAUTO1871001Window : WinWindow
    {
        
        public UIAUTO1871001Window()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "AUTO", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("AUTO187-1001");
            #endregion
        }
        
        #region Properties
        public UIInviteWindow UIInviteWindow
        {
            get
            {
                if ((this.mUIInviteWindow == null))
                {
                    this.mUIInviteWindow = new UIInviteWindow(this);
                }
                return this.mUIInviteWindow;
            }
        }
        
        public UIItemWindow66 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow66(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIRenewPolicyWindow UIRenewPolicyWindow
        {
            get
            {
                if ((this.mUIRenewPolicyWindow == null))
                {
                    this.mUIRenewPolicyWindow = new UIRenewPolicyWindow(this);
                }
                return this.mUIRenewPolicyWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIInviteWindow mUIInviteWindow;
        
        private UIItemWindow66 mUIItemWindow;
        
        private UIRenewPolicyWindow mUIRenewPolicyWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIInviteWindow : WinWindow
    {
        
        public UIInviteWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "&Invite";
            #endregion
        }
        
        #region Properties
        public WinButton UIInviteButton
        {
            get
            {
                if ((this.mUIInviteButton == null))
                {
                    this.mUIInviteButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIInviteButton.SearchProperties[WinButton.PropertyNames.Name] = "Invite";
                    #endregion
                }
                return this.mUIInviteButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIInviteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow66 : WinWindow
    {
        
        public UIItemWindow66(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "17";
            this.WindowTitles.Add("AUTO187-1001");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("AUTO187-1001");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRenewPolicyWindow : WinWindow
    {
        
        public UIRenewPolicyWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "10";
            #endregion
        }
        
        #region Properties
        public WinButton UIRenewPolicyButton
        {
            get
            {
                if ((this.mUIRenewPolicyButton == null))
                {
                    this.mUIRenewPolicyButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIRenewPolicyButton.SearchProperties.Add(new PropertyExpression(WinButton.PropertyNames.Name, "Renew Policy", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIRenewPolicyButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIRenewPolicyButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPrintDocumentsWindow : WinWindow
    {
        
        public UIPrintDocumentsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Print Documents";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Print Documents");
            #endregion
        }
        
        #region Properties
        public UIDeferPrintingWindow1 UIDeferPrintingWindow
        {
            get
            {
                if ((this.mUIDeferPrintingWindow == null))
                {
                    this.mUIDeferPrintingWindow = new UIDeferPrintingWindow1(this);
                }
                return this.mUIDeferPrintingWindow;
            }
        }
        
        public UIOKWindow31 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow31(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDeferPrintingWindow1 mUIDeferPrintingWindow;
        
        private UIOKWindow31 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDeferPrintingWindow1 : WinWindow
    {
        
        public UIDeferPrintingWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "4";
            this.WindowTitles.Add("Print Documents");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIDeferPrintingCheckBox
        {
            get
            {
                if ((this.mUIDeferPrintingCheckBox == null))
                {
                    this.mUIDeferPrintingCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIDeferPrintingCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Defer Printing?";
                    this.mUIDeferPrintingCheckBox.WindowTitles.Add("Print Documents");
                    #endregion
                }
                return this.mUIDeferPrintingCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIDeferPrintingCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow31 : WinWindow
    {
        
        public UIOKWindow31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Print Documents");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "Ok";
                    this.mUIOKButton.WindowTitles.Add("Print Documents");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIConfirmWindow2 : WinWindow
    {
        
        public UIConfirmWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm");
            #endregion
        }
        
        #region Properties
        public UIYesWindow3 UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow3(this);
                }
                return this.mUIYesWindow;
            }
        }
        
        public UIOKWindow32 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow32(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIYesWindow3 mUIYesWindow;
        
        private UIOKWindow32 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIYesWindow3 : WinWindow
    {
        
        public UIYesWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Confirm");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Confirm");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow32 : WinWindow
    {
        
        public UIOKWindow32(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Confirm");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Confirm");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMTASuccessfulWindow : WinWindow
    {
        
        public UIMTASuccessfulWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "MTA Successful";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("MTA Successful");
            #endregion
        }
        
        #region Properties
        public UIMTAsuccessfullyproceWindow UIMTAsuccessfullyproceWindow
        {
            get
            {
                if ((this.mUIMTAsuccessfullyproceWindow == null))
                {
                    this.mUIMTAsuccessfullyproceWindow = new UIMTAsuccessfullyproceWindow(this);
                }
                return this.mUIMTAsuccessfullyproceWindow;
            }
        }
        
        public UIOKWindow33 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow33(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIMTAsuccessfullyproceWindow mUIMTAsuccessfullyproceWindow;
        
        private UIOKWindow33 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMTAsuccessfullyproceWindow : WinWindow
    {
        
        public UIMTAsuccessfullyproceWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.WindowTitles.Add("MTA Successful");
            #endregion
        }
        
        #region Properties
        public WinText UIMTAsuccessfullyproceText
        {
            get
            {
                if ((this.mUIMTAsuccessfullyproceText == null))
                {
                    this.mUIMTAsuccessfullyproceText = new WinText(this);
                    #region Search Criteria
                    this.mUIMTAsuccessfullyproceText.SearchProperties[WinText.PropertyNames.Name] = "MTA successfully processed on a previously renewed policy.WARNING! - RENEWAL EDI " +
                        "HAS BEEN CANCELLEDThe renewal status has been stepped back to Due. You will need" +
                        " to process the renewal again via the Amend Risk option.";
                    this.mUIMTAsuccessfullyproceText.WindowTitles.Add("MTA Successful");
                    #endregion
                }
                return this.mUIMTAsuccessfullyproceText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIMTAsuccessfullyproceText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow33 : WinWindow
    {
        
        public UIOKWindow33(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("MTA Successful");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("MTA Successful");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRebrokeResultsScreenWindow : WinWindow
    {
        
        public UIRebrokeResultsScreenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Rebroke Results Screen";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Rebroke Results Screen");
            #endregion
        }
        
        #region Properties
        public UIItemWindow67 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow67(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOKWindow34 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow34(this);
                }
                return this.mUIOKWindow;
            }
        }
        
        public UIItemWindow128 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow128(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow216 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow216(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UISelectAlternativeWindow UISelectAlternativeWindow
        {
            get
            {
                if ((this.mUISelectAlternativeWindow == null))
                {
                    this.mUISelectAlternativeWindow = new UISelectAlternativeWindow(this);
                }
                return this.mUISelectAlternativeWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow67 mUIItemWindow;
        
        private UIOKWindow34 mUIOKWindow;
        
        private UIItemWindow128 mUIItemWindow1;
        
        private UIItemWindow216 mUIItemWindow2;
        
        private UISelectAlternativeWindow mUISelectAlternativeWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow67 : WinWindow
    {
        
        public UIItemWindow67(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "msvb_lib_header";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "8";
            this.WindowTitles.Add("Rebroke Results Screen");
            #endregion
        }
        
        #region Properties
        public WinClient UIItemClient
        {
            get
            {
                if ((this.mUIItemClient == null))
                {
                    this.mUIItemClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIItemClient.WindowTitles.Add("Rebroke Results Screen");
                    #endregion
                }
                return this.mUIItemClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIItemClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow34 : WinWindow
    {
        
        public UIOKWindow34(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "8";
            this.WindowTitles.Add("Rebroke Results Screen");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Rebroke Results Screen");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow128 : WinWindow
    {
        
        public UIItemWindow128(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ListView20WndClass";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "8";
            this.WindowTitles.Add("Rebroke Results Screen");
            #endregion
        }
        
        #region Properties
        public WinClient UIItemClient
        {
            get
            {
                if ((this.mUIItemClient == null))
                {
                    this.mUIItemClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIItemClient.WindowTitles.Add("Rebroke Results Screen");
                    #endregion
                }
                return this.mUIItemClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIItemClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow216 : WinWindow
    {
        
        public UIItemWindow216(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ListView20WndClass";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "8";
            this.WindowTitles.Add("Rebroke Results Screen");
            #endregion
        }
        
        #region Properties
        public WinClient UIItemClient
        {
            get
            {
                if ((this.mUIItemClient == null))
                {
                    this.mUIItemClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIItemClient.WindowTitles.Add("Rebroke Results Screen");
                    #endregion
                }
                return this.mUIItemClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIItemClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISelectAlternativeWindow : WinWindow
    {
        
        public UISelectAlternativeWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Rebroke Results Screen");
            #endregion
        }
        
        #region Properties
        public WinButton UISelectAlternativeButton
        {
            get
            {
                if ((this.mUISelectAlternativeButton == null))
                {
                    this.mUISelectAlternativeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISelectAlternativeButton.SearchProperties[WinButton.PropertyNames.Name] = "Select Alternative";
                    this.mUISelectAlternativeButton.WindowTitles.Add("Rebroke Results Screen");
                    #endregion
                }
                return this.mUISelectAlternativeButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISelectAlternativeButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAUTO2081001Window : WinWindow
    {
        
        public UIAUTO2081001Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "AUTO208-1001";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("AUTO208-1001");
            #endregion
        }
        
        #region Properties
        public UIRebrokeWindow UIRebrokeWindow
        {
            get
            {
                if ((this.mUIRebrokeWindow == null))
                {
                    this.mUIRebrokeWindow = new UIRebrokeWindow(this);
                }
                return this.mUIRebrokeWindow;
            }
        }
        
        public UIAmendRiskWindow UIAmendRiskWindow
        {
            get
            {
                if ((this.mUIAmendRiskWindow == null))
                {
                    this.mUIAmendRiskWindow = new UIAmendRiskWindow(this);
                }
                return this.mUIAmendRiskWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIRebrokeWindow mUIRebrokeWindow;
        
        private UIAmendRiskWindow mUIAmendRiskWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRebrokeWindow : WinWindow
    {
        
        public UIRebrokeWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "5";
            this.WindowTitles.Add("AUTO208-1001");
            #endregion
        }
        
        #region Properties
        public WinButton UIRebrokeButton
        {
            get
            {
                if ((this.mUIRebrokeButton == null))
                {
                    this.mUIRebrokeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIRebrokeButton.SearchProperties[WinButton.PropertyNames.Name] = "Rebroke...";
                    this.mUIRebrokeButton.WindowTitles.Add("AUTO208-1001");
                    #endregion
                }
                return this.mUIRebrokeButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIRebrokeButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAmendRiskWindow : WinWindow
    {
        
        public UIAmendRiskWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("AUTO208-1001");
            #endregion
        }
        
        #region Properties
        public WinButton UIAmendRiskButton
        {
            get
            {
                if ((this.mUIAmendRiskButton == null))
                {
                    this.mUIAmendRiskButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAmendRiskButton.SearchProperties[WinButton.PropertyNames.Name] = "Amend Risk...";
                    this.mUIAmendRiskButton.WindowTitles.Add("AUTO208-1001");
                    #endregion
                }
                return this.mUIAmendRiskButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAmendRiskButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAmendRiskWindow1 : WinWindow
    {
        
        public UIAmendRiskWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Amend Risk";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Amend Risk");
            #endregion
        }
        
        #region Properties
        public UIItemWindow68 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow68(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIProposerDetailsWindow1 UIProposerDetailsWindow
        {
            get
            {
                if ((this.mUIProposerDetailsWindow == null))
                {
                    this.mUIProposerDetailsWindow = new UIProposerDetailsWindow1(this);
                }
                return this.mUIProposerDetailsWindow;
            }
        }
        
        public UICalculateQuoteWindow1 UICalculateQuoteWindow
        {
            get
            {
                if ((this.mUICalculateQuoteWindow == null))
                {
                    this.mUICalculateQuoteWindow = new UICalculateQuoteWindow1(this);
                }
                return this.mUICalculateQuoteWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow68 mUIItemWindow;
        
        private UIProposerDetailsWindow1 mUIProposerDetailsWindow;
        
        private UICalculateQuoteWindow1 mUICalculateQuoteWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow68 : WinWindow
    {
        
        public UIItemWindow68(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("Amend Risk");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Amend Risk");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIProposerDetailsWindow1 : WinWindow
    {
        
        public UIProposerDetailsWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "41";
            this.WindowTitles.Add("Amend Risk");
            #endregion
        }
        
        #region Properties
        public WinButton UIProposerDetailsButton
        {
            get
            {
                if ((this.mUIProposerDetailsButton == null))
                {
                    this.mUIProposerDetailsButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIProposerDetailsButton.SearchProperties[WinButton.PropertyNames.Name] = "Proposer Details...";
                    this.mUIProposerDetailsButton.WindowTitles.Add("Amend Risk");
                    #endregion
                }
                return this.mUIProposerDetailsButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIProposerDetailsButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICalculateQuoteWindow1 : WinWindow
    {
        
        public UICalculateQuoteWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "27";
            this.WindowTitles.Add("Amend Risk");
            #endregion
        }
        
        #region Properties
        public WinButton UICalculateQuoteButton
        {
            get
            {
                if ((this.mUICalculateQuoteButton == null))
                {
                    this.mUICalculateQuoteButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICalculateQuoteButton.SearchProperties[WinButton.PropertyNames.Name] = "Calculate Quote";
                    this.mUICalculateQuoteButton.WindowTitles.Add("Amend Risk");
                    #endregion
                }
                return this.mUICalculateQuoteButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICalculateQuoteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAmendRiskResultsWindow : WinWindow
    {
        
        public UIAmendRiskResultsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Amend Risk Results";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Amend Risk Results");
            #endregion
        }
        
        #region Properties
        public UIRenewPolicyWindow1 UIRenewPolicyWindow
        {
            get
            {
                if ((this.mUIRenewPolicyWindow == null))
                {
                    this.mUIRenewPolicyWindow = new UIRenewPolicyWindow1(this);
                }
                return this.mUIRenewPolicyWindow;
            }
        }
        
        public UIItemWindow69 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow69(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIRenewPolicyWindow1 mUIRenewPolicyWindow;
        
        private UIItemWindow69 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRenewPolicyWindow1 : WinWindow
    {
        
        public UIRenewPolicyWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "12";
            this.WindowTitles.Add("Amend Risk Results");
            #endregion
        }
        
        #region Properties
        public WinButton UIRenewPolicyButton
        {
            get
            {
                if ((this.mUIRenewPolicyButton == null))
                {
                    this.mUIRenewPolicyButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIRenewPolicyButton.SearchProperties[WinButton.PropertyNames.Name] = "Renew Policy";
                    this.mUIRenewPolicyButton.WindowTitles.Add("Amend Risk Results");
                    #endregion
                }
                return this.mUIRenewPolicyButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIRenewPolicyButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow69 : WinWindow
    {
        
        public UIItemWindow69(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ListView20WndClass";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "8";
            this.WindowTitles.Add("Amend Risk Results");
            #endregion
        }
        
        #region Properties
        public WinClient UIAmendRiskResultsClient
        {
            get
            {
                if ((this.mUIAmendRiskResultsClient == null))
                {
                    this.mUIAmendRiskResultsClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIAmendRiskResultsClient.WindowTitles.Add("Amend Risk Results");
                    #endregion
                }
                return this.mUIAmendRiskResultsClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIAmendRiskResultsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAUTO2211001Window : WinWindow
    {
        
        public UIAUTO2211001Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "AUTO221-1001";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("AUTO221-1001");
            #endregion
        }
        
        #region Properties
        public UIRenewPolicyWindow2 UIRenewPolicyWindow
        {
            get
            {
                if ((this.mUIRenewPolicyWindow == null))
                {
                    this.mUIRenewPolicyWindow = new UIRenewPolicyWindow2(this);
                }
                return this.mUIRenewPolicyWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIRenewPolicyWindow2 mUIRenewPolicyWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRenewPolicyWindow2 : WinWindow
    {
        
        public UIRenewPolicyWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "10";
            this.WindowTitles.Add("AUTO221-1001");
            #endregion
        }
        
        #region Properties
        public WinButton UIRenewPolicyButton
        {
            get
            {
                if ((this.mUIRenewPolicyButton == null))
                {
                    this.mUIRenewPolicyButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIRenewPolicyButton.SearchProperties[WinButton.PropertyNames.Name] = "Renew Policy";
                    this.mUIRenewPolicyButton.WindowTitles.Add("AUTO221-1001");
                    #endregion
                }
                return this.mUIRenewPolicyButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIRenewPolicyButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRenewalAcceptWindow : WinWindow
    {
        
        public UIRenewalAcceptWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Renewal Accept";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Renewal Accept");
            #endregion
        }
        
        #region Properties
        public UIAlternativeWindow UIAlternativeWindow
        {
            get
            {
                if ((this.mUIAlternativeWindow == null))
                {
                    this.mUIAlternativeWindow = new UIAlternativeWindow(this);
                }
                return this.mUIAlternativeWindow;
            }
        }
        
        public UIOKWindow35 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow35(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIAlternativeWindow mUIAlternativeWindow;
        
        private UIOKWindow35 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAlternativeWindow : WinWindow
    {
        
        public UIAlternativeWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Renewal Accept");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UIAlternativeRadioButton
        {
            get
            {
                if ((this.mUIAlternativeRadioButton == null))
                {
                    this.mUIAlternativeRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIAlternativeRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Alternative";
                    this.mUIAlternativeRadioButton.WindowTitles.Add("Renewal Accept");
                    #endregion
                }
                return this.mUIAlternativeRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUIAlternativeRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow35 : WinWindow
    {
        
        public UIOKWindow35(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "4";
            this.WindowTitles.Add("Renewal Accept");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Renewal Accept");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIInsurerNoticeRevaluaWindow : WinWindow
    {
        
        public UIInsurerNoticeRevaluaWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Insurer Notice - Revaluation of Rebroked Quote Detail Required";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Insurer Notice - Revaluation of Rebroked Quote Detail Required");
            #endregion
        }
        
        #region Properties
        public UIOKWindow36 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow36(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow36 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow36 : WinWindow
    {
        
        public UIOKWindow36(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Insurer Notice - Revaluation of Rebroked Quote Detail Required");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Insurer Notice - Revaluation of Rebroked Quote Detail Required");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRenewalsNewBusinessAWindow : WinWindow
    {
        
        public UIRenewalsNewBusinessAWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Renewals : New Business Accept";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Renewals : New Business Accept");
            #endregion
        }
        
        #region Properties
        public UIItemWindow70 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow70(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIAcceptWindow2 UIAcceptWindow
        {
            get
            {
                if ((this.mUIAcceptWindow == null))
                {
                    this.mUIAcceptWindow = new UIAcceptWindow2(this);
                }
                return this.mUIAcceptWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow70 mUIItemWindow;
        
        private UIAcceptWindow2 mUIAcceptWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow70 : WinWindow
    {
        
        public UIItemWindow70(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ListView20WndClass";
            this.WindowTitles.Add("Renewals : New Business Accept");
            #endregion
        }
        
        #region Properties
        public WinClient UIItemClient
        {
            get
            {
                if ((this.mUIItemClient == null))
                {
                    this.mUIItemClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIItemClient.WindowTitles.Add("Renewals : New Business Accept");
                    #endregion
                }
                return this.mUIItemClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIItemClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAcceptWindow2 : WinWindow
    {
        
        public UIAcceptWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Renewals : New Business Accept");
            #endregion
        }
        
        #region Properties
        public WinButton UIAcceptButton
        {
            get
            {
                if ((this.mUIAcceptButton == null))
                {
                    this.mUIAcceptButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAcceptButton.SearchProperties[WinButton.PropertyNames.Name] = "Accept";
                    this.mUIAcceptButton.WindowTitles.Add("Renewals : New Business Accept");
                    #endregion
                }
                return this.mUIAcceptButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAcceptButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAUTO2251001Window : WinWindow
    {
        
        public UIAUTO2251001Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "AUTO225-1001";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("AUTO225-1001");
            #endregion
        }
        
        #region Properties
        public UIAmendRiskWindow2 UIAmendRiskWindow
        {
            get
            {
                if ((this.mUIAmendRiskWindow == null))
                {
                    this.mUIAmendRiskWindow = new UIAmendRiskWindow2(this);
                }
                return this.mUIAmendRiskWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIAmendRiskWindow2 mUIAmendRiskWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAmendRiskWindow2 : WinWindow
    {
        
        public UIAmendRiskWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "29";
            this.WindowTitles.Add("AUTO225-1001");
            #endregion
        }
        
        #region Properties
        public WinButton UIAmendRiskButton
        {
            get
            {
                if ((this.mUIAmendRiskButton == null))
                {
                    this.mUIAmendRiskButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAmendRiskButton.SearchProperties[WinButton.PropertyNames.Name] = "Amend Risk...";
                    this.mUIAmendRiskButton.WindowTitles.Add("AUTO225-1001");
                    #endregion
                }
                return this.mUIAmendRiskButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAmendRiskButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHouseholdRenewalsAmeWindow : WinWindow
    {
        
        public UIHouseholdRenewalsAmeWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Household Renewals Amend Risk";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Household Renewals Amend Risk");
            #endregion
        }
        
        #region Properties
        public UIItemWindow72 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow72(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UINextWindow7 UINextWindow
        {
            get
            {
                if ((this.mUINextWindow == null))
                {
                    this.mUINextWindow = new UINextWindow7(this);
                }
                return this.mUINextWindow;
            }
        }
        
        public UINextWindow11 UINextWindow1
        {
            get
            {
                if ((this.mUINextWindow1 == null))
                {
                    this.mUINextWindow1 = new UINextWindow11(this);
                }
                return this.mUINextWindow1;
            }
        }
        
        public UINextWindow21 UINextWindow2
        {
            get
            {
                if ((this.mUINextWindow2 == null))
                {
                    this.mUINextWindow2 = new UINextWindow21(this);
                }
                return this.mUINextWindow2;
            }
        }
        
        public UINextWindow31 UINextWindow3
        {
            get
            {
                if ((this.mUINextWindow3 == null))
                {
                    this.mUINextWindow3 = new UINextWindow31(this);
                }
                return this.mUINextWindow3;
            }
        }
        
        public UINextWindow41 UINextWindow4
        {
            get
            {
                if ((this.mUINextWindow4 == null))
                {
                    this.mUINextWindow4 = new UINextWindow41(this);
                }
                return this.mUINextWindow4;
            }
        }
        
        public UINextWindow51 UINextWindow5
        {
            get
            {
                if ((this.mUINextWindow5 == null))
                {
                    this.mUINextWindow5 = new UINextWindow51(this);
                }
                return this.mUINextWindow5;
            }
        }
        
        public UINextWindow61 UINextWindow6
        {
            get
            {
                if ((this.mUINextWindow6 == null))
                {
                    this.mUINextWindow6 = new UINextWindow61(this);
                }
                return this.mUINextWindow6;
            }
        }
        
        public UIQuoteWindow1 UIQuoteWindow
        {
            get
            {
                if ((this.mUIQuoteWindow == null))
                {
                    this.mUIQuoteWindow = new UIQuoteWindow1(this);
                }
                return this.mUIQuoteWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow72 mUIItemWindow;
        
        private UINextWindow7 mUINextWindow;
        
        private UINextWindow11 mUINextWindow1;
        
        private UINextWindow21 mUINextWindow2;
        
        private UINextWindow31 mUINextWindow3;
        
        private UINextWindow41 mUINextWindow4;
        
        private UINextWindow51 mUINextWindow5;
        
        private UINextWindow61 mUINextWindow6;
        
        private UIQuoteWindow1 mUIQuoteWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow72 : WinWindow
    {
        
        public UIItemWindow72(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "52";
            this.WindowTitles.Add("Household Renewals Amend Risk");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Household Renewals Amend Risk");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINextWindow7 : WinWindow
    {
        
        public UINextWindow7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "71";
            this.WindowTitles.Add("Household Renewals Amend Risk");
            #endregion
        }
        
        #region Properties
        public WinButton UINextButton
        {
            get
            {
                if ((this.mUINextButton == null))
                {
                    this.mUINextButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINextButton.SearchProperties[WinButton.PropertyNames.Name] = "Next >";
                    this.mUINextButton.WindowTitles.Add("Household Renewals Amend Risk");
                    #endregion
                }
                return this.mUINextButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINextButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINextWindow11 : WinWindow
    {
        
        public UINextWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "17";
            this.WindowTitles.Add("Household Renewals Amend Risk");
            #endregion
        }
        
        #region Properties
        public WinButton UINextButton
        {
            get
            {
                if ((this.mUINextButton == null))
                {
                    this.mUINextButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINextButton.SearchProperties[WinButton.PropertyNames.Name] = "Next >";
                    this.mUINextButton.WindowTitles.Add("Household Renewals Amend Risk");
                    #endregion
                }
                return this.mUINextButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINextButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINextWindow21 : WinWindow
    {
        
        public UINextWindow21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "18";
            this.WindowTitles.Add("Household Renewals Amend Risk");
            #endregion
        }
        
        #region Properties
        public WinButton UINextButton
        {
            get
            {
                if ((this.mUINextButton == null))
                {
                    this.mUINextButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINextButton.SearchProperties[WinButton.PropertyNames.Name] = "Next >";
                    this.mUINextButton.WindowTitles.Add("Household Renewals Amend Risk");
                    #endregion
                }
                return this.mUINextButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINextButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINextWindow31 : WinWindow
    {
        
        public UINextWindow31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "36";
            this.WindowTitles.Add("Household Renewals Amend Risk");
            #endregion
        }
        
        #region Properties
        public WinButton UINextButton
        {
            get
            {
                if ((this.mUINextButton == null))
                {
                    this.mUINextButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINextButton.SearchProperties[WinButton.PropertyNames.Name] = "Next >";
                    this.mUINextButton.WindowTitles.Add("Household Renewals Amend Risk");
                    #endregion
                }
                return this.mUINextButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINextButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINextWindow41 : WinWindow
    {
        
        public UINextWindow41(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "43";
            this.WindowTitles.Add("Household Renewals Amend Risk");
            #endregion
        }
        
        #region Properties
        public WinButton UINextButton
        {
            get
            {
                if ((this.mUINextButton == null))
                {
                    this.mUINextButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINextButton.SearchProperties[WinButton.PropertyNames.Name] = "Next >";
                    this.mUINextButton.WindowTitles.Add("Household Renewals Amend Risk");
                    #endregion
                }
                return this.mUINextButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINextButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINextWindow51 : WinWindow
    {
        
        public UINextWindow51(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "76";
            this.WindowTitles.Add("Household Renewals Amend Risk");
            #endregion
        }
        
        #region Properties
        public WinButton UINextButton
        {
            get
            {
                if ((this.mUINextButton == null))
                {
                    this.mUINextButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINextButton.SearchProperties[WinButton.PropertyNames.Name] = "Next >";
                    this.mUINextButton.WindowTitles.Add("Household Renewals Amend Risk");
                    #endregion
                }
                return this.mUINextButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINextButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINextWindow61 : WinWindow
    {
        
        public UINextWindow61(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "75";
            this.WindowTitles.Add("Household Renewals Amend Risk");
            #endregion
        }
        
        #region Properties
        public WinButton UINextButton
        {
            get
            {
                if ((this.mUINextButton == null))
                {
                    this.mUINextButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINextButton.SearchProperties[WinButton.PropertyNames.Name] = "Next >";
                    this.mUINextButton.WindowTitles.Add("Household Renewals Amend Risk");
                    #endregion
                }
                return this.mUINextButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINextButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIQuoteWindow1 : WinWindow
    {
        
        public UIQuoteWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "141";
            this.WindowTitles.Add("Household Renewals Amend Risk");
            #endregion
        }
        
        #region Properties
        public WinButton UIQuoteButton
        {
            get
            {
                if ((this.mUIQuoteButton == null))
                {
                    this.mUIQuoteButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIQuoteButton.SearchProperties[WinButton.PropertyNames.Name] = "Quote";
                    this.mUIQuoteButton.WindowTitles.Add("Household Renewals Amend Risk");
                    #endregion
                }
                return this.mUIQuoteButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIQuoteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICreditCheckAtRenewalWindow : WinWindow
    {
        
        public UICreditCheckAtRenewalWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Credit Check At Renewal";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Credit Check At Renewal");
            #endregion
        }
        
        #region Properties
        public UIProceedWindow UIProceedWindow
        {
            get
            {
                if ((this.mUIProceedWindow == null))
                {
                    this.mUIProceedWindow = new UIProceedWindow(this);
                }
                return this.mUIProceedWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIProceedWindow mUIProceedWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIProceedWindow : WinWindow
    {
        
        public UIProceedWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Credit Check At Renewal");
            #endregion
        }
        
        #region Properties
        public WinButton UIProceedButton
        {
            get
            {
                if ((this.mUIProceedButton == null))
                {
                    this.mUIProceedButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIProceedButton.SearchProperties[WinButton.PropertyNames.Name] = "Proceed";
                    this.mUIProceedButton.WindowTitles.Add("Credit Check At Renewal");
                    #endregion
                }
                return this.mUIProceedButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIProceedButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHouseholdRenewalsAmeWindow1 : WinWindow
    {
        
        public UIHouseholdRenewalsAmeWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Household Renewals Amend Risk results";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Household Renewals Amend Risk results");
            #endregion
        }
        
        #region Properties
        public UIItemWindow73 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow73(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIRenewPolicyWindow3 UIRenewPolicyWindow
        {
            get
            {
                if ((this.mUIRenewPolicyWindow == null))
                {
                    this.mUIRenewPolicyWindow = new UIRenewPolicyWindow3(this);
                }
                return this.mUIRenewPolicyWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow73 mUIItemWindow;
        
        private UIRenewPolicyWindow3 mUIRenewPolicyWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow73 : WinWindow
    {
        
        public UIItemWindow73(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ListView20WndClass";
            this.WindowTitles.Add("Household Renewals Amend Risk results");
            #endregion
        }
        
        #region Properties
        public WinClient UIHouseholdRenewalsAmeClient
        {
            get
            {
                if ((this.mUIHouseholdRenewalsAmeClient == null))
                {
                    this.mUIHouseholdRenewalsAmeClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIHouseholdRenewalsAmeClient.WindowTitles.Add("Household Renewals Amend Risk results");
                    #endregion
                }
                return this.mUIHouseholdRenewalsAmeClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIHouseholdRenewalsAmeClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRenewPolicyWindow3 : WinWindow
    {
        
        public UIRenewPolicyWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Household Renewals Amend Risk results");
            #endregion
        }
        
        #region Properties
        public WinButton UIRenewPolicyButton
        {
            get
            {
                if ((this.mUIRenewPolicyButton == null))
                {
                    this.mUIRenewPolicyButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIRenewPolicyButton.SearchProperties[WinButton.PropertyNames.Name] = "Renew Policy";
                    this.mUIRenewPolicyButton.WindowTitles.Add("Household Renewals Amend Risk results");
                    #endregion
                }
                return this.mUIRenewPolicyButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIRenewPolicyButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAUTO2301001Window : WinWindow
    {
        
        public UIAUTO2301001Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "AUTO230-1001";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("AUTO230-1001");
            #endregion
        }
        
        #region Properties
        public UIRebrokeWindow1 UIRebrokeWindow
        {
            get
            {
                if ((this.mUIRebrokeWindow == null))
                {
                    this.mUIRebrokeWindow = new UIRebrokeWindow1(this);
                }
                return this.mUIRebrokeWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIRebrokeWindow1 mUIRebrokeWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRebrokeWindow1 : WinWindow
    {
        
        public UIRebrokeWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "30";
            this.WindowTitles.Add("AUTO230-1001");
            #endregion
        }
        
        #region Properties
        public WinButton UIRebrokeButton
        {
            get
            {
                if ((this.mUIRebrokeButton == null))
                {
                    this.mUIRebrokeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIRebrokeButton.SearchProperties[WinButton.PropertyNames.Name] = "Rebroke...";
                    this.mUIRebrokeButton.WindowTitles.Add("AUTO230-1001");
                    #endregion
                }
                return this.mUIRebrokeButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIRebrokeButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHouseholdRebrokeResuWindow : WinWindow
    {
        
        public UIHouseholdRebrokeResuWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Household Rebroke Results";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Household Rebroke Results");
            #endregion
        }
        
        #region Properties
        public UIOKWindow37 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow37(this);
                }
                return this.mUIOKWindow;
            }
        }
        
        public UIItemWindow74 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow74(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISelectAlternativeWindow1 UISelectAlternativeWindow
        {
            get
            {
                if ((this.mUISelectAlternativeWindow == null))
                {
                    this.mUISelectAlternativeWindow = new UISelectAlternativeWindow1(this);
                }
                return this.mUISelectAlternativeWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow37 mUIOKWindow;
        
        private UIItemWindow74 mUIItemWindow;
        
        private UISelectAlternativeWindow1 mUISelectAlternativeWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow37 : WinWindow
    {
        
        public UIOKWindow37(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "10";
            this.WindowTitles.Add("Household Rebroke Results");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Household Rebroke Results");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow74 : WinWindow
    {
        
        public UIItemWindow74(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ListView20WndClass";
            this.WindowTitles.Add("Household Rebroke Results");
            #endregion
        }
        
        #region Properties
        public WinClient UIHouseholdRebrokeResuClient
        {
            get
            {
                if ((this.mUIHouseholdRebrokeResuClient == null))
                {
                    this.mUIHouseholdRebrokeResuClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIHouseholdRebrokeResuClient.WindowTitles.Add("Household Rebroke Results");
                    #endregion
                }
                return this.mUIHouseholdRebrokeResuClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIHouseholdRebrokeResuClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISelectAlternativeWindow1 : WinWindow
    {
        
        public UISelectAlternativeWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "12";
            this.WindowTitles.Add("Household Rebroke Results");
            #endregion
        }
        
        #region Properties
        public WinButton UISelectAlternativeButton
        {
            get
            {
                if ((this.mUISelectAlternativeButton == null))
                {
                    this.mUISelectAlternativeButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISelectAlternativeButton.SearchProperties[WinButton.PropertyNames.Name] = "Select Alternative";
                    this.mUISelectAlternativeButton.WindowTitles.Add("Household Rebroke Results");
                    #endregion
                }
                return this.mUISelectAlternativeButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISelectAlternativeButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAUTO2311001Window : WinWindow
    {
        
        public UIAUTO2311001Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "AUTO231-1001";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("AUTO231-1001");
            #endregion
        }
        
        #region Properties
        public UIRenewPolicyWindow4 UIRenewPolicyWindow
        {
            get
            {
                if ((this.mUIRenewPolicyWindow == null))
                {
                    this.mUIRenewPolicyWindow = new UIRenewPolicyWindow4(this);
                }
                return this.mUIRenewPolicyWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIRenewPolicyWindow4 mUIRenewPolicyWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRenewPolicyWindow4 : WinWindow
    {
        
        public UIRenewPolicyWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "25";
            this.WindowTitles.Add("AUTO231-1001");
            #endregion
        }
        
        #region Properties
        public WinButton UIRenewPolicyButton
        {
            get
            {
                if ((this.mUIRenewPolicyButton == null))
                {
                    this.mUIRenewPolicyButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIRenewPolicyButton.SearchProperties[WinButton.PropertyNames.Name] = "Renew Policy...";
                    this.mUIRenewPolicyButton.WindowTitles.Add("AUTO231-1001");
                    #endregion
                }
                return this.mUIRenewPolicyButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIRenewPolicyButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIRenewalsNewBusinessAWindow1 : WinWindow
    {
        
        public UIRenewalsNewBusinessAWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Renewals: New Business Accept";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6FormDC";
            this.WindowTitles.Add("Renewals: New Business Accept");
            #endregion
        }
        
        #region Properties
        public UIItemWindow75 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow75(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIAcceptWindow3 UIAcceptWindow
        {
            get
            {
                if ((this.mUIAcceptWindow == null))
                {
                    this.mUIAcceptWindow = new UIAcceptWindow3(this);
                }
                return this.mUIAcceptWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow75 mUIItemWindow;
        
        private UIAcceptWindow3 mUIAcceptWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow75 : WinWindow
    {
        
        public UIItemWindow75(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ListView20WndClass";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Renewals: New Business Accept");
            #endregion
        }
        
        #region Properties
        public WinClient UIRenewalsNewBusinessAClient
        {
            get
            {
                if ((this.mUIRenewalsNewBusinessAClient == null))
                {
                    this.mUIRenewalsNewBusinessAClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIRenewalsNewBusinessAClient.WindowTitles.Add("Renewals: New Business Accept");
                    #endregion
                }
                return this.mUIRenewalsNewBusinessAClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIRenewalsNewBusinessAClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAcceptWindow3 : WinWindow
    {
        
        public UIAcceptWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Renewals: New Business Accept");
            #endregion
        }
        
        #region Properties
        public WinButton UIAcceptButton
        {
            get
            {
                if ((this.mUIAcceptButton == null))
                {
                    this.mUIAcceptButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAcceptButton.SearchProperties[WinButton.PropertyNames.Name] = "Accept";
                    this.mUIAcceptButton.WindowTitles.Add("Renewals: New Business Accept");
                    #endregion
                }
                return this.mUIAcceptButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAcceptButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISignonErrorWindow : WinWindow
    {
        
        public UISignonErrorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Signon Error";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Signon Error");
            #endregion
        }
        
        #region Properties
        public UIOKWindow38 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow38(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow38 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow38 : WinWindow
    {
        
        public UIOKWindow38(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Signon Error");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Signon Error");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINewCustomerDAFS001Window : WinWindow
    {
        
        public UINewCustomerDAFS001Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "New Customer: DAFS001";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ThunderRT6MDIForm";
            this.WindowTitles.Add("New Customer: DAFS001");
            #endregion
        }
        
        #region Properties
        public UINewCustomerDetailWindow1 UINewCustomerDetailWindow
        {
            get
            {
                if ((this.mUINewCustomerDetailWindow == null))
                {
                    this.mUINewCustomerDetailWindow = new UINewCustomerDetailWindow1(this);
                }
                return this.mUINewCustomerDetailWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINewCustomerDetailWindow1 mUINewCustomerDetailWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINewCustomerDetailWindow1 : WinWindow
    {
        
        public UINewCustomerDetailWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "32769";
            this.WindowTitles.Add("New Customer: DAFS001");
            #endregion
        }
        
        #region Properties
        public UIItemWindow76 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow76(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow129 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow129(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow76 mUIItemWindow;
        
        private UIItemWindow129 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow76 : WinWindow
    {
        
        public UIItemWindow76(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "4";
            this.WindowTitles.Add("New Customer: DAFS001");
            #endregion
        }
        
        #region Properties
        public WinGroup UIItemGroup
        {
            get
            {
                if ((this.mUIItemGroup == null))
                {
                    this.mUIItemGroup = new WinGroup(this);
                    #region Search Criteria
                    this.mUIItemGroup.WindowTitles.Add("New Customer: DAFS001");
                    #endregion
                }
                return this.mUIItemGroup;
            }
        }
        #endregion
        
        #region Fields
        private WinGroup mUIItemGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow129 : WinWindow
    {
        
        public UIItemWindow129(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "7";
            this.WindowTitles.Add("New Customer: DAFS001");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("New Customer: DAFS001");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIProgramManagerWindow : WinWindow
    {
        
        public UIProgramManagerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Program Manager";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Progman";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public UIDesktopList UIDesktopList
        {
            get
            {
                if ((this.mUIDesktopList == null))
                {
                    this.mUIDesktopList = new UIDesktopList(this);
                }
                return this.mUIDesktopList;
            }
        }
        
        public UIFolderViewWindow UIFolderViewWindow
        {
            get
            {
                if ((this.mUIFolderViewWindow == null))
                {
                    this.mUIFolderViewWindow = new UIFolderViewWindow(this);
                }
                return this.mUIFolderViewWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopList mUIDesktopList;
        
        private UIFolderViewWindow mUIFolderViewWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDesktopList : WinList
    {
        
        public UIDesktopList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Desktop";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinListItem UITestProject7ListItem
        {
            get
            {
                if ((this.mUITestProject7ListItem == null))
                {
                    this.mUITestProject7ListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUITestProject7ListItem.SearchProperties[WinListItem.PropertyNames.Name] = "TestProject7";
                    this.mUITestProject7ListItem.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUITestProject7ListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUITestProject7ListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFolderViewWindow : WinWindow
    {
        
        public UIFolderViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinList UIDesktopList
        {
            get
            {
                if ((this.mUIDesktopList == null))
                {
                    this.mUIDesktopList = new WinList(this);
                    #region Search Criteria
                    this.mUIDesktopList.SearchProperties[WinList.PropertyNames.Name] = "Desktop";
                    this.mUIDesktopList.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUIDesktopList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIDesktopList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMicrosoftWordViewerWindow : WinWindow
    {
        
        public UIMicrosoftWordViewerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Microsoft Word Viewer";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "OpusApp";
            this.WindowTitles.Add("Microsoft Word Viewer");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UIMicrosoftWordViewerTitleBar
        {
            get
            {
                if ((this.mUIMicrosoftWordViewerTitleBar == null))
                {
                    this.mUIMicrosoftWordViewerTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIMicrosoftWordViewerTitleBar.WindowTitles.Add("Microsoft Word Viewer");
                    #endregion
                }
                return this.mUIMicrosoftWordViewerTitleBar;
            }
        }
        
        public UIItemWindow77 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow77(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUIMicrosoftWordViewerTitleBar;
        
        private UIItemWindow77 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow77 : WinWindow
    {
        
        public UIItemWindow77(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "_WwF";
            this.WindowTitles.Add("Microsoft Word Viewer");
            #endregion
        }
        
        #region Properties
        public WinClient UIMicrosoftWordViewerClient
        {
            get
            {
                if ((this.mUIMicrosoftWordViewerClient == null))
                {
                    this.mUIMicrosoftWordViewerClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIMicrosoftWordViewerClient.WindowTitles.Add("Microsoft Word Viewer");
                    #endregion
                }
                return this.mUIMicrosoftWordViewerClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIMicrosoftWordViewerClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIWindowsSecurityWindow1 : WinWindow
    {
        
        public UIWindowsSecurityWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Connect to www.insur-econnect.com";
            #endregion
        }
        
        #region Properties
        public UIItemListItem1 UIItemListItem
        {
            get
            {
                if ((this.mUIItemListItem == null))
                {
                    this.mUIItemListItem = new UIItemListItem1(this);
                }
                return this.mUIItemListItem;
            }
        }
        
        public UIWindowsSecurityPane1 UIWindowsSecurityPane
        {
            get
            {
                if ((this.mUIWindowsSecurityPane == null))
                {
                    this.mUIWindowsSecurityPane = new UIWindowsSecurityPane1(this);
                }
                return this.mUIWindowsSecurityPane;
            }
        }
        #endregion
        
        #region Fields
        private UIItemListItem1 mUIItemListItem;
        
        private UIWindowsSecurityPane1 mUIWindowsSecurityPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemListItem1 : WinListItem
    {
        
        public UIItemListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinEdit UIUsernameEdit
        {
            get
            {
                if ((this.mUIUsernameEdit == null))
                {
                    this.mUIUsernameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIUsernameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "User name";
                    #endregion
                }
                return this.mUIUsernameEdit;
            }
        }
        
        public WinEdit UIPasswordEdit
        {
            get
            {
                if ((this.mUIPasswordEdit == null))
                {
                    this.mUIPasswordEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIPasswordEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Password";
                    #endregion
                }
                return this.mUIPasswordEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIUsernameEdit;
        
        private WinEdit mUIPasswordEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIWindowsSecurityPane1 : WinPane
    {
        
        public UIWindowsSecurityPane1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Connect to www.insur-econnect.com";
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIWarningWindow : WinWindow
    {
        
        public UIWarningWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Warning";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Warning");
            #endregion
        }
        
        #region Properties
        public UIOKWindow39 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow39(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow39 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow39 : WinWindow
    {
        
        public UIOKWindow39(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Warning");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Warning");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIErrorWindow : WinWindow
    {
        
        public UIErrorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Public Credit Check";
            #endregion
        }
        
        #region Properties
        public UIOKWindow40 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow40(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow40 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow40 : WinWindow
    {
        
        public UIOKWindow40(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "Ok";
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
}
